
el_grns_lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  080069e4  080069e4  000169e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080071f4  080071f4  000171f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000004  08007204  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000894  2000007c  0800727c  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000910  0800727c  00020910  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f939  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000039ee  00000000  00000000  0003f9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e48  00000000  00000000  000433d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001cd8  00000000  00000000  00045220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00027d4f  00000000  00000000  00046ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c4be  00000000  00000000  0006ec47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e6fb3  00000000  00000000  0008b105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001720b8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000085f0  00000000  00000000  0017210c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	080069cc 	.word	0x080069cc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	080069cc 	.word	0x080069cc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b96e 	b.w	8000d00 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468c      	mov	ip, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8083 	bne.w	8000b52 <__udivmoddi4+0x116>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d947      	bls.n	8000ae2 <__udivmoddi4+0xa6>
 8000a52:	fab2 f282 	clz	r2, r2
 8000a56:	b142      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	f1c2 0020 	rsb	r0, r2, #32
 8000a5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a60:	4091      	lsls	r1, r2
 8000a62:	4097      	lsls	r7, r2
 8000a64:	ea40 0c01 	orr.w	ip, r0, r1
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbbc f6f8 	udiv	r6, ip, r8
 8000a74:	fa1f fe87 	uxth.w	lr, r7
 8000a78:	fb08 c116 	mls	r1, r8, r6, ip
 8000a7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a80:	fb06 f10e 	mul.w	r1, r6, lr
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8e:	f080 8119 	bcs.w	8000cc4 <__udivmoddi4+0x288>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8116 	bls.w	8000cc4 <__udivmoddi4+0x288>
 8000a98:	3e02      	subs	r6, #2
 8000a9a:	443b      	add	r3, r7
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa4:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	193c      	adds	r4, r7, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aba:	f080 8105 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000abe:	45a6      	cmp	lr, r4
 8000ac0:	f240 8102 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	443c      	add	r4, r7
 8000ac8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000acc:	eba4 040e 	sub.w	r4, r4, lr
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	b11d      	cbz	r5, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c5 4300 	strd	r4, r3, [r5]
 8000adc:	4631      	mov	r1, r6
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	b902      	cbnz	r2, 8000ae6 <__udivmoddi4+0xaa>
 8000ae4:	deff      	udf	#255	; 0xff
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d150      	bne.n	8000b90 <__udivmoddi4+0x154>
 8000aee:	1bcb      	subs	r3, r1, r7
 8000af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af4:	fa1f f887 	uxth.w	r8, r7
 8000af8:	2601      	movs	r6, #1
 8000afa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000afe:	0c21      	lsrs	r1, r4, #16
 8000b00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b08:	fb08 f30c 	mul.w	r3, r8, ip
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000b10:	1879      	adds	r1, r7, r1
 8000b12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0xe2>
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	f200 80e9 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b1e:	4684      	mov	ip, r0
 8000b20:	1ac9      	subs	r1, r1, r3
 8000b22:	b2a3      	uxth	r3, r4
 8000b24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b30:	fb08 f800 	mul.w	r8, r8, r0
 8000b34:	45a0      	cmp	r8, r4
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x10c>
 8000b38:	193c      	adds	r4, r7, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x10a>
 8000b40:	45a0      	cmp	r8, r4
 8000b42:	f200 80d9 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b46:	4618      	mov	r0, r3
 8000b48:	eba4 0408 	sub.w	r4, r4, r8
 8000b4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b50:	e7bf      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x12e>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	f000 80b1 	beq.w	8000cbe <__udivmoddi4+0x282>
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b62:	4630      	mov	r0, r6
 8000b64:	4631      	mov	r1, r6
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f683 	clz	r6, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d14a      	bne.n	8000c08 <__udivmoddi4+0x1cc>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0x140>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80b8 	bhi.w	8000cec <__udivmoddi4+0x2b0>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	468c      	mov	ip, r1
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d0a8      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b8e:	e7a5      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f603 	lsr.w	r6, r0, r3
 8000b98:	4097      	lsls	r7, r2
 8000b9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba2:	40d9      	lsrs	r1, r3
 8000ba4:	4330      	orrs	r0, r6
 8000ba6:	0c03      	lsrs	r3, r0, #16
 8000ba8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bac:	fa1f f887 	uxth.w	r8, r7
 8000bb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f108 	mul.w	r1, r6, r8
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x19c>
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bca:	f080 808d 	bcs.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 808a 	bls.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	443b      	add	r3, r7
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b281      	uxth	r1, r0
 8000bdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb00 f308 	mul.w	r3, r0, r8
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x1c4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bf6:	d273      	bcs.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d971      	bls.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	4439      	add	r1, r7
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c06:	e778      	b.n	8000afa <__udivmoddi4+0xbe>
 8000c08:	f1c6 0c20 	rsb	ip, r6, #32
 8000c0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c14:	431c      	orrs	r4, r3
 8000c16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c26:	431f      	orrs	r7, r3
 8000c28:	0c3b      	lsrs	r3, r7, #16
 8000c2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c2e:	fa1f f884 	uxth.w	r8, r4
 8000c32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3e:	458a      	cmp	sl, r1
 8000c40:	fa02 f206 	lsl.w	r2, r2, r6
 8000c44:	fa00 f306 	lsl.w	r3, r0, r6
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x220>
 8000c4a:	1861      	adds	r1, r4, r1
 8000c4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c50:	d248      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c52:	458a      	cmp	sl, r1
 8000c54:	d946      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4421      	add	r1, r4
 8000c5c:	eba1 010a 	sub.w	r1, r1, sl
 8000c60:	b2bf      	uxth	r7, r7
 8000c62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c6e:	fb00 f808 	mul.w	r8, r0, r8
 8000c72:	45b8      	cmp	r8, r7
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x24a>
 8000c76:	19e7      	adds	r7, r4, r7
 8000c78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7c:	d22e      	bcs.n	8000cdc <__udivmoddi4+0x2a0>
 8000c7e:	45b8      	cmp	r8, r7
 8000c80:	d92c      	bls.n	8000cdc <__udivmoddi4+0x2a0>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4427      	add	r7, r4
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	eba7 0708 	sub.w	r7, r7, r8
 8000c8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c92:	454f      	cmp	r7, r9
 8000c94:	46c6      	mov	lr, r8
 8000c96:	4649      	mov	r1, r9
 8000c98:	d31a      	bcc.n	8000cd0 <__udivmoddi4+0x294>
 8000c9a:	d017      	beq.n	8000ccc <__udivmoddi4+0x290>
 8000c9c:	b15d      	cbz	r5, 8000cb6 <__udivmoddi4+0x27a>
 8000c9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ca2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ca6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000caa:	40f2      	lsrs	r2, r6
 8000cac:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb0:	40f7      	lsrs	r7, r6
 8000cb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e70b      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e9      	b.n	8000a9c <__udivmoddi4+0x60>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6fd      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000ccc:	4543      	cmp	r3, r8
 8000cce:	d2e5      	bcs.n	8000c9c <__udivmoddi4+0x260>
 8000cd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7df      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e7d2      	b.n	8000c86 <__udivmoddi4+0x24a>
 8000ce0:	4660      	mov	r0, ip
 8000ce2:	e78d      	b.n	8000c00 <__udivmoddi4+0x1c4>
 8000ce4:	4681      	mov	r9, r0
 8000ce6:	e7b9      	b.n	8000c5c <__udivmoddi4+0x220>
 8000ce8:	4666      	mov	r6, ip
 8000cea:	e775      	b.n	8000bd8 <__udivmoddi4+0x19c>
 8000cec:	4630      	mov	r0, r6
 8000cee:	e74a      	b.n	8000b86 <__udivmoddi4+0x14a>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	4439      	add	r1, r7
 8000cf6:	e713      	b.n	8000b20 <__udivmoddi4+0xe4>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	e724      	b.n	8000b48 <__udivmoddi4+0x10c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <TextLCD_Strobe>:
  {
  }
}

void TextLCD_Strobe(TextLCDType *lcd) // anropas för att kunnna sktriva till LCD
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	6078      	str	r0, [r7, #4]
	// Set bit 2 which corresponds to E (strobe) and send data
	lcd->data |= 0x04;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	795b      	ldrb	r3, [r3, #5]
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6818      	ldr	r0, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	791b      	ldrb	r3, [r3, #4]
 8000d22:	b299      	uxth	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	1d5a      	adds	r2, r3, #5
 8000d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f001 fd6c 	bl	800280c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f001 fa49 	bl	80021cc <HAL_Delay>
	// Clear bit 2 which corresponds to E (strobe) and send data
	lcd->data &= 0xFB;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	795b      	ldrb	r3, [r3, #5]
 8000d3e:	f023 0304 	bic.w	r3, r3, #4
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	791b      	ldrb	r3, [r3, #4]
 8000d50:	b299      	uxth	r1, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	1d5a      	adds	r2, r3, #5
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f001 fd55 	bl	800280c <HAL_I2C_Master_Transmit>
//	min_Delay(40);
	HAL_Delay(1);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f001 fa32 	bl	80021cc <HAL_Delay>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <TextLCD_Cmd>:

void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd) // skickar cmd till LCD, anrop: TextLCD_Cmd(&lcd, 0x02); där 02 är kommandot
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
	// for command RS is set to 0
	lcd->data = (lcd->data & 0x0C) | (cmd & 0xF0);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	795b      	ldrb	r3, [r3, #5]
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	f003 030c 	and.w	r3, r3, #12
 8000d86:	b25a      	sxtb	r2, r3
 8000d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d8c:	f023 030f 	bic.w	r3, r3, #15
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	791b      	ldrb	r3, [r3, #4]
 8000da4:	b299      	uxth	r1, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	1d5a      	adds	r2, r3, #5
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2301      	movs	r3, #1
 8000db2:	f001 fd2b 	bl	800280c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa4 	bl	8000d04 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0C) | (cmd << 4);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	795b      	ldrb	r3, [r3, #5]
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	f003 030c 	and.w	r3, r3, #12
 8000dc6:	b25a      	sxtb	r2, r3
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	791b      	ldrb	r3, [r3, #4]
 8000de0:	b299      	uxth	r1, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	1d5a      	adds	r2, r3, #5
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	f001 fd0d 	bl	800280c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff86 	bl	8000d04 <TextLCD_Strobe>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <TextLCD_Data>:

void TextLCD_Data(TextLCDType *lcd, uint8_t data) // anrop: TextLCD_Data(&lcd, 0x55); skickar komando 55 till LCD
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
	// for data RS is set to 1
	lcd->data = (lcd->data & 0x0D) | (data & 0xF0) | 0x01;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	795b      	ldrb	r3, [r3, #5]
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	f003 030d 	and.w	r3, r3, #13
 8000e16:	b25a      	sxtb	r2, r3
 8000e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e1c:	f023 030f 	bic.w	r3, r3, #15
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	791b      	ldrb	r3, [r3, #4]
 8000e3a:	b299      	uxth	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	1d5a      	adds	r2, r3, #5
 8000e40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2301      	movs	r3, #1
 8000e48:	f001 fce0 	bl	800280c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff59 	bl	8000d04 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0D) | (data << 4) | 0x01;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	795b      	ldrb	r3, [r3, #5]
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	f003 030d 	and.w	r3, r3, #13
 8000e5c:	b25a      	sxtb	r2, r3
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	791b      	ldrb	r3, [r3, #4]
 8000e7c:	b299      	uxth	r1, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	1d5a      	adds	r2, r3, #5
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f001 fcbf 	bl	800280c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ff38 	bl	8000d04 <TextLCD_Strobe>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <TextLCD_Init>:

void TextLCD_Init(TextLCDType *lcd, I2C_HandleTypeDef *hi2c, uint8_t DevAddress)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	71fb      	strb	r3, [r7, #7]
	lcd->hi2c = hi2c;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	601a      	str	r2, [r3, #0]
	lcd->DevAddress = DevAddress;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	79fa      	ldrb	r2, [r7, #7]
 8000eb4:	711a      	strb	r2, [r3, #4]
	lcd->data = 0x38;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2238      	movs	r2, #56	; 0x38
 8000eba:	715a      	strb	r2, [r3, #5]

	// Do init setting LCD controller into 4-bit mode

	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	791b      	ldrb	r3, [r3, #4]
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	1d5a      	adds	r2, r3, #5
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f001 fc9b 	bl	800280c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f7ff ff14 	bl	8000d04 <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	791b      	ldrb	r3, [r3, #4]
 8000ee4:	b299      	uxth	r1, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1d5a      	adds	r2, r3, #5
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f001 fc8b 	bl	800280c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f7ff ff04 	bl	8000d04 <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	791b      	ldrb	r3, [r3, #4]
 8000f04:	b299      	uxth	r1, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	1d5a      	adds	r2, r3, #5
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	f001 fc7b 	bl	800280c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f7ff fef4 	bl	8000d04 <TextLCD_Strobe>
	lcd->data = 0x28;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2228      	movs	r2, #40	; 0x28
 8000f20:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	1d5a      	adds	r2, r3, #5
 8000f30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	f001 fc68 	bl	800280c <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff fee1 	bl	8000d04 <TextLCD_Strobe>

	// Finished setting up 4-bit mode. Let's configure display

	TextLCD_Cmd(lcd, 0x28); //N=1 (2 line), F=0 (5x8)
 8000f42:	2128      	movs	r1, #40	; 0x28
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff ff13 	bl	8000d70 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x08); //Display off, Cursor Off, Blink off
 8000f4a:	2108      	movs	r1, #8
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f7ff ff0f 	bl	8000d70 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x01); //Clear
 8000f52:	2101      	movs	r1, #1
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f7ff ff0b 	bl	8000d70 <TextLCD_Cmd>
	HAL_Delay(5);
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f001 f936 	bl	80021cc <HAL_Delay>
	TextLCD_Cmd(lcd, 0x06); //ID=1(increment), S=0 (no shift)
 8000f60:	2106      	movs	r1, #6
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f7ff ff04 	bl	8000d70 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x0C); //Display on, Cursor Off, Blink off
 8000f68:	210c      	movs	r1, #12
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff ff00 	bl	8000d70 <TextLCD_Cmd>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <TextLCD_Home>:

void TextLCD_Home(TextLCDType *lcd){ // skall flytta cursor till första positionen
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

	TextLCD_Cmd(lcd, 0x02); // 02 = home
 8000f80:	2102      	movs	r1, #2
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fef4 	bl	8000d70 <TextLCD_Cmd>
//	TextLCD_Strobe(lcd); // läs in-pin
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <TextLCD_Position>:
	TextLCD_Cmd(lcd, 0x01); // skickar 01 till LCD, 01 = clear. Rensar en pixel?
//	TextLCD_Strobe(lcd); // anropar för att LCD skall uppdateras och läsa in-pinnen.
}

void TextLCD_Position(TextLCDType *lcd, int x, int y) // Stulen.
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	uint8_t cmd_bit = 0x80;
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	75fb      	strb	r3, [r7, #23]
	uint8_t adr     = x + (0x40 * y);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	019b      	lsls	r3, r3, #6
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	75bb      	strb	r3, [r7, #22]
	uint8_t cmd     = cmd_bit | adr;
 8000fb0:	7dfa      	ldrb	r2, [r7, #23]
 8000fb2:	7dbb      	ldrb	r3, [r7, #22]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	757b      	strb	r3, [r7, #21]
	TextLCD_Cmd(lcd, cmd);
 8000fb8:	7d7b      	ldrb	r3, [r7, #21]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff fed7 	bl	8000d70 <TextLCD_Cmd>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <TextLCD_Putchar>:

void TextLCD_Putchar(TextLCDType *lcd, uint8_t data){ // anrop: TextLCD_Putchar(&lcd, 'K'); ref till lcd och vilken char.
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	70fb      	strb	r3, [r7, #3]

	TextLCD_Data(lcd, data);// + data);
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff10 	bl	8000e00 <TextLCD_Data>
//	TextLCD_Strobe(lcd);
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <TextLCD_Puts>:

	TextLCD_Data(lcd, 0x30 + data);// + data);
//	TextLCD_Strobe(lcd);
}

void TextLCD_Puts(TextLCDType *lcd, char *string){ // anrop: liknande putchar, men en string "texttext" som andra argument.
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]

	for(int i = 0; string[i] != 0; i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e00a      	b.n	800100e <TextLCD_Puts+0x26>
		TextLCD_Putchar(lcd, string[i]);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffe1 	bl	8000fca <TextLCD_Putchar>
	for(int i = 0; string[i] != 0; i++)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1ee      	bne.n	8000ff8 <TextLCD_Puts+0x10>
//	TextLCD_Strobe(lcd);
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800102c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001034:	f023 0218 	bic.w	r2, r3, #24
 8001038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4313      	orrs	r3, r2
 8001040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800105e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4313      	orrs	r3, r2
 8001066:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001074:	68fb      	ldr	r3, [r7, #12]
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <checkLevel>:
	HAL_Delay(200); // 5 Hz

	TextLCD_Clear(&lcd); // Remove indicator.
}

void checkLevel(){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

	ret = MPU6050_ReadRegisters(&mpu, ACCEL_XOUT_H, 6);
 8001088:	2206      	movs	r2, #6
 800108a:	213b      	movs	r1, #59	; 0x3b
 800108c:	4838      	ldr	r0, [pc, #224]	; (8001170 <checkLevel+0xec>)
 800108e:	f000 fbcb 	bl	8001828 <MPU6050_ReadRegisters>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b37      	ldr	r3, [pc, #220]	; (8001174 <checkLevel+0xf0>)
 8001098:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 800109a:	4b36      	ldr	r3, [pc, #216]	; (8001174 <checkLevel+0xf0>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <checkLevel+0x26>
			LCD_Debug("Read error:", "ACCEL_XOUT_H");
 80010a2:	4935      	ldr	r1, [pc, #212]	; (8001178 <checkLevel+0xf4>)
 80010a4:	4835      	ldr	r0, [pc, #212]	; (800117c <checkLevel+0xf8>)
 80010a6:	f000 fb17 	bl	80016d8 <LCD_Debug>

	Accel_X_RAW = (int16_t)(mpu.data[0] << 8 | mpu.data[1]); // Combine both registers into one value.
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <checkLevel+0xec>)
 80010ac:	795b      	ldrb	r3, [r3, #5]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <checkLevel+0xec>)
 80010b4:	799b      	ldrb	r3, [r3, #6]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b30      	ldr	r3, [pc, #192]	; (8001180 <checkLevel+0xfc>)
 80010be:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(mpu.data[2] << 8 | mpu.data[3]); // Combine both registers into one value.
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <checkLevel+0xec>)
 80010c2:	79db      	ldrb	r3, [r3, #7]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <checkLevel+0xec>)
 80010ca:	7a1b      	ldrb	r3, [r3, #8]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <checkLevel+0x100>)
 80010d4:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(mpu.data[4] << 8 | mpu.data[5]); // Combine both registers into one value.
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <checkLevel+0xec>)
 80010d8:	7a5b      	ldrb	r3, [r3, #9]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <checkLevel+0xec>)
 80010e0:	7a9b      	ldrb	r3, [r3, #10]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <checkLevel+0x104>)
 80010ea:	801a      	strh	r2, [r3, #0]

	accelXValue = Accel_X_RAW/16384.0;  // get the float g
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <checkLevel+0xfc>)
 80010ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f9e6 	bl	80004c4 <__aeabi_i2d>
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <checkLevel+0x108>)
 80010fe:	f7ff fb75 	bl	80007ec <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fc57 	bl	80009bc <__aeabi_d2iz>
 800110e:	4603      	mov	r3, r0
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <checkLevel+0x10c>)
 8001114:	801a      	strh	r2, [r3, #0]
	accelYValue = Accel_Y_RAW/16384.0;
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <checkLevel+0x100>)
 8001118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f9d1 	bl	80004c4 <__aeabi_i2d>
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <checkLevel+0x108>)
 8001128:	f7ff fb60 	bl	80007ec <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fc42 	bl	80009bc <__aeabi_d2iz>
 8001138:	4603      	mov	r3, r0
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <checkLevel+0x110>)
 800113e:	801a      	strh	r2, [r3, #0]
	accelZValue = Accel_Z_RAW/16384.0;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <checkLevel+0x104>)
 8001142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9bc 	bl	80004c4 <__aeabi_i2d>
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <checkLevel+0x108>)
 8001152:	f7ff fb4b 	bl	80007ec <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fc2d 	bl	80009bc <__aeabi_d2iz>
 8001162:	4603      	mov	r3, r0
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <checkLevel+0x114>)
 8001168:	801a      	strh	r2, [r3, #0]
//		accelYValue |= 0xF000;
//	}
//	if(accelZValue > 0x7FF){ // 2's complement.
//		accelZValue |= 0xF000;
//	}
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200005a0 	.word	0x200005a0
 8001174:	200008f4 	.word	0x200008f4
 8001178:	080069e4 	.word	0x080069e4
 800117c:	080069f4 	.word	0x080069f4
 8001180:	200004ac 	.word	0x200004ac
 8001184:	2000050a 	.word	0x2000050a
 8001188:	2000050c 	.word	0x2000050c
 800118c:	40d00000 	.word	0x40d00000
 8001190:	200005fc 	.word	0x200005fc
 8001194:	200005f8 	.word	0x200005f8
 8001198:	200005fa 	.word	0x200005fa

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a2:	f000 ff8d 	bl	80020c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a6:	f000 f895 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011aa:	f000 fa47 	bl	800163c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011ae:	f000 f9cf 	bl	8001550 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80011b2:	f000 fa1b 	bl	80015ec <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80011b6:	f000 f937 	bl	8001428 <MX_I2C1_Init>
  MX_TIM1_Init();
 80011ba:	f000 f975 	bl	80014a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TextLCD_Init(&lcd, &hi2c1, 0x4E); // "startar" LCD
 80011be:	224e      	movs	r2, #78	; 0x4e
 80011c0:	4939      	ldr	r1, [pc, #228]	; (80012a8 <main+0x10c>)
 80011c2:	483a      	ldr	r0, [pc, #232]	; (80012ac <main+0x110>)
 80011c4:	f7ff fe6a 	bl	8000e9c <TextLCD_Init>
  MPU6050_Init(&mpu, &hi2c1); // Setup the mpu sensor.
 80011c8:	4937      	ldr	r1, [pc, #220]	; (80012a8 <main+0x10c>)
 80011ca:	4839      	ldr	r0, [pc, #228]	; (80012b0 <main+0x114>)
 80011cc:	f000 faa0 	bl	8001710 <MPU6050_Init>
  ssd1306_Init(); // OLED Init.
 80011d0:	f000 fb92 	bl	80018f8 <ssd1306_Init>

  */

  while (1)
  {
	  checkLevel();
 80011d4:	f7ff ff56 	bl	8001084 <checkLevel>
//	  if(ret == HAL_OK)
//		  LCD_Debug("HAL status is:", "HAL_OK");
	  HAL_Delay(250);
 80011d8:	20fa      	movs	r0, #250	; 0xfa
 80011da:	f000 fff7 	bl	80021cc <HAL_Delay>
//	  test();
	  char strX[10];
	  char strY[10];
	  char strZ[10];

	  sprintf(strX, "%d", Accel_X_RAW);
 80011de:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <main+0x118>)
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	461a      	mov	r2, r3
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4933      	ldr	r1, [pc, #204]	; (80012b8 <main+0x11c>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 ffe7 	bl	80061c0 <siprintf>
	  sprintf(strY, "%d", Accel_Y_RAW);
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <main+0x120>)
 80011f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f8:	461a      	mov	r2, r3
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	492e      	ldr	r1, [pc, #184]	; (80012b8 <main+0x11c>)
 8001200:	4618      	mov	r0, r3
 8001202:	f004 ffdd 	bl	80061c0 <siprintf>
	  sprintf(strZ, "%d", Accel_Z_RAW);
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <main+0x124>)
 8001208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120c:	461a      	mov	r2, r3
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4929      	ldr	r1, [pc, #164]	; (80012b8 <main+0x11c>)
 8001212:	4618      	mov	r0, r3
 8001214:	f004 ffd4 	bl	80061c0 <siprintf>

	  ssd1306_SetDisplayOn(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f000 fd51 	bl	8001cc0 <ssd1306_SetDisplayOn>
	  ssd1306_SetCursor(0, 0);
 800121e:	2100      	movs	r1, #0
 8001220:	2000      	movs	r0, #0
 8001222:	f000 fd21 	bl	8001c68 <ssd1306_SetCursor>
	  ssd1306_WriteString("Accel X:", Font_6x8, White);
 8001226:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <main+0x128>)
 8001228:	2301      	movs	r3, #1
 800122a:	ca06      	ldmia	r2, {r1, r2}
 800122c:	4826      	ldr	r0, [pc, #152]	; (80012c8 <main+0x12c>)
 800122e:	f000 fcf5 	bl	8001c1c <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 9);
 8001232:	2109      	movs	r1, #9
 8001234:	2000      	movs	r0, #0
 8001236:	f000 fd17 	bl	8001c68 <ssd1306_SetCursor>
	  ssd1306_WriteString(strX, Font_6x8, White);
 800123a:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <main+0x128>)
 800123c:	f107 001c 	add.w	r0, r7, #28
 8001240:	2301      	movs	r3, #1
 8001242:	ca06      	ldmia	r2, {r1, r2}
 8001244:	f000 fcea 	bl	8001c1c <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 18);
 8001248:	2112      	movs	r1, #18
 800124a:	2000      	movs	r0, #0
 800124c:	f000 fd0c 	bl	8001c68 <ssd1306_SetCursor>
	  ssd1306_WriteString("Accel Y:", Font_6x8, White);
 8001250:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <main+0x128>)
 8001252:	2301      	movs	r3, #1
 8001254:	ca06      	ldmia	r2, {r1, r2}
 8001256:	481d      	ldr	r0, [pc, #116]	; (80012cc <main+0x130>)
 8001258:	f000 fce0 	bl	8001c1c <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 27);
 800125c:	211b      	movs	r1, #27
 800125e:	2000      	movs	r0, #0
 8001260:	f000 fd02 	bl	8001c68 <ssd1306_SetCursor>
	  ssd1306_WriteString(strY, Font_6x8, White);
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <main+0x128>)
 8001266:	f107 0010 	add.w	r0, r7, #16
 800126a:	2301      	movs	r3, #1
 800126c:	ca06      	ldmia	r2, {r1, r2}
 800126e:	f000 fcd5 	bl	8001c1c <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 36);
 8001272:	2124      	movs	r1, #36	; 0x24
 8001274:	2000      	movs	r0, #0
 8001276:	f000 fcf7 	bl	8001c68 <ssd1306_SetCursor>
	  ssd1306_WriteString("Accel Z:", Font_6x8, White);
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <main+0x128>)
 800127c:	2301      	movs	r3, #1
 800127e:	ca06      	ldmia	r2, {r1, r2}
 8001280:	4813      	ldr	r0, [pc, #76]	; (80012d0 <main+0x134>)
 8001282:	f000 fccb 	bl	8001c1c <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 45);
 8001286:	212d      	movs	r1, #45	; 0x2d
 8001288:	2000      	movs	r0, #0
 800128a:	f000 fced 	bl	8001c68 <ssd1306_SetCursor>
	  ssd1306_WriteString(strZ, Font_6x8, White);
 800128e:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <main+0x128>)
 8001290:	1d38      	adds	r0, r7, #4
 8001292:	2301      	movs	r3, #1
 8001294:	ca06      	ldmia	r2, {r1, r2}
 8001296:	f000 fcc1 	bl	8001c1c <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 54);
 800129a:	2136      	movs	r1, #54	; 0x36
 800129c:	2000      	movs	r0, #0
 800129e:	f000 fce3 	bl	8001c68 <ssd1306_SetCursor>
	  ssd1306_UpdateScreen();
 80012a2:	f000 fbb7 	bl	8001a14 <ssd1306_UpdateScreen>
  {
 80012a6:	e795      	b.n	80011d4 <main+0x38>
 80012a8:	200004b8 	.word	0x200004b8
 80012ac:	200004b0 	.word	0x200004b0
 80012b0:	200005a0 	.word	0x200005a0
 80012b4:	200004ac 	.word	0x200004ac
 80012b8:	08006a00 	.word	0x08006a00
 80012bc:	2000050a 	.word	0x2000050a
 80012c0:	2000050c 	.word	0x2000050c
 80012c4:	20000004 	.word	0x20000004
 80012c8:	08006a04 	.word	0x08006a04
 80012cc:	08006a10 	.word	0x08006a10
 80012d0:	08006a1c 	.word	0x08006a1c

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0ae      	sub	sp, #184	; 0xb8
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012de:	2248      	movs	r2, #72	; 0x48
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 ff64 	bl	80061b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2250      	movs	r2, #80	; 0x50
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f004 ff54 	bl	80061b0 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001316:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f023 0303 	bic.w	r3, r3, #3
 8001322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800132c:	f002 f952 	bl	80035d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fe77 	bl	8001024 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001336:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <SystemClock_Config+0x150>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800133e:	4a39      	ldr	r2, [pc, #228]	; (8001424 <SystemClock_Config+0x150>)
 8001340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <SystemClock_Config+0x150>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001352:	2327      	movs	r3, #39	; 0x27
 8001354:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800135c:	2301      	movs	r3, #1
 800135e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001364:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001366:	2301      	movs	r3, #1
 8001368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136c:	2340      	movs	r3, #64	; 0x40
 800136e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001378:	2360      	movs	r3, #96	; 0x60
 800137a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001384:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fcb7 	bl	8003cfc <HAL_RCC_OscConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001394:	f000 f99a 	bl	80016cc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001398:	236f      	movs	r3, #111	; 0x6f
 800139a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800139c:	2302      	movs	r3, #2
 800139e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b8:	2101      	movs	r1, #1
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 f82a 	bl	8004414 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80013c6:	f000 f981 	bl	80016cc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80013ca:	f242 1305 	movw	r3, #8453	; 0x2105
 80013ce:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80013d0:	2318      	movs	r3, #24
 80013d2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80013d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80013da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013de:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80013e0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013e4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80013e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ea:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013f0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013fa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80013fc:	2300      	movs	r3, #0
 80013fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001400:	2300      	movs	r3, #0
 8001402:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fc54 	bl	8004cb4 <HAL_RCCEx_PeriphCLKConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x142>
  {
    Error_Handler();
 8001412:	f000 f95b 	bl	80016cc <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001416:	f003 fdc3 	bl	8004fa0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800141a:	bf00      	nop
 800141c:	37b8      	adds	r7, #184	; 0xb8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	58000400 	.word	0x58000400

08001428 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_I2C1_Init+0x74>)
 800142e:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <MX_I2C1_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <MX_I2C1_Init+0x74>)
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <MX_I2C1_Init+0x7c>)
 8001436:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_I2C1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <MX_I2C1_Init+0x74>)
 8001440:	2201      	movs	r2, #1
 8001442:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_I2C1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_I2C1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_I2C1_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_I2C1_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_I2C1_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <MX_I2C1_Init+0x74>)
 8001464:	f001 f942 	bl	80026ec <HAL_I2C_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800146e:	f000 f92d 	bl	80016cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <MX_I2C1_Init+0x74>)
 8001476:	f001 ff07 	bl	8003288 <HAL_I2CEx_ConfigAnalogFilter>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001480:	f000 f924 	bl	80016cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_I2C1_Init+0x74>)
 8001488:	f001 ff49 	bl	800331e <HAL_I2CEx_ConfigDigitalFilter>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001492:	f000 f91b 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200004b8 	.word	0x200004b8
 80014a0:	40005400 	.word	0x40005400
 80014a4:	00707cbb 	.word	0x00707cbb

080014a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <MX_TIM1_Init+0xa0>)
 80014c8:	4a20      	ldr	r2, [pc, #128]	; (800154c <MX_TIM1_Init+0xa4>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <MX_TIM1_Init+0xa0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <MX_TIM1_Init+0xa0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <MX_TIM1_Init+0xa0>)
 80014da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <MX_TIM1_Init+0xa0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MX_TIM1_Init+0xa0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <MX_TIM1_Init+0xa0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f2:	4815      	ldr	r0, [pc, #84]	; (8001548 <MX_TIM1_Init+0xa0>)
 80014f4:	f003 fe6b 	bl	80051ce <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80014fe:	f000 f8e5 	bl	80016cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001506:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4619      	mov	r1, r3
 800150e:	480e      	ldr	r0, [pc, #56]	; (8001548 <MX_TIM1_Init+0xa0>)
 8001510:	f003 feb4 	bl	800527c <HAL_TIM_ConfigClockSource>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800151a:	f000 f8d7 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <MX_TIM1_Init+0xa0>)
 8001530:	f004 f86a 	bl	8005608 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800153a:	f000 f8c7 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200005ac 	.word	0x200005ac
 800154c:	40012c00 	.word	0x40012c00

08001550 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 8001556:	4a24      	ldr	r2, [pc, #144]	; (80015e8 <MX_USART1_UART_Init+0x98>)
 8001558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 8001564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001568:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 8001578:	220c      	movs	r2, #12
 800157a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 8001596:	2200      	movs	r2, #0
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800159a:	4812      	ldr	r0, [pc, #72]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 800159c:	f004 f8b4 	bl	8005708 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80015a6:	f000 f891 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 80015ae:	f004 fca7 	bl	8005f00 <HAL_UARTEx_SetTxFifoThreshold>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80015b8:	f000 f888 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015bc:	2100      	movs	r1, #0
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 80015c0:	f004 fcdc 	bl	8005f7c <HAL_UARTEx_SetRxFifoThreshold>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80015ca:	f000 f87f 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_USART1_UART_Init+0x94>)
 80015d0:	f004 fc5d 	bl	8005e8e <HAL_UARTEx_DisableFifoMode>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80015da:	f000 f877 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000510 	.word	0x20000510
 80015e8:	40013800 	.word	0x40013800

080015ec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_USB_PCD_Init+0x48>)
 80015f2:	4a11      	ldr	r2, [pc, #68]	; (8001638 <MX_USB_PCD_Init+0x4c>)
 80015f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_USB_PCD_Init+0x48>)
 80015f8:	2208      	movs	r2, #8
 80015fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <MX_USB_PCD_Init+0x48>)
 80015fe:	2202      	movs	r2, #2
 8001600:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_USB_PCD_Init+0x48>)
 8001604:	2202      	movs	r2, #2
 8001606:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <MX_USB_PCD_Init+0x48>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_USB_PCD_Init+0x48>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <MX_USB_PCD_Init+0x48>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_USB_PCD_Init+0x48>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_USB_PCD_Init+0x48>)
 8001622:	f001 fec8 	bl	80033b6 <HAL_PCD_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800162c:	f000 f84e 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000600 	.word	0x20000600
 8001638:	40006800 	.word	0x40006800

0800163c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001650:	2004      	movs	r0, #4
 8001652:	f7ff fcfd 	bl	8001050 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2002      	movs	r0, #2
 8001658:	f7ff fcfa 	bl	8001050 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff fcf7 	bl	8001050 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001662:	2008      	movs	r0, #8
 8001664:	f7ff fcf4 	bl	8001050 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2123      	movs	r1, #35	; 0x23
 800166c:	4814      	ldr	r0, [pc, #80]	; (80016c0 <MX_GPIO_Init+0x84>)
 800166e:	f001 f825 	bl	80026bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001672:	2310      	movs	r3, #16
 8001674:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4810      	ldr	r0, [pc, #64]	; (80016c4 <MX_GPIO_Init+0x88>)
 8001684:	f000 feaa 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001688:	2323      	movs	r3, #35	; 0x23
 800168a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4808      	ldr	r0, [pc, #32]	; (80016c0 <MX_GPIO_Init+0x84>)
 800169e:	f000 fe9d 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80016a2:	2303      	movs	r3, #3
 80016a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_GPIO_Init+0x8c>)
 80016b4:	f000 fe92 	bl	80023dc <HAL_GPIO_Init>

}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	48000400 	.word	0x48000400
 80016c4:	48000800 	.word	0x48000800
 80016c8:	48000c00 	.word	0x48000c00

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <Error_Handler+0x8>
	...

080016d8 <LCD_Debug>:
	ACCEL_ZOUT_L

	MPU6050 slave address: Binary: 1101001 / 1101000. Hex: 69 / 68. Pin AD0 hi / lo.
*/

void LCD_Debug(const char* first_row, const char* second_row){ // Used for debug purposes.
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]

	TextLCD_Puts(&lcd, first_row);
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4809      	ldr	r0, [pc, #36]	; (800170c <LCD_Debug+0x34>)
 80016e6:	f7ff fc7f 	bl	8000fe8 <TextLCD_Puts>
	TextLCD_Position(&lcd, 0, 1);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2100      	movs	r1, #0
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <LCD_Debug+0x34>)
 80016f0:	f7ff fc4e 	bl	8000f90 <TextLCD_Position>
	TextLCD_Puts(&lcd, second_row);
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <LCD_Debug+0x34>)
 80016f8:	f7ff fc76 	bl	8000fe8 <TextLCD_Puts>
	TextLCD_Home(&lcd);
 80016fc:	4803      	ldr	r0, [pc, #12]	; (800170c <LCD_Debug+0x34>)
 80016fe:	f7ff fc3b 	bl	8000f78 <TextLCD_Home>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200004b0 	.word	0x200004b0

08001710 <MPU6050_Init>:

HAL_StatusTypeDef MPU6050_Init(MPU6050_Type *sensor, I2C_HandleTypeDef *hi2c) { // Setup. OK
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret; // Used for storing return value of the i2c functions.

	sensor->i2c = hi2c; // Set which i2c to use.
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	601a      	str	r2, [r3, #0]
	sensor->DevAddress = MPU6050_ADDR; // Device address
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	22d0      	movs	r2, #208	; 0xd0
 8001724:	711a      	strb	r2, [r3, #4]

	uint8_t data = 0; // Stores values to be written into the selected register.
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]

	ret = MPU6050_WriteRegister(sensor, PWR_MGMT_1, data, 1);
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	461a      	mov	r2, r3
 800172e:	2301      	movs	r3, #1
 8001730:	216b      	movs	r1, #107	; 0x6b
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f84a 	bl	80017cc <MPU6050_WriteRegister>
 8001738:	4603      	mov	r3, r0
 800173a:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK) // Check return value.
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <MPU6050_Init+0x3a>
		LCD_Debug("MPU INIT PWR", "MGMT FAILED"); // Display an error if not ok.
 8001742:	491a      	ldr	r1, [pc, #104]	; (80017ac <MPU6050_Init+0x9c>)
 8001744:	481a      	ldr	r0, [pc, #104]	; (80017b0 <MPU6050_Init+0xa0>)
 8001746:	f7ff ffc7 	bl	80016d8 <LCD_Debug>

	data = 0x07; // Divide 8kHz by (1 + 0x07), 8 / 8 = 1. MPU will now update with the same frequency as its output.
 800174a:	2307      	movs	r3, #7
 800174c:	73fb      	strb	r3, [r7, #15]
	ret = MPU6050_WriteRegister(sensor, SMPLRT_DIV, data, 1);
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	461a      	mov	r2, r3
 8001752:	2301      	movs	r3, #1
 8001754:	2119      	movs	r1, #25
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f838 	bl	80017cc <MPU6050_WriteRegister>
 800175c:	4603      	mov	r3, r0
 800175e:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK) // Check return value.
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <MPU6050_Init+0x5e>
		LCD_Debug("MPU INIT SMPLRT", "_DIV FAILED");
 8001766:	4913      	ldr	r1, [pc, #76]	; (80017b4 <MPU6050_Init+0xa4>)
 8001768:	4813      	ldr	r0, [pc, #76]	; (80017b8 <MPU6050_Init+0xa8>)
 800176a:	f7ff ffb5 	bl	80016d8 <LCD_Debug>

	data = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
	ret = MPU6050_WriteRegister(sensor, ACCEL_CONFIG, data, 1);
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	461a      	mov	r2, r3
 8001776:	2301      	movs	r3, #1
 8001778:	211c      	movs	r1, #28
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f826 	bl	80017cc <MPU6050_WriteRegister>
 8001780:	4603      	mov	r3, r0
 8001782:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK) // Check return value.
 8001784:	7bbb      	ldrb	r3, [r7, #14]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <MPU6050_Init+0x82>
		LCD_Debug("MPU INIT ACCEL", "CONFIG FAILED");
 800178a:	490c      	ldr	r1, [pc, #48]	; (80017bc <MPU6050_Init+0xac>)
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MPU6050_Init+0xb0>)
 800178e:	f7ff ffa3 	bl	80016d8 <LCD_Debug>

	if(ret == HAL_OK)
 8001792:	7bbb      	ldrb	r3, [r7, #14]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <MPU6050_Init+0x90>
		LCD_Debug("MPU INIT:", "SUCCESSFUL");
 8001798:	490a      	ldr	r1, [pc, #40]	; (80017c4 <MPU6050_Init+0xb4>)
 800179a:	480b      	ldr	r0, [pc, #44]	; (80017c8 <MPU6050_Init+0xb8>)
 800179c:	f7ff ff9c 	bl	80016d8 <LCD_Debug>

	return ret;
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	08006a28 	.word	0x08006a28
 80017b0:	08006a34 	.word	0x08006a34
 80017b4:	08006a44 	.word	0x08006a44
 80017b8:	08006a50 	.word	0x08006a50
 80017bc:	08006a60 	.word	0x08006a60
 80017c0:	08006a70 	.word	0x08006a70
 80017c4:	08006a80 	.word	0x08006a80
 80017c8:	08006a8c 	.word	0x08006a8c

080017cc <MPU6050_WriteRegister>:

HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050_Type *sensor, uint8_t reg, uint8_t *data, uint8_t bytes){ // Write to the registers.
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b08b      	sub	sp, #44	; 0x2c
 80017d0:	af04      	add	r7, sp, #16
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	461a      	mov	r2, r3
 80017d8:	460b      	mov	r3, r1
 80017da:	72fb      	strb	r3, [r7, #11]
 80017dc:	4613      	mov	r3, r2
 80017de:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Write(sensor->i2c, sensor->DevAddress, reg, 1, &data, bytes, HAL_MAX_DELAY); // Which register.
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	791b      	ldrb	r3, [r3, #4]
 80017e8:	b299      	uxth	r1, r3
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	7abb      	ldrb	r3, [r7, #10]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	f04f 34ff 	mov.w	r4, #4294967295
 80017f6:	9402      	str	r4, [sp, #8]
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	f001 f8f8 	bl	80029f4 <HAL_I2C_Mem_Write>
 8001804:	4603      	mov	r3, r0
 8001806:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK)
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <MPU6050_WriteRegister+0x4a>
		LCD_Debug("MPU WRITE", "REGISTER FAILED");
 800180e:	4904      	ldr	r1, [pc, #16]	; (8001820 <MPU6050_WriteRegister+0x54>)
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <MPU6050_WriteRegister+0x58>)
 8001812:	f7ff ff61 	bl	80016d8 <LCD_Debug>

	return ret;
 8001816:	7dfb      	ldrb	r3, [r7, #23]
}
 8001818:	4618      	mov	r0, r3
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	08006a98 	.word	0x08006a98
 8001824:	08006aa8 	.word	0x08006aa8

08001828 <MPU6050_ReadRegisters>:
		LCD_Debug("MPU MEM READ", "REG FAILED");

	return ret;
}

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050_Type *sensor, uint8_t address, uint8_t size){	// Read a specific register, size number of bytes.
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af04      	add	r7, sp, #16
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
 8001834:	4613      	mov	r3, r2
 8001836:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(sensor->i2c, sensor->DevAddress, address, 1, &sensor->data, size, HAL_MAX_DELAY);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	791b      	ldrb	r3, [r3, #4]
 8001840:	b299      	uxth	r1, r3
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	b29c      	uxth	r4, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3305      	adds	r3, #5
 800184a:	78ba      	ldrb	r2, [r7, #2]
 800184c:	b292      	uxth	r2, r2
 800184e:	f04f 35ff 	mov.w	r5, #4294967295
 8001852:	9502      	str	r5, [sp, #8]
 8001854:	9201      	str	r2, [sp, #4]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2301      	movs	r3, #1
 800185a:	4622      	mov	r2, r4
 800185c:	f001 f9de 	bl	8002c1c <HAL_I2C_Mem_Read>
 8001860:	4603      	mov	r3, r0
 8001862:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <MPU6050_ReadRegisters+0x4a>
		LCD_Debug("MPU MEM READ", "REGS FAILED");
 800186a:	4904      	ldr	r1, [pc, #16]	; (800187c <MPU6050_ReadRegisters+0x54>)
 800186c:	4804      	ldr	r0, [pc, #16]	; (8001880 <MPU6050_ReadRegisters+0x58>)
 800186e:	f7ff ff33 	bl	80016d8 <LCD_Debug>

	return ret;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
} // Read the selected register, and any following registers.
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bdb0      	pop	{r4, r5, r7, pc}
 800187c:	08006ad0 	.word	0x08006ad0
 8001880:	08006ac0 	.word	0x08006ac0

08001884 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af04      	add	r7, sp, #16
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	2301      	movs	r3, #1
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2301      	movs	r3, #1
 80018ae:	2200      	movs	r2, #0
 80018b0:	2178      	movs	r1, #120	; 0x78
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <ssd1306_WriteCommand+0x2c>)
 80018b4:	f001 f89e 	bl	80029f4 <HAL_I2C_Mem_Write>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200004b8 	.word	0x200004b8

080018c4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af04      	add	r7, sp, #16
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	f04f 32ff 	mov.w	r2, #4294967295
 80018d6:	9202      	str	r2, [sp, #8]
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	2240      	movs	r2, #64	; 0x40
 80018e2:	2178      	movs	r1, #120	; 0x78
 80018e4:	4803      	ldr	r0, [pc, #12]	; (80018f4 <ssd1306_WriteData+0x30>)
 80018e6:	f001 f885 	bl	80029f4 <HAL_I2C_Mem_Write>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200004b8 	.word	0x200004b8

080018f8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80018fc:	f7ff ffc2 	bl	8001884 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001900:	2064      	movs	r0, #100	; 0x64
 8001902:	f000 fc63 	bl	80021cc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f9da 	bl	8001cc0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800190c:	2020      	movs	r0, #32
 800190e:	f7ff ffc1 	bl	8001894 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff ffbe 	bl	8001894 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001918:	20b0      	movs	r0, #176	; 0xb0
 800191a:	f7ff ffbb 	bl	8001894 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800191e:	20c8      	movs	r0, #200	; 0xc8
 8001920:	f7ff ffb8 	bl	8001894 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff ffb5 	bl	8001894 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800192a:	2010      	movs	r0, #16
 800192c:	f7ff ffb2 	bl	8001894 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001930:	2040      	movs	r0, #64	; 0x40
 8001932:	f7ff ffaf 	bl	8001894 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001936:	20ff      	movs	r0, #255	; 0xff
 8001938:	f000 f9ae 	bl	8001c98 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800193c:	20a1      	movs	r0, #161	; 0xa1
 800193e:	f7ff ffa9 	bl	8001894 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001942:	20a6      	movs	r0, #166	; 0xa6
 8001944:	f7ff ffa6 	bl	8001894 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001948:	20a8      	movs	r0, #168	; 0xa8
 800194a:	f7ff ffa3 	bl	8001894 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800194e:	203f      	movs	r0, #63	; 0x3f
 8001950:	f7ff ffa0 	bl	8001894 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001954:	20a4      	movs	r0, #164	; 0xa4
 8001956:	f7ff ff9d 	bl	8001894 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800195a:	20d3      	movs	r0, #211	; 0xd3
 800195c:	f7ff ff9a 	bl	8001894 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff ff97 	bl	8001894 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001966:	20d5      	movs	r0, #213	; 0xd5
 8001968:	f7ff ff94 	bl	8001894 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800196c:	20f0      	movs	r0, #240	; 0xf0
 800196e:	f7ff ff91 	bl	8001894 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001972:	20d9      	movs	r0, #217	; 0xd9
 8001974:	f7ff ff8e 	bl	8001894 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001978:	2022      	movs	r0, #34	; 0x22
 800197a:	f7ff ff8b 	bl	8001894 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800197e:	20da      	movs	r0, #218	; 0xda
 8001980:	f7ff ff88 	bl	8001894 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001984:	2012      	movs	r0, #18
 8001986:	f7ff ff85 	bl	8001894 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800198a:	20db      	movs	r0, #219	; 0xdb
 800198c:	f7ff ff82 	bl	8001894 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001990:	2020      	movs	r0, #32
 8001992:	f7ff ff7f 	bl	8001894 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001996:	208d      	movs	r0, #141	; 0x8d
 8001998:	f7ff ff7c 	bl	8001894 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800199c:	2014      	movs	r0, #20
 800199e:	f7ff ff79 	bl	8001894 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80019a2:	2001      	movs	r0, #1
 80019a4:	f000 f98c 	bl	8001cc0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 f80f 	bl	80019cc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80019ae:	f000 f831 	bl	8001a14 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <ssd1306_Init+0xd0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <ssd1306_Init+0xd0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80019be:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <ssd1306_Init+0xd0>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	711a      	strb	r2, [r3, #4]
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000498 	.word	0x20000498

080019cc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e00d      	b.n	80019f8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <ssd1306_Fill+0x1a>
 80019e2:	2100      	movs	r1, #0
 80019e4:	e000      	b.n	80019e8 <ssd1306_Fill+0x1c>
 80019e6:	21ff      	movs	r1, #255	; 0xff
 80019e8:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <ssd1306_Fill+0x44>)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4413      	add	r3, r2
 80019ee:	460a      	mov	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fe:	d3ed      	bcc.n	80019dc <ssd1306_Fill+0x10>
    }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000098 	.word	0x20000098

08001a14 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	e016      	b.n	8001a4e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	3b50      	subs	r3, #80	; 0x50
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff34 	bl	8001894 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff ff31 	bl	8001894 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001a32:	2010      	movs	r0, #16
 8001a34:	f7ff ff2e 	bl	8001894 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	01db      	lsls	r3, r3, #7
 8001a3c:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <ssd1306_UpdateScreen+0x4c>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff3e 	bl	80018c4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	d9e5      	bls.n	8001a20 <ssd1306_UpdateScreen+0xc>
    }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000098 	.word	0x20000098

08001a64 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	71bb      	strb	r3, [r7, #6]
 8001a72:	4613      	mov	r3, r2
 8001a74:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db3d      	blt.n	8001afa <ssd1306_DrawPixel+0x96>
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	2b3f      	cmp	r3, #63	; 0x3f
 8001a82:	d83a      	bhi.n	8001afa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001a84:	797b      	ldrb	r3, [r7, #5]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d11a      	bne.n	8001ac0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a8a:	79fa      	ldrb	r2, [r7, #7]
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	08db      	lsrs	r3, r3, #3
 8001a90:	b2d8      	uxtb	r0, r3
 8001a92:	4603      	mov	r3, r0
 8001a94:	01db      	lsls	r3, r3, #7
 8001a96:	4413      	add	r3, r2
 8001a98:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <ssd1306_DrawPixel+0xa4>)
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	b25a      	sxtb	r2, r3
 8001a9e:	79bb      	ldrb	r3, [r7, #6]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b259      	sxtb	r1, r3
 8001ab0:	79fa      	ldrb	r2, [r7, #7]
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	01db      	lsls	r3, r3, #7
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b2c9      	uxtb	r1, r1
 8001aba:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <ssd1306_DrawPixel+0xa4>)
 8001abc:	54d1      	strb	r1, [r2, r3]
 8001abe:	e01d      	b.n	8001afc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ac0:	79fa      	ldrb	r2, [r7, #7]
 8001ac2:	79bb      	ldrb	r3, [r7, #6]
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	b2d8      	uxtb	r0, r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	01db      	lsls	r3, r3, #7
 8001acc:	4413      	add	r3, r2
 8001ace:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <ssd1306_DrawPixel+0xa4>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	b25a      	sxtb	r2, r3
 8001ad4:	79bb      	ldrb	r3, [r7, #6]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	b259      	sxtb	r1, r3
 8001aea:	79fa      	ldrb	r2, [r7, #7]
 8001aec:	4603      	mov	r3, r0
 8001aee:	01db      	lsls	r3, r3, #7
 8001af0:	4413      	add	r3, r2
 8001af2:	b2c9      	uxtb	r1, r1
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <ssd1306_DrawPixel+0xa4>)
 8001af6:	54d1      	strb	r1, [r2, r3]
 8001af8:	e000      	b.n	8001afc <ssd1306_DrawPixel+0x98>
        return;
 8001afa:	bf00      	nop
    }
}
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000098 	.word	0x20000098

08001b0c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4604      	mov	r4, r0
 8001b14:	1d38      	adds	r0, r7, #4
 8001b16:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4623      	mov	r3, r4
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	4613      	mov	r3, r2
 8001b22:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	2b1f      	cmp	r3, #31
 8001b28:	d902      	bls.n	8001b30 <ssd1306_WriteChar+0x24>
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	2b7e      	cmp	r3, #126	; 0x7e
 8001b2e:	d901      	bls.n	8001b34 <ssd1306_WriteChar+0x28>
        return 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e06d      	b.n	8001c10 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001b34:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <ssd1306_WriteChar+0x10c>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	793b      	ldrb	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2b80      	cmp	r3, #128	; 0x80
 8001b40:	dc06      	bgt.n	8001b50 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001b42:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <ssd1306_WriteChar+0x10c>)
 8001b44:	885b      	ldrh	r3, [r3, #2]
 8001b46:	461a      	mov	r2, r3
 8001b48:	797b      	ldrb	r3, [r7, #5]
 8001b4a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001b4c:	2b40      	cmp	r3, #64	; 0x40
 8001b4e:	dd01      	ble.n	8001b54 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	e05d      	b.n	8001c10 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	e04c      	b.n	8001bf4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	3b20      	subs	r3, #32
 8001b60:	7979      	ldrb	r1, [r7, #5]
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4619      	mov	r1, r3
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	440b      	add	r3, r1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	e034      	b.n	8001be4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d012      	beq.n	8001bb0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b8a:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <ssd1306_WriteChar+0x10c>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	b2d8      	uxtb	r0, r3
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <ssd1306_WriteChar+0x10c>)
 8001b9a:	885b      	ldrh	r3, [r3, #2]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	7bba      	ldrb	r2, [r7, #14]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7ff ff5b 	bl	8001a64 <ssd1306_DrawPixel>
 8001bae:	e016      	b.n	8001bde <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <ssd1306_WriteChar+0x10c>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	b2d8      	uxtb	r0, r3
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <ssd1306_WriteChar+0x10c>)
 8001bc0:	885b      	ldrh	r3, [r3, #2]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4413      	add	r3, r2
 8001bca:	b2d9      	uxtb	r1, r3
 8001bcc:	7bbb      	ldrb	r3, [r7, #14]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf0c      	ite	eq
 8001bd2:	2301      	moveq	r3, #1
 8001bd4:	2300      	movne	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f7ff ff43 	bl	8001a64 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	793b      	ldrb	r3, [r7, #4]
 8001be6:	461a      	mov	r2, r3
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d3c5      	bcc.n	8001b7a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	797b      	ldrb	r3, [r7, #5]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d3ad      	bcc.n	8001b5a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <ssd1306_WriteChar+0x10c>)
 8001c00:	881a      	ldrh	r2, [r3, #0]
 8001c02:	793b      	ldrb	r3, [r7, #4]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <ssd1306_WriteChar+0x10c>)
 8001c0c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3724      	adds	r7, #36	; 0x24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd90      	pop	{r4, r7, pc}
 8001c18:	20000498 	.word	0x20000498

08001c1c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	1d38      	adds	r0, r7, #4
 8001c26:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c2a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001c2c:	e012      	b.n	8001c54 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	7818      	ldrb	r0, [r3, #0]
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	1d3a      	adds	r2, r7, #4
 8001c36:	ca06      	ldmia	r2, {r1, r2}
 8001c38:	f7ff ff68 	bl	8001b0c <ssd1306_WriteChar>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d002      	beq.n	8001c4e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	e008      	b.n	8001c60 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3301      	adds	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e8      	bne.n	8001c2e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460a      	mov	r2, r1
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	4613      	mov	r3, r2
 8001c76:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <ssd1306_SetCursor+0x2c>)
 8001c7e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <ssd1306_SetCursor+0x2c>)
 8001c86:	805a      	strh	r2, [r3, #2]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	20000498 	.word	0x20000498

08001c98 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001ca2:	2381      	movs	r3, #129	; 0x81
 8001ca4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fdf3 	bl	8001894 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fdef 	bl	8001894 <ssd1306_WriteCommand>
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001cd0:	23af      	movs	r3, #175	; 0xaf
 8001cd2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <ssd1306_SetDisplayOn+0x38>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	715a      	strb	r2, [r3, #5]
 8001cda:	e004      	b.n	8001ce6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001cdc:	23ae      	movs	r3, #174	; 0xae
 8001cde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <ssd1306_SetDisplayOn+0x38>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fdd3 	bl	8001894 <ssd1306_WriteCommand>
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000498 	.word	0x20000498

08001cfc <LL_AHB2_GRP1_EnableClock>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d20:	68fb      	ldr	r3, [r7, #12]
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d84:	68fb      	ldr	r3, [r7, #12]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <HAL_I2C_MspInit+0x5c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d117      	bne.n	8001df2 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7ff ff9a 	bl	8001cfc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dce:	2312      	movs	r3, #18
 8001dd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4619      	mov	r1, r3
 8001de4:	4806      	ldr	r0, [pc, #24]	; (8001e00 <HAL_I2C_MspInit+0x60>)
 8001de6:	f000 faf9 	bl	80023dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001dee:	f7ff ff9e 	bl	8001d2e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40005400 	.word	0x40005400
 8001e00:	48000400 	.word	0x48000400

08001e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <HAL_TIM_Base_MspInit+0x24>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d103      	bne.n	8001e1e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e16:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e1a:	f7ff ffa1 	bl	8001d60 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40012c00 	.word	0x40012c00

08001e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HAL_UART_MspInit+0x58>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d116      	bne.n	8001e7c <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e52:	f7ff ff85 	bl	8001d60 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2002      	movs	r0, #2
 8001e58:	f7ff ff50 	bl	8001cfc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e5c:	23c0      	movs	r3, #192	; 0xc0
 8001e5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	4619      	mov	r1, r3
 8001e76:	4804      	ldr	r0, [pc, #16]	; (8001e88 <HAL_UART_MspInit+0x5c>)
 8001e78:	f000 fab0 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40013800 	.word	0x40013800
 8001e88:	48000400 	.word	0x48000400

08001e8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_PCD_MspInit+0x5c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d118      	bne.n	8001ee0 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff ff24 	bl	8001cfc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001eb4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001eb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed4:	f000 fa82 	bl	80023dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001ed8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001edc:	f7ff ff27 	bl	8001d2e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40006800 	.word	0x40006800

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 f91c 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <_sbrk+0x5c>)
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <_sbrk+0x60>)
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <_sbrk+0x64>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <_sbrk+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d207      	bcs.n	8001f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f70:	f004 f8cc 	bl	800610c <__errno>
 8001f74:	4603      	mov	r3, r0
 8001f76:	220c      	movs	r2, #12
 8001f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	e009      	b.n	8001f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <_sbrk+0x64>)
 8001f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20030000 	.word	0x20030000
 8001fa0:	00000400 	.word	0x00000400
 8001fa4:	200004a0 	.word	0x200004a0
 8001fa8:	20000910 	.word	0x20000910

08001fac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <SystemInit+0x98>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	4a23      	ldr	r2, [pc, #140]	; (8002044 <SystemInit+0x98>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001fd8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <SystemInit+0x9c>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff6:	f023 0305 	bic.w	r3, r3, #5
 8001ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002016:	4a0d      	ldr	r2, [pc, #52]	; (800204c <SystemInit+0xa0>)
 8002018:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	4a0b      	ldr	r2, [pc, #44]	; (800204c <SystemInit+0xa0>)
 8002020:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00
 8002048:	faf6fefb 	.word	0xfaf6fefb
 800204c:	22041000 	.word	0x22041000

08002050 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002050:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002052:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002054:	3304      	adds	r3, #4

08002056 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002056:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002058:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800205a:	d3f9      	bcc.n	8002050 <CopyDataInit>
  bx lr
 800205c:	4770      	bx	lr

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800205e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002060:	3004      	adds	r0, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002062:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>
  bx lr
 8002066:	4770      	bx	lr

08002068 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800206a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800206c:	f7ff ff9e 	bl	8001fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002070:	480b      	ldr	r0, [pc, #44]	; (80020a0 <LoopForever+0x8>)
 8002072:	490c      	ldr	r1, [pc, #48]	; (80020a4 <LoopForever+0xc>)
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <LoopForever+0x10>)
 8002076:	2300      	movs	r3, #0
 8002078:	f7ff ffed 	bl	8002056 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800207c:	480b      	ldr	r0, [pc, #44]	; (80020ac <LoopForever+0x14>)
 800207e:	490c      	ldr	r1, [pc, #48]	; (80020b0 <LoopForever+0x18>)
 8002080:	2300      	movs	r3, #0
 8002082:	f7ff ffee 	bl	8002062 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002086:	480b      	ldr	r0, [pc, #44]	; (80020b4 <LoopForever+0x1c>)
 8002088:	490b      	ldr	r1, [pc, #44]	; (80020b8 <LoopForever+0x20>)
 800208a:	2300      	movs	r3, #0
 800208c:	f7ff ffe9 	bl	8002062 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002090:	f004 f842 	bl	8006118 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002094:	f7ff f882 	bl	800119c <main>

08002098 <LoopForever>:

LoopForever:
  b LoopForever
 8002098:	e7fe      	b.n	8002098 <LoopForever>
 800209a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800209c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80020a0:	20000004 	.word	0x20000004
 80020a4:	2000007c 	.word	0x2000007c
 80020a8:	08007204 	.word	0x08007204
  INIT_BSS _sbss, _ebss
 80020ac:	2000007c 	.word	0x2000007c
 80020b0:	20000910 	.word	0x20000910
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80020b4:	20030000 	.word	0x20030000
 80020b8:	20030000 	.word	0x20030000

080020bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020bc:	e7fe      	b.n	80020bc <ADC1_IRQHandler>
	...

080020c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_Init+0x3c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <HAL_Init+0x3c>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d6:	2003      	movs	r0, #3
 80020d8:	f000 f94e 	bl	8002378 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020dc:	2000      	movs	r0, #0
 80020de:	f000 f80f 	bl	8002100 <HAL_InitTick>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	e001      	b.n	80020f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020ee:	f7ff fe50 	bl	8001d92 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020f2:	79fb      	ldrb	r3, [r7, #7]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	58004000 	.word	0x58004000

08002100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_InitTick+0x6c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d024      	beq.n	800215e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002114:	f002 fb2a 	bl	800476c <HAL_RCC_GetHCLKFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_InitTick+0x6c>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002124:	fbb3 f3f1 	udiv	r3, r3, r1
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f948 	bl	80023c2 <HAL_SYSTICK_Config>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10f      	bne.n	8002158 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b0f      	cmp	r3, #15
 800213c:	d809      	bhi.n	8002152 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213e:	2200      	movs	r2, #0
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	f04f 30ff 	mov.w	r0, #4294967295
 8002146:	f000 f922 	bl	800238e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800214a:	4a09      	ldr	r2, [pc, #36]	; (8002170 <HAL_InitTick+0x70>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e007      	b.n	8002162 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	e004      	b.n	8002162 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e001      	b.n	8002162 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000014 	.word	0x20000014
 8002170:	20000010 	.word	0x20000010

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000014 	.word	0x20000014
 8002198:	200008fc 	.word	0x200008fc

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200008fc 	.word	0x200008fc

080021b4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_GetTickPrio+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000010 	.word	0x20000010

080021cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff ffe2 	bl	800219c <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d005      	beq.n	80021f2 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_Delay+0x44>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80021f2:	bf00      	nop
 80021f4:	f7ff ffd2 	bl	800219c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	429a      	cmp	r2, r3
 8002202:	d8f7      	bhi.n	80021f4 <HAL_Delay+0x28>
    {
    }
  }
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000014 	.word	0x20000014

08002214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800223c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	; (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002344:	d301      	bcc.n	800234a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <SysTick_Config+0x40>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002352:	210f      	movs	r1, #15
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f7ff ff8e 	bl	8002278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <SysTick_Config+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002362:	4b04      	ldr	r3, [pc, #16]	; (8002374 <SysTick_Config+0x40>)
 8002364:	2207      	movs	r2, #7
 8002366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	e000e010 	.word	0xe000e010

08002378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff47 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800239c:	f7ff ff5e 	bl	800225c <__NVIC_GetPriorityGrouping>
 80023a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ff90 	bl	80022cc <NVIC_EncodePriority>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff5f 	bl	8002278 <__NVIC_SetPriority>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffb2 	bl	8002334 <SysTick_Config>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ea:	e14c      	b.n	8002686 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa01 f303 	lsl.w	r3, r1, r3
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 813e 	beq.w	8002680 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d00b      	beq.n	8002424 <HAL_GPIO_Init+0x48>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d007      	beq.n	8002424 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002418:	2b11      	cmp	r3, #17
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b12      	cmp	r3, #18
 8002422:	d130      	bne.n	8002486 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800245a:	2201      	movs	r2, #1
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 0201 	and.w	r2, r3, #1
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0xea>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b12      	cmp	r3, #18
 80024c4:	d123      	bne.n	800250e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	6939      	ldr	r1, [r7, #16]
 800250a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2203      	movs	r2, #3
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0203 	and.w	r2, r3, #3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8098 	beq.w	8002680 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002550:	4a54      	ldr	r2, [pc, #336]	; (80026a4 <HAL_GPIO_Init+0x2c8>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	3302      	adds	r3, #2
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220f      	movs	r2, #15
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800257a:	d019      	beq.n	80025b0 <HAL_GPIO_Init+0x1d4>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a4a      	ldr	r2, [pc, #296]	; (80026a8 <HAL_GPIO_Init+0x2cc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d013      	beq.n	80025ac <HAL_GPIO_Init+0x1d0>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a49      	ldr	r2, [pc, #292]	; (80026ac <HAL_GPIO_Init+0x2d0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00d      	beq.n	80025a8 <HAL_GPIO_Init+0x1cc>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a48      	ldr	r2, [pc, #288]	; (80026b0 <HAL_GPIO_Init+0x2d4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d007      	beq.n	80025a4 <HAL_GPIO_Init+0x1c8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a47      	ldr	r2, [pc, #284]	; (80026b4 <HAL_GPIO_Init+0x2d8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d101      	bne.n	80025a0 <HAL_GPIO_Init+0x1c4>
 800259c:	2304      	movs	r3, #4
 800259e:	e008      	b.n	80025b2 <HAL_GPIO_Init+0x1d6>
 80025a0:	2307      	movs	r3, #7
 80025a2:	e006      	b.n	80025b2 <HAL_GPIO_Init+0x1d6>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e004      	b.n	80025b2 <HAL_GPIO_Init+0x1d6>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_Init+0x1d6>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_GPIO_Init+0x1d6>
 80025b0:	2300      	movs	r3, #0
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	f002 0203 	and.w	r2, r2, #3
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	4093      	lsls	r3, r2
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025c2:	4938      	ldr	r1, [pc, #224]	; (80026a4 <HAL_GPIO_Init+0x2c8>)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025d0:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_GPIO_Init+0x2dc>)
 80025d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025f6:	4a30      	ldr	r2, [pc, #192]	; (80026b8 <HAL_GPIO_Init+0x2dc>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80025fe:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <HAL_GPIO_Init+0x2dc>)
 8002600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002624:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <HAL_GPIO_Init+0x2dc>)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800262c:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <HAL_GPIO_Init+0x2dc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_GPIO_Init+0x2dc>)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <HAL_GPIO_Init+0x2dc>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800267a:	4a0f      	ldr	r2, [pc, #60]	; (80026b8 <HAL_GPIO_Init+0x2dc>)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3301      	adds	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	f47f aeab 	bne.w	80023ec <HAL_GPIO_Init+0x10>
  }
}
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40010000 	.word	0x40010000
 80026a8:	48000400 	.word	0x48000400
 80026ac:	48000800 	.word	0x48000800
 80026b0:	48000c00 	.word	0x48000c00
 80026b4:	48001000 	.word	0x48001000
 80026b8:	58000800 	.word	0x58000800

080026bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
 80026c8:	4613      	mov	r3, r2
 80026ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026cc:	787b      	ldrb	r3, [r7, #1]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e081      	b.n	8002802 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff fb44 	bl	8001da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	; 0x24
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800273c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800274c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	e006      	b.n	8002774 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002772:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d104      	bne.n	8002786 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002784:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002798:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	ea42 0103 	orr.w	r1, r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	021a      	lsls	r2, r3, #8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69d9      	ldr	r1, [r3, #28]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1a      	ldr	r2, [r3, #32]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	461a      	mov	r2, r3
 8002818:	460b      	mov	r3, r1
 800281a:	817b      	strh	r3, [r7, #10]
 800281c:	4613      	mov	r3, r2
 800281e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b20      	cmp	r3, #32
 800282a:	f040 80da 	bne.w	80029e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_I2C_Master_Transmit+0x30>
 8002838:	2302      	movs	r3, #2
 800283a:	e0d3      	b.n	80029e4 <HAL_I2C_Master_Transmit+0x1d8>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002844:	f7ff fcaa 	bl	800219c <HAL_GetTick>
 8002848:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2319      	movs	r3, #25
 8002850:	2201      	movs	r2, #1
 8002852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fbc6 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e0be      	b.n	80029e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2221      	movs	r2, #33	; 0x21
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2210      	movs	r2, #16
 8002872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	893a      	ldrh	r2, [r7, #8]
 8002886:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	2bff      	cmp	r3, #255	; 0xff
 8002896:	d90e      	bls.n	80028b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	22ff      	movs	r2, #255	; 0xff
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	8979      	ldrh	r1, [r7, #10]
 80028a6:	4b51      	ldr	r3, [pc, #324]	; (80029ec <HAL_I2C_Master_Transmit+0x1e0>)
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fcbc 	bl	800322c <I2C_TransferConfig>
 80028b4:	e06c      	b.n	8002990 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	4b48      	ldr	r3, [pc, #288]	; (80029ec <HAL_I2C_Master_Transmit+0x1e0>)
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fcab 	bl	800322c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80028d6:	e05b      	b.n	8002990 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	6a39      	ldr	r1, [r7, #32]
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fbc3 	bl	8003068 <I2C_WaitOnTXISFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e07b      	b.n	80029e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d034      	beq.n	8002990 <HAL_I2C_Master_Transmit+0x184>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	2b00      	cmp	r3, #0
 800292c:	d130      	bne.n	8002990 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	2200      	movs	r2, #0
 8002936:	2180      	movs	r1, #128	; 0x80
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fb55 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e04d      	b.n	80029e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	2bff      	cmp	r3, #255	; 0xff
 8002950:	d90e      	bls.n	8002970 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	22ff      	movs	r2, #255	; 0xff
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	b2da      	uxtb	r2, r3
 800295e:	8979      	ldrh	r1, [r7, #10]
 8002960:	2300      	movs	r3, #0
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fc5f 	bl	800322c <I2C_TransferConfig>
 800296e:	e00f      	b.n	8002990 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	b2da      	uxtb	r2, r3
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	2300      	movs	r3, #0
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fc4e 	bl	800322c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d19e      	bne.n	80028d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	6a39      	ldr	r1, [r7, #32]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fba2 	bl	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e01a      	b.n	80029e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2220      	movs	r2, #32
 80029b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80029c2:	400b      	ands	r3, r1
 80029c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	80002000 	.word	0x80002000
 80029f0:	fe00e800 	.word	0xfe00e800

080029f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	4608      	mov	r0, r1
 80029fe:	4611      	mov	r1, r2
 8002a00:	461a      	mov	r2, r3
 8002a02:	4603      	mov	r3, r0
 8002a04:	817b      	strh	r3, [r7, #10]
 8002a06:	460b      	mov	r3, r1
 8002a08:	813b      	strh	r3, [r7, #8]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	f040 80f9 	bne.w	8002c0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_I2C_Mem_Write+0x34>
 8002a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0ed      	b.n	8002c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_Mem_Write+0x4e>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e0e6      	b.n	8002c10 <HAL_I2C_Mem_Write+0x21c>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a4a:	f7ff fba7 	bl	800219c <HAL_GetTick>
 8002a4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2319      	movs	r3, #25
 8002a56:	2201      	movs	r2, #1
 8002a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fac3 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0d1      	b.n	8002c10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2221      	movs	r2, #33	; 0x21
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2240      	movs	r2, #64	; 0x40
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a3a      	ldr	r2, [r7, #32]
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a94:	88f8      	ldrh	r0, [r7, #6]
 8002a96:	893a      	ldrh	r2, [r7, #8]
 8002a98:	8979      	ldrh	r1, [r7, #10]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f9d3 	bl	8002e50 <I2C_RequestMemoryWrite>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0a9      	b.n	8002c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2bff      	cmp	r3, #255	; 0xff
 8002ac4:	d90e      	bls.n	8002ae4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fba5 	bl	800322c <I2C_TransferConfig>
 8002ae2:	e00f      	b.n	8002b04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	8979      	ldrh	r1, [r7, #10]
 8002af6:	2300      	movs	r3, #0
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fb94 	bl	800322c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 faad 	bl	8003068 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e07b      	b.n	8002c10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d034      	beq.n	8002bbc <HAL_I2C_Mem_Write+0x1c8>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d130      	bne.n	8002bbc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	2200      	movs	r2, #0
 8002b62:	2180      	movs	r1, #128	; 0x80
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fa3f 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e04d      	b.n	8002c10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2bff      	cmp	r3, #255	; 0xff
 8002b7c:	d90e      	bls.n	8002b9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	22ff      	movs	r2, #255	; 0xff
 8002b82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	8979      	ldrh	r1, [r7, #10]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fb49 	bl	800322c <I2C_TransferConfig>
 8002b9a:	e00f      	b.n	8002bbc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	8979      	ldrh	r1, [r7, #10]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fb38 	bl	800322c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d19e      	bne.n	8002b04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fa8c 	bl	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e01a      	b.n	8002c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2220      	movs	r2, #32
 8002be0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_I2C_Mem_Write+0x224>)
 8002bee:	400b      	ands	r3, r1
 8002bf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
  }
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	fe00e800 	.word	0xfe00e800

08002c1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	817b      	strh	r3, [r7, #10]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	813b      	strh	r3, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	f040 80fd 	bne.w	8002e3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_I2C_Mem_Read+0x34>
 8002c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0f1      	b.n	8002e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_I2C_Mem_Read+0x4e>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e0ea      	b.n	8002e40 <HAL_I2C_Mem_Read+0x224>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c72:	f7ff fa93 	bl	800219c <HAL_GetTick>
 8002c76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2319      	movs	r3, #25
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f9af 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0d5      	b.n	8002e40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2222      	movs	r2, #34	; 0x22
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2240      	movs	r2, #64	; 0x40
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a3a      	ldr	r2, [r7, #32]
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cbc:	88f8      	ldrh	r0, [r7, #6]
 8002cbe:	893a      	ldrh	r2, [r7, #8]
 8002cc0:	8979      	ldrh	r1, [r7, #10]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	4603      	mov	r3, r0
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f913 	bl	8002ef8 <I2C_RequestMemoryRead>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0ad      	b.n	8002e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2bff      	cmp	r3, #255	; 0xff
 8002cec:	d90e      	bls.n	8002d0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	8979      	ldrh	r1, [r7, #10]
 8002cfc:	4b52      	ldr	r3, [pc, #328]	; (8002e48 <HAL_I2C_Mem_Read+0x22c>)
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fa91 	bl	800322c <I2C_TransferConfig>
 8002d0a:	e00f      	b.n	8002d2c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	8979      	ldrh	r1, [r7, #10]
 8002d1e:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <HAL_I2C_Mem_Read+0x22c>)
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa80 	bl	800322c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	2200      	movs	r2, #0
 8002d34:	2104      	movs	r1, #4
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f956 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07c      	b.n	8002e40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d034      	beq.n	8002dec <HAL_I2C_Mem_Read+0x1d0>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d130      	bne.n	8002dec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	2200      	movs	r2, #0
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f927 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e04d      	b.n	8002e40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2bff      	cmp	r3, #255	; 0xff
 8002dac:	d90e      	bls.n	8002dcc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	22ff      	movs	r2, #255	; 0xff
 8002db2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	8979      	ldrh	r1, [r7, #10]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fa31 	bl	800322c <I2C_TransferConfig>
 8002dca:	e00f      	b.n	8002dec <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	8979      	ldrh	r1, [r7, #10]
 8002dde:	2300      	movs	r3, #0
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa20 	bl	800322c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d19a      	bne.n	8002d2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f974 	bl	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e01a      	b.n	8002e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_I2C_Mem_Read+0x230>)
 8002e1e:	400b      	ands	r3, r1
 8002e20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
  }
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	80002400 	.word	0x80002400
 8002e4c:	fe00e800 	.word	0xfe00e800

08002e50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	4608      	mov	r0, r1
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	817b      	strh	r3, [r7, #10]
 8002e62:	460b      	mov	r3, r1
 8002e64:	813b      	strh	r3, [r7, #8]
 8002e66:	4613      	mov	r3, r2
 8002e68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	8979      	ldrh	r1, [r7, #10]
 8002e70:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <I2C_RequestMemoryWrite+0xa4>)
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f9d7 	bl	800322c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	69b9      	ldr	r1, [r7, #24]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f8f0 	bl	8003068 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e02c      	b.n	8002eec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e98:	893b      	ldrh	r3, [r7, #8]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea2:	e015      	b.n	8002ed0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea4:	893b      	ldrh	r3, [r7, #8]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	69b9      	ldr	r1, [r7, #24]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8d6 	bl	8003068 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e012      	b.n	8002eec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec6:	893b      	ldrh	r3, [r7, #8]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f884 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	80002000 	.word	0x80002000

08002ef8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	4608      	mov	r0, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	817b      	strh	r3, [r7, #10]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	813b      	strh	r3, [r7, #8]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	8979      	ldrh	r1, [r7, #10]
 8002f18:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <I2C_RequestMemoryRead+0xa4>)
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f984 	bl	800322c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	69b9      	ldr	r1, [r7, #24]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f89d 	bl	8003068 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e02c      	b.n	8002f92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3e:	893b      	ldrh	r3, [r7, #8]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
 8002f48:	e015      	b.n	8002f76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f4a:	893b      	ldrh	r3, [r7, #8]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	69b9      	ldr	r1, [r7, #24]
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f883 	bl	8003068 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e012      	b.n	8002f92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f6c:	893b      	ldrh	r3, [r7, #8]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2140      	movs	r1, #64	; 0x40
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f831 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	80002000 	.word	0x80002000

08002fa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d103      	bne.n	8002fbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d007      	beq.n	8002fdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	619a      	str	r2, [r3, #24]
  }
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff8:	e022      	b.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d01e      	beq.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7ff f8cb 	bl	800219c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d113      	bne.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e00f      	b.n	8003060 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	429a      	cmp	r2, r3
 800305c:	d0cd      	beq.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003074:	e02c      	b.n	80030d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f870 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e02a      	b.n	80030e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d01e      	beq.n	80030d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003092:	f7ff f883 	bl	800219c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d302      	bcc.n	80030a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d113      	bne.n	80030d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e007      	b.n	80030e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d1cb      	bne.n	8003076 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f4:	e028      	b.n	8003148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f830 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e026      	b.n	8003158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310a:	f7ff f847 	bl	800219c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d113      	bne.n	8003148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e007      	b.n	8003158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b20      	cmp	r3, #32
 8003154:	d1cf      	bne.n	80030f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b10      	cmp	r3, #16
 8003178:	d151      	bne.n	800321e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800317a:	e022      	b.n	80031c2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d01e      	beq.n	80031c2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003184:	f7ff f80a 	bl	800219c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	429a      	cmp	r2, r3
 8003192:	d302      	bcc.n	800319a <I2C_IsAcknowledgeFailed+0x3a>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d113      	bne.n	80031c2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e02e      	b.n	8003220 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d1d5      	bne.n	800317c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2210      	movs	r2, #16
 80031d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2220      	movs	r2, #32
 80031de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff fedd 	bl	8002fa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <I2C_IsAcknowledgeFailed+0xc8>)
 80031f2:	400b      	ands	r3, r1
 80031f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f043 0204 	orr.w	r2, r3, #4
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	fe00e800 	.word	0xfe00e800

0800322c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	607b      	str	r3, [r7, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	817b      	strh	r3, [r7, #10]
 800323a:	4613      	mov	r3, r2
 800323c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	0d5b      	lsrs	r3, r3, #21
 8003248:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <I2C_TransferConfig+0x58>)
 800324e:	430b      	orrs	r3, r1
 8003250:	43db      	mvns	r3, r3
 8003252:	ea02 0103 	and.w	r1, r2, r3
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800325c:	7a7b      	ldrb	r3, [r7, #9]
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	431a      	orrs	r2, r3
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	431a      	orrs	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	03ff63ff 	.word	0x03ff63ff

08003288 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	d138      	bne.n	8003310 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e032      	b.n	8003312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	; 0x24
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b20      	cmp	r3, #32
 8003332:	d139      	bne.n	80033a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800333e:	2302      	movs	r3, #2
 8003340:	e033      	b.n	80033aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2224      	movs	r2, #36	; 0x24
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003370:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b8:	b08b      	sub	sp, #44	; 0x2c
 80033ba:	af06      	add	r7, sp, #24
 80033bc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0d7      	b.n	8003578 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d106      	bne.n	80033e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7fe fd55 	bl	8001e8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2203      	movs	r2, #3
 80033e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 fe50 	bl	8006094 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e04c      	b.n	8003494 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	440b      	add	r3, r1
 800340a:	3301      	adds	r3, #1
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	440b      	add	r3, r1
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	b298      	uxth	r0, r3
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	440b      	add	r3, r1
 8003436:	3336      	adds	r3, #54	; 0x36
 8003438:	4602      	mov	r2, r0
 800343a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	440b      	add	r3, r1
 800344c:	3303      	adds	r3, #3
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	3338      	adds	r3, #56	; 0x38
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	440b      	add	r3, r1
 8003474:	333c      	adds	r3, #60	; 0x3c
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	3340      	adds	r3, #64	; 0x40
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	3301      	adds	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d3ad      	bcc.n	80033fa <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	e044      	b.n	800352e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	440b      	add	r3, r1
 80034de:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	440b      	add	r3, r1
 80034f4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	440b      	add	r3, r1
 800350a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	440b      	add	r3, r1
 8003520:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	3301      	adds	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	7bfa      	ldrb	r2, [r7, #15]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d3b5      	bcc.n	80034a4 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	687e      	ldr	r6, [r7, #4]
 8003540:	466d      	mov	r5, sp
 8003542:	f106 0410 	add.w	r4, r6, #16
 8003546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	602b      	str	r3, [r5, #0]
 800354e:	1d33      	adds	r3, r6, #4
 8003550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003552:	6838      	ldr	r0, [r7, #0]
 8003554:	f002 fdb9 	bl	80060ca <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d102      	bne.n	8003576 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f805 	bl	8003580 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003580 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f043 0302 	orr.w	r3, r3, #2
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	58000400 	.word	0x58000400

080035f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <HAL_PWREx_GetVoltageRange+0x18>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	58000400 	.word	0x58000400

08003610 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003622:	d101      	bne.n	8003628 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_RCC_HSE_Enable>:
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <LL_RCC_HSE_Disable>:
{
 8003652:	b480      	push	{r7}
 8003654:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
}
 8003666:	bf00      	nop
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_RCC_HSE_IsReady>:
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003682:	d101      	bne.n	8003688 <LL_RCC_HSE_IsReady+0x18>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <LL_RCC_HSE_IsReady+0x1a>
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <LL_RCC_HSI_Enable>:
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a6:	6013      	str	r3, [r2, #0]
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <LL_RCC_HSI_Disable>:
{
 80036b2:	b480      	push	{r7}
 80036b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80036b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c4:	6013      	str	r3, [r2, #0]
}
 80036c6:	bf00      	nop
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <LL_RCC_HSI_IsReady>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80036d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e2:	d101      	bne.n	80036e8 <LL_RCC_HSI_IsReady+0x18>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <LL_RCC_HSI_IsReady+0x1a>
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80036fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_RCC_HSI48_Enable>:
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800372a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_RCC_HSI48_Disable>:
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800374c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <LL_RCC_HSI48_IsReady>:
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	d101      	bne.n	800377a <LL_RCC_HSI48_IsReady+0x18>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <LL_RCC_HSI48_IsReady+0x1a>
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_RCC_LSE_Enable>:
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800378a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_RCC_LSE_Disable>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <LL_RCC_LSE_EnableBypass>:
{
 80037ca:	b480      	push	{r7}
 80037cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037da:	f043 0304 	orr.w	r3, r3, #4
 80037de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037e2:	bf00      	nop
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_RCC_LSE_DisableBypass>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d101      	bne.n	8003826 <LL_RCC_LSE_IsReady+0x18>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <LL_RCC_LSE_IsReady+0x1a>
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d101      	bne.n	800388e <LL_RCC_LSI1_IsReady+0x18>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <LL_RCC_LSI1_IsReady+0x1a>
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800389e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038aa:	f043 0304 	orr.w	r3, r3, #4
 80038ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038cc:	f023 0304 	bic.w	r3, r3, #4
 80038d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d101      	bne.n	80038f6 <LL_RCC_LSI2_IsReady+0x18>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <LL_RCC_LSI2_IsReady+0x1a>
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800390a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003912:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6013      	str	r3, [r2, #0]
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6013      	str	r3, [r2, #0]
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d101      	bne.n	8003982 <LL_RCC_MSI_IsReady+0x16>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <LL_RCC_MSI_IsReady+0x18>
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80039bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2bb0      	cmp	r3, #176	; 0xb0
 80039cc:	d901      	bls.n	80039d2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80039ce:	23b0      	movs	r3, #176	; 0xb0
 80039d0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80039d2:	687b      	ldr	r3, [r7, #4]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80039e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f023 0203 	bic.w	r2, r3, #3
 8003a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003aae:	f023 020f 	bic.w	r2, r3, #15
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	608b      	str	r3, [r1, #8]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b92:	6013      	str	r3, [r2, #0]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bce:	d101      	bne.n	8003bd4 <LL_RCC_PLL_IsReady+0x18>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <LL_RCC_PLL_IsReady+0x1a>
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0303 	and.w	r3, r3, #3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c54:	d101      	bne.n	8003c5a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003c66:	b480      	push	{r7}
 8003c68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c7a:	d101      	bne.n	8003c80 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca0:	d101      	bne.n	8003ca6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cc4:	d101      	bne.n	8003cca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ce8:	d101      	bne.n	8003cee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cfc:	b590      	push	{r4, r7, lr}
 8003cfe:	b08d      	sub	sp, #52	; 0x34
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e37e      	b.n	800440c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8092 	beq.w	8003e40 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d1c:	f7ff fe89 	bl	8003a32 <LL_RCC_GetSysClkSource>
 8003d20:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d22:	f7ff ff82 	bl	8003c2a <LL_RCC_PLL_GetMainSource>
 8003d26:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_RCC_OscConfig+0x3e>
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	2b0c      	cmp	r3, #12
 8003d32:	d14c      	bne.n	8003dce <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d149      	bne.n	8003dce <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d3a:	f7ff fe17 	bl	800396c <LL_RCC_MSI_IsReady>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_OscConfig+0x54>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e35d      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003d54:	f7ff fe2f 	bl	80039b6 <LL_RCC_MSI_GetRange>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	429c      	cmp	r4, r3
 8003d5c:	d914      	bls.n	8003d88 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fd42 	bl	80047ec <RCC_SetFlashLatencyFromMSIRange>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e34c      	b.n	800440c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fe09 	bl	800398e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fe2d 	bl	80039e0 <LL_RCC_MSI_SetCalibTrimming>
 8003d86:	e013      	b.n	8003db0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fdfe 	bl	800398e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fe22 	bl	80039e0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fd23 	bl	80047ec <RCC_SetFlashLatencyFromMSIRange>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e32d      	b.n	800440c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003db0:	f000 fcdc 	bl	800476c <HAL_RCC_GetHCLKFreq>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4ab3      	ldr	r2, [pc, #716]	; (8004084 <HAL_RCC_OscConfig+0x388>)
 8003db8:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003dba:	4bb3      	ldr	r3, [pc, #716]	; (8004088 <HAL_RCC_OscConfig+0x38c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe f99e 	bl	8002100 <HAL_InitTick>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d039      	beq.n	8003e3e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e31e      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01e      	beq.n	8003e14 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dd6:	f7ff fdab 	bl	8003930 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dda:	f7fe f9df 	bl	800219c <HAL_GetTick>
 8003dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003de2:	f7fe f9db 	bl	800219c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e30b      	b.n	800440c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003df4:	f7ff fdba 	bl	800396c <LL_RCC_MSI_IsReady>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f1      	beq.n	8003de2 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fdc3 	bl	800398e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fde7 	bl	80039e0 <LL_RCC_MSI_SetCalibTrimming>
 8003e12:	e015      	b.n	8003e40 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e14:	f7ff fd9b 	bl	800394e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e18:	f7fe f9c0 	bl	800219c <HAL_GetTick>
 8003e1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e20:	f7fe f9bc 	bl	800219c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e2ec      	b.n	800440c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e32:	f7ff fd9b 	bl	800396c <LL_RCC_MSI_IsReady>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f1      	bne.n	8003e20 <HAL_RCC_OscConfig+0x124>
 8003e3c:	e000      	b.n	8003e40 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d04e      	beq.n	8003eea <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e4c:	f7ff fdf1 	bl	8003a32 <LL_RCC_GetSysClkSource>
 8003e50:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e52:	f7ff feea 	bl	8003c2a <LL_RCC_PLL_GetMainSource>
 8003e56:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCC_OscConfig+0x16e>
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	d10d      	bne.n	8003e80 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d10a      	bne.n	8003e80 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6a:	f7ff fc01 	bl	8003670 <LL_RCC_HSE_IsReady>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d039      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x1ec>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d135      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e2c5      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e88:	d102      	bne.n	8003e90 <HAL_RCC_OscConfig+0x194>
 8003e8a:	f7ff fbd3 	bl	8003634 <LL_RCC_HSE_Enable>
 8003e8e:	e001      	b.n	8003e94 <HAL_RCC_OscConfig+0x198>
 8003e90:	f7ff fbdf 	bl	8003652 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d012      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fe f97e 	bl	800219c <HAL_GetTick>
 8003ea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea4:	f7fe f97a 	bl	800219c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e2aa      	b.n	800440c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003eb6:	f7ff fbdb 	bl	8003670 <LL_RCC_HSE_IsReady>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f1      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x1a8>
 8003ec0:	e013      	b.n	8003eea <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fe f96b 	bl	800219c <HAL_GetTick>
 8003ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eca:	f7fe f967 	bl	800219c <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b64      	cmp	r3, #100	; 0x64
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e297      	b.n	800440c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003edc:	f7ff fbc8 	bl	8003670 <LL_RCC_HSE_IsReady>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f1      	bne.n	8003eca <HAL_RCC_OscConfig+0x1ce>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d051      	beq.n	8003f9a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef6:	f7ff fd9c 	bl	8003a32 <LL_RCC_GetSysClkSource>
 8003efa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003efc:	f7ff fe95 	bl	8003c2a <LL_RCC_PLL_GetMainSource>
 8003f00:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_OscConfig+0x218>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b0c      	cmp	r3, #12
 8003f0c:	d113      	bne.n	8003f36 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d110      	bne.n	8003f36 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f14:	f7ff fbdc 	bl	80036d0 <LL_RCC_HSI_IsReady>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_RCC_OscConfig+0x22e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e270      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fbe0 	bl	80036f4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f34:	e031      	b.n	8003f9a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d019      	beq.n	8003f72 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f3e:	f7ff fba9 	bl	8003694 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fe f92b 	bl	800219c <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4a:	f7fe f927 	bl	800219c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e257      	b.n	800440c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f5c:	f7ff fbb8 	bl	80036d0 <LL_RCC_HSI_IsReady>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f1      	beq.n	8003f4a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fbc2 	bl	80036f4 <LL_RCC_HSI_SetCalibTrimming>
 8003f70:	e013      	b.n	8003f9a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f72:	f7ff fb9e 	bl	80036b2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fe f911 	bl	800219c <HAL_GetTick>
 8003f7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7e:	f7fe f90d 	bl	800219c <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e23d      	b.n	800440c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f90:	f7ff fb9e 	bl	80036d0 <LL_RCC_HSI_IsReady>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f1      	bne.n	8003f7e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80a3 	beq.w	80040fa <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d076      	beq.n	80040aa <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d046      	beq.n	8004056 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003fc8:	f7ff fc55 	bl	8003876 <LL_RCC_LSI1_IsReady>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d113      	bne.n	8003ffa <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003fd2:	f7ff fc2e 	bl	8003832 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fd6:	f7fe f8e1 	bl	800219c <HAL_GetTick>
 8003fda:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fde:	f7fe f8dd 	bl	800219c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e20d      	b.n	800440c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003ff0:	f7ff fc41 	bl	8003876 <LL_RCC_LSI1_IsReady>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f1      	beq.n	8003fde <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003ffa:	f7ff fc4e 	bl	800389a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fe f8cd 	bl	800219c <HAL_GetTick>
 8004002:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004006:	f7fe f8c9 	bl	800219c <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b03      	cmp	r3, #3
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1f9      	b.n	800440c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004018:	f7ff fc61 	bl	80038de <LL_RCC_LSI2_IsReady>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f1      	beq.n	8004006 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fc6b 	bl	8003902 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800402c:	f7ff fc12 	bl	8003854 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fe f8b4 	bl	800219c <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004038:	f7fe f8b0 	bl	800219c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e1e0      	b.n	800440c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800404a:	f7ff fc14 	bl	8003876 <LL_RCC_LSI1_IsReady>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f1      	bne.n	8004038 <HAL_RCC_OscConfig+0x33c>
 8004054:	e051      	b.n	80040fa <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004056:	f7ff fbec 	bl	8003832 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fe f89f 	bl	800219c <HAL_GetTick>
 800405e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004062:	f7fe f89b 	bl	800219c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e1cb      	b.n	800440c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004074:	f7ff fbff 	bl	8003876 <LL_RCC_LSI1_IsReady>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f1      	beq.n	8004062 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800407e:	f7ff fc1d 	bl	80038bc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004082:	e00c      	b.n	800409e <HAL_RCC_OscConfig+0x3a2>
 8004084:	2000000c 	.word	0x2000000c
 8004088:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800408c:	f7fe f886 	bl	800219c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b03      	cmp	r3, #3
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e1b6      	b.n	800440c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800409e:	f7ff fc1e 	bl	80038de <LL_RCC_LSI2_IsReady>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f1      	bne.n	800408c <HAL_RCC_OscConfig+0x390>
 80040a8:	e027      	b.n	80040fa <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80040aa:	f7ff fc07 	bl	80038bc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ae:	f7fe f875 	bl	800219c <HAL_GetTick>
 80040b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80040b6:	f7fe f871 	bl	800219c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e1a1      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80040c8:	f7ff fc09 	bl	80038de <LL_RCC_LSI2_IsReady>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f1      	bne.n	80040b6 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80040d2:	f7ff fbbf 	bl	8003854 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d6:	f7fe f861 	bl	800219c <HAL_GetTick>
 80040da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040de:	f7fe f85d 	bl	800219c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e18d      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040f0:	f7ff fbc1 	bl	8003876 <LL_RCC_LSI1_IsReady>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f1      	bne.n	80040de <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d05b      	beq.n	80041be <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004106:	4bb5      	ldr	r3, [pc, #724]	; (80043dc <HAL_RCC_OscConfig+0x6e0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d114      	bne.n	800413c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004112:	f7ff fa5f 	bl	80035d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004116:	f7fe f841 	bl	800219c <HAL_GetTick>
 800411a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411e:	f7fe f83d 	bl	800219c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e16d      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004130:	4baa      	ldr	r3, [pc, #680]	; (80043dc <HAL_RCC_OscConfig+0x6e0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d102      	bne.n	800414a <HAL_RCC_OscConfig+0x44e>
 8004144:	f7ff fb1f 	bl	8003786 <LL_RCC_LSE_Enable>
 8004148:	e00c      	b.n	8004164 <HAL_RCC_OscConfig+0x468>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b05      	cmp	r3, #5
 8004150:	d104      	bne.n	800415c <HAL_RCC_OscConfig+0x460>
 8004152:	f7ff fb3a 	bl	80037ca <LL_RCC_LSE_EnableBypass>
 8004156:	f7ff fb16 	bl	8003786 <LL_RCC_LSE_Enable>
 800415a:	e003      	b.n	8004164 <HAL_RCC_OscConfig+0x468>
 800415c:	f7ff fb24 	bl	80037a8 <LL_RCC_LSE_Disable>
 8004160:	f7ff fb44 	bl	80037ec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d014      	beq.n	8004196 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fe f816 	bl	800219c <HAL_GetTick>
 8004170:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004172:	e00a      	b.n	800418a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fe f812 	bl	800219c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e140      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800418a:	f7ff fb40 	bl	800380e <LL_RCC_LSE_IsReady>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ef      	beq.n	8004174 <HAL_RCC_OscConfig+0x478>
 8004194:	e013      	b.n	80041be <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004196:	f7fe f801 	bl	800219c <HAL_GetTick>
 800419a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800419c:	e00a      	b.n	80041b4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fd fffd 	bl	800219c <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e12b      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80041b4:	f7ff fb2b 	bl	800380e <LL_RCC_LSE_IsReady>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1ef      	bne.n	800419e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d02c      	beq.n	8004224 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d014      	beq.n	80041fc <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041d2:	f7ff faa4 	bl	800371e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d6:	f7fd ffe1 	bl	800219c <HAL_GetTick>
 80041da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041de:	f7fd ffdd 	bl	800219c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e10d      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041f0:	f7ff fab7 	bl	8003762 <LL_RCC_HSI48_IsReady>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f1      	beq.n	80041de <HAL_RCC_OscConfig+0x4e2>
 80041fa:	e013      	b.n	8004224 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041fc:	f7ff faa0 	bl	8003740 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004200:	f7fd ffcc 	bl	800219c <HAL_GetTick>
 8004204:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004208:	f7fd ffc8 	bl	800219c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0f8      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800421a:	f7ff faa2 	bl	8003762 <LL_RCC_HSI48_IsReady>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f1      	bne.n	8004208 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80ee 	beq.w	800440a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800422e:	f7ff fc00 	bl	8003a32 <LL_RCC_GetSysClkSource>
 8004232:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	2b02      	cmp	r3, #2
 8004242:	f040 80af 	bne.w	80043a4 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0203 	and.w	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	429a      	cmp	r2, r3
 8004252:	d123      	bne.n	800429c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d11c      	bne.n	800429c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d114      	bne.n	800429c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d10d      	bne.n	800429c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d106      	bne.n	800429c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d05d      	beq.n	8004358 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d058      	beq.n	8004354 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0ab      	b.n	800440c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042b4:	f7ff fc73 	bl	8003b9e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042b8:	f7fd ff70 	bl	800219c <HAL_GetTick>
 80042bc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c0:	f7fd ff6c 	bl	800219c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e09c      	b.n	800440c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ef      	bne.n	80042c0 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	4b3e      	ldr	r3, [pc, #248]	; (80043e0 <HAL_RCC_OscConfig+0x6e4>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042f2:	4311      	orrs	r1, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042f8:	0212      	lsls	r2, r2, #8
 80042fa:	4311      	orrs	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004306:	4311      	orrs	r1, r2
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800430c:	430a      	orrs	r2, r1
 800430e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004312:	4313      	orrs	r3, r2
 8004314:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004316:	f7ff fc33 	bl	8003b80 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004328:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800432a:	f7fd ff37 	bl	800219c <HAL_GetTick>
 800432e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004332:	f7fd ff33 	bl	800219c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e063      	b.n	800440c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0ef      	beq.n	8004332 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004352:	e05a      	b.n	800440a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e059      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d151      	bne.n	800440a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004366:	f7ff fc0b 	bl	8003b80 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800437a:	f7fd ff0f 	bl	800219c <HAL_GetTick>
 800437e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004382:	f7fd ff0b 	bl	800219c <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e03b      	b.n	800440c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0ef      	beq.n	8004382 <HAL_RCC_OscConfig+0x686>
 80043a2:	e032      	b.n	800440a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b0c      	cmp	r3, #12
 80043a8:	d02d      	beq.n	8004406 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043aa:	f7ff fbf8 	bl	8003b9e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b8:	f023 0303 	bic.w	r3, r3, #3
 80043bc:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80043be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80043cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fd fee3 	bl	800219c <HAL_GetTick>
 80043d6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d8:	e00d      	b.n	80043f6 <HAL_RCC_OscConfig+0x6fa>
 80043da:	bf00      	nop
 80043dc:	58000400 	.word	0x58000400
 80043e0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fd feda 	bl	800219c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e00a      	b.n	800440c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ef      	bne.n	80043e4 <HAL_RCC_OscConfig+0x6e8>
 8004404:	e001      	b.n	800440a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3734      	adds	r7, #52	; 0x34
 8004410:	46bd      	mov	sp, r7
 8004412:	bd90      	pop	{r4, r7, pc}

08004414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e12d      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004428:	4b98      	ldr	r3, [pc, #608]	; (800468c <HAL_RCC_ClockConfig+0x278>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d91b      	bls.n	800446e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b95      	ldr	r3, [pc, #596]	; (800468c <HAL_RCC_ClockConfig+0x278>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 0207 	bic.w	r2, r3, #7
 800443e:	4993      	ldr	r1, [pc, #588]	; (800468c <HAL_RCC_ClockConfig+0x278>)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004446:	f7fd fea9 	bl	800219c <HAL_GetTick>
 800444a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800444c:	e008      	b.n	8004460 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800444e:	f7fd fea5 	bl	800219c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e111      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004460:	4b8a      	ldr	r3, [pc, #552]	; (800468c <HAL_RCC_ClockConfig+0x278>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d1ef      	bne.n	800444e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fae3 	bl	8003a4a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004484:	f7fd fe8a 	bl	800219c <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800448c:	f7fd fe86 	bl	800219c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e0f2      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800449e:	f7ff fbd0 	bl	8003c42 <LL_RCC_IsActiveFlag_HPRE>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f1      	beq.n	800448c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d016      	beq.n	80044e2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fada 	bl	8003a72 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044be:	f7fd fe6d 	bl	800219c <HAL_GetTick>
 80044c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044c6:	f7fd fe69 	bl	800219c <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e0d5      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80044d8:	f7ff fbc5 	bl	8003c66 <LL_RCC_IsActiveFlag_C2HPRE>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f1      	beq.n	80044c6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d016      	beq.n	800451c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fad3 	bl	8003a9e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044f8:	f7fd fe50 	bl	800219c <HAL_GetTick>
 80044fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004500:	f7fd fe4c 	bl	800219c <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e0b8      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004512:	f7ff fbbb 	bl	8003c8c <LL_RCC_IsActiveFlag_SHDHPRE>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f1      	beq.n	8004500 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d016      	beq.n	8004556 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff facd 	bl	8003acc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004532:	f7fd fe33 	bl	800219c <HAL_GetTick>
 8004536:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800453a:	f7fd fe2f 	bl	800219c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e09b      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800454c:	f7ff fbb1 	bl	8003cb2 <LL_RCC_IsActiveFlag_PPRE1>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f1      	beq.n	800453a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d017      	beq.n	8004592 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fac3 	bl	8003af4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800456e:	f7fd fe15 	bl	800219c <HAL_GetTick>
 8004572:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004574:	e008      	b.n	8004588 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004576:	f7fd fe11 	bl	800219c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e07d      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004588:	f7ff fba5 	bl	8003cd6 <LL_RCC_IsActiveFlag_PPRE2>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f1      	beq.n	8004576 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d043      	beq.n	8004626 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d106      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80045a6:	f7ff f863 	bl	8003670 <LL_RCC_HSE_IsReady>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d11e      	bne.n	80045ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e067      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80045bc:	f7ff fafe 	bl	8003bbc <LL_RCC_PLL_IsReady>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d113      	bne.n	80045ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e05c      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80045d2:	f7ff f9cb 	bl	800396c <LL_RCC_MSI_IsReady>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d108      	bne.n	80045ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e051      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80045e0:	f7ff f876 	bl	80036d0 <LL_RCC_HSI_IsReady>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e04a      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fa09 	bl	8003a0a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f8:	f7fd fdd0 	bl	800219c <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7fd fdcc 	bl	800219c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e036      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	f7ff fa0c 	bl	8003a32 <LL_RCC_GetSysClkSource>
 800461a:	4602      	mov	r2, r0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	429a      	cmp	r2, r3
 8004624:	d1ec      	bne.n	8004600 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004626:	4b19      	ldr	r3, [pc, #100]	; (800468c <HAL_RCC_ClockConfig+0x278>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d21b      	bcs.n	800466c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004634:	4b15      	ldr	r3, [pc, #84]	; (800468c <HAL_RCC_ClockConfig+0x278>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 0207 	bic.w	r2, r3, #7
 800463c:	4913      	ldr	r1, [pc, #76]	; (800468c <HAL_RCC_ClockConfig+0x278>)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004644:	f7fd fdaa 	bl	800219c <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800464a:	e008      	b.n	800465e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800464c:	f7fd fda6 	bl	800219c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e012      	b.n	8004684 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_ClockConfig+0x278>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d1ef      	bne.n	800464c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800466c:	f000 f87e 	bl	800476c <HAL_RCC_GetHCLKFreq>
 8004670:	4603      	mov	r3, r0
 8004672:	4a07      	ldr	r2, [pc, #28]	; (8004690 <HAL_RCC_ClockConfig+0x27c>)
 8004674:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004676:	f7fd fd9d 	bl	80021b4 <HAL_GetTickPrio>
 800467a:	4603      	mov	r3, r0
 800467c:	4618      	mov	r0, r3
 800467e:	f7fd fd3f 	bl	8002100 <HAL_InitTick>
 8004682:	4603      	mov	r3, r0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	58004000 	.word	0x58004000
 8004690:	2000000c 	.word	0x2000000c

08004694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800469a:	f7ff f9ca 	bl	8003a32 <LL_RCC_GetSysClkSource>
 800469e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80046a6:	f7ff f986 	bl	80039b6 <LL_RCC_MSI_GetRange>
 80046aa:	4603      	mov	r3, r0
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	4a2b      	ldr	r2, [pc, #172]	; (8004760 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e04b      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d102      	bne.n	80046c8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046c2:	4b28      	ldr	r3, [pc, #160]	; (8004764 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e045      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d10a      	bne.n	80046e4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046ce:	f7fe ff9f 	bl	8003610 <LL_RCC_HSE_IsEnabledDiv2>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d102      	bne.n	80046de <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80046d8:	4b22      	ldr	r3, [pc, #136]	; (8004764 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	e03a      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80046de:	4b22      	ldr	r3, [pc, #136]	; (8004768 <HAL_RCC_GetSysClockFreq+0xd4>)
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e037      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80046e4:	f7ff faa1 	bl	8003c2a <LL_RCC_PLL_GetMainSource>
 80046e8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d003      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x64>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d003      	beq.n	80046fe <HAL_RCC_GetSysClockFreq+0x6a>
 80046f6:	e00d      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046fa:	60bb      	str	r3, [r7, #8]
        break;
 80046fc:	e015      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046fe:	f7fe ff87 	bl	8003610 <LL_RCC_HSE_IsEnabledDiv2>
 8004702:	4603      	mov	r3, r0
 8004704:	2b01      	cmp	r3, #1
 8004706:	d102      	bne.n	800470e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004708:	4b16      	ldr	r3, [pc, #88]	; (8004764 <HAL_RCC_GetSysClockFreq+0xd0>)
 800470a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800470c:	e00d      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800470e:	4b16      	ldr	r3, [pc, #88]	; (8004768 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004710:	60bb      	str	r3, [r7, #8]
        break;
 8004712:	e00a      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004714:	f7ff f94f 	bl	80039b6 <LL_RCC_MSI_GetRange>
 8004718:	4603      	mov	r3, r0
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	4a0f      	ldr	r2, [pc, #60]	; (8004760 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004726:	60bb      	str	r3, [r7, #8]
        break;
 8004728:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800472a:	f7ff fa59 	bl	8003be0 <LL_RCC_PLL_GetN>
 800472e:	4602      	mov	r2, r0
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	fb03 f402 	mul.w	r4, r3, r2
 8004736:	f7ff fa6c 	bl	8003c12 <LL_RCC_PLL_GetDivider>
 800473a:	4603      	mov	r3, r0
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	3301      	adds	r3, #1
 8004740:	fbb4 f4f3 	udiv	r4, r4, r3
 8004744:	f7ff fa59 	bl	8003bfa <LL_RCC_PLL_GetR>
 8004748:	4603      	mov	r3, r0
 800474a:	0f5b      	lsrs	r3, r3, #29
 800474c:	3301      	adds	r3, #1
 800474e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004752:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004754:	68fb      	ldr	r3, [r7, #12]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	bd90      	pop	{r4, r7, pc}
 800475e:	bf00      	nop
 8004760:	08007158 	.word	0x08007158
 8004764:	00f42400 	.word	0x00f42400
 8004768:	01e84800 	.word	0x01e84800

0800476c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b598      	push	{r3, r4, r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004770:	f7ff ff90 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8004774:	4604      	mov	r4, r0
 8004776:	f7ff f9d1 	bl	8003b1c <LL_RCC_GetAHBPrescaler>
 800477a:	4603      	mov	r3, r0
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	4a03      	ldr	r2, [pc, #12]	; (8004790 <HAL_RCC_GetHCLKFreq+0x24>)
 8004784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004788:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800478c:	4618      	mov	r0, r3
 800478e:	bd98      	pop	{r3, r4, r7, pc}
 8004790:	080070f8 	.word	0x080070f8

08004794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004794:	b598      	push	{r3, r4, r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004798:	f7ff ffe8 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800479c:	4604      	mov	r4, r0
 800479e:	f7ff f9d7 	bl	8003b50 <LL_RCC_GetAPB1Prescaler>
 80047a2:	4603      	mov	r3, r0
 80047a4:	0a1b      	lsrs	r3, r3, #8
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	4a04      	ldr	r2, [pc, #16]	; (80047bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd98      	pop	{r3, r4, r7, pc}
 80047bc:	08007138 	.word	0x08007138

080047c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c0:	b598      	push	{r3, r4, r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80047c4:	f7ff ffd2 	bl	800476c <HAL_RCC_GetHCLKFreq>
 80047c8:	4604      	mov	r4, r0
 80047ca:	f7ff f9cd 	bl	8003b68 <LL_RCC_GetAPB2Prescaler>
 80047ce:	4603      	mov	r3, r0
 80047d0:	0adb      	lsrs	r3, r3, #11
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	bd98      	pop	{r3, r4, r7, pc}
 80047e8:	08007138 	.word	0x08007138

080047ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2bb0      	cmp	r3, #176	; 0xb0
 80047f8:	d903      	bls.n	8004802 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80047fa:	4b15      	ldr	r3, [pc, #84]	; (8004850 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e007      	b.n	8004812 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	4a11      	ldr	r2, [pc, #68]	; (8004850 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800480c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004810:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004812:	f7ff f98f 	bl	8003b34 <LL_RCC_GetAHB4Prescaler>
 8004816:	4603      	mov	r3, r0
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	0c9c      	lsrs	r4, r3, #18
 8004836:	f7fe fedd 	bl	80035f4 <HAL_PWREx_GetVoltageRange>
 800483a:	4603      	mov	r3, r0
 800483c:	4619      	mov	r1, r3
 800483e:	4620      	mov	r0, r4
 8004840:	f000 f80c 	bl	800485c <RCC_SetFlashLatency>
 8004844:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}
 800484e:	bf00      	nop
 8004850:	08007158 	.word	0x08007158
 8004854:	080070f8 	.word	0x080070f8
 8004858:	431bde83 	.word	0x431bde83

0800485c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b093      	sub	sp, #76	; 0x4c
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004866:	4b39      	ldr	r3, [pc, #228]	; (800494c <RCC_SetFlashLatency+0xf0>)
 8004868:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800486c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800486e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004872:	4a37      	ldr	r2, [pc, #220]	; (8004950 <RCC_SetFlashLatency+0xf4>)
 8004874:	f107 031c 	add.w	r3, r7, #28
 8004878:	ca07      	ldmia	r2, {r0, r1, r2}
 800487a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800487e:	4b35      	ldr	r3, [pc, #212]	; (8004954 <RCC_SetFlashLatency+0xf8>)
 8004880:	f107 040c 	add.w	r4, r7, #12
 8004884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800488a:	2300      	movs	r3, #0
 800488c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004894:	d11c      	bne.n	80048d0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004896:	2300      	movs	r3, #0
 8004898:	643b      	str	r3, [r7, #64]	; 0x40
 800489a:	e015      	b.n	80048c8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800489c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048a4:	4413      	add	r3, r2
 80048a6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d808      	bhi.n	80048c2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80048b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048b8:	4413      	add	r3, r2
 80048ba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048be:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80048c0:	e022      	b.n	8004908 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80048c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048c4:	3301      	adds	r3, #1
 80048c6:	643b      	str	r3, [r7, #64]	; 0x40
 80048c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d9e6      	bls.n	800489c <RCC_SetFlashLatency+0x40>
 80048ce:	e01b      	b.n	8004908 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d4:	e015      	b.n	8004902 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048de:	4413      	add	r3, r2
 80048e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d808      	bhi.n	80048fc <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80048ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048f2:	4413      	add	r3, r2
 80048f4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048f8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80048fa:	e005      	b.n	8004908 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fe:	3301      	adds	r3, #1
 8004900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004904:	2b02      	cmp	r3, #2
 8004906:	d9e6      	bls.n	80048d6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <RCC_SetFlashLatency+0xfc>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f023 0207 	bic.w	r2, r3, #7
 8004910:	4911      	ldr	r1, [pc, #68]	; (8004958 <RCC_SetFlashLatency+0xfc>)
 8004912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004914:	4313      	orrs	r3, r2
 8004916:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004918:	f7fd fc40 	bl	800219c <HAL_GetTick>
 800491c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800491e:	e008      	b.n	8004932 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004920:	f7fd fc3c 	bl	800219c <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e007      	b.n	8004942 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004932:	4b09      	ldr	r3, [pc, #36]	; (8004958 <RCC_SetFlashLatency+0xfc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800493c:	429a      	cmp	r2, r3
 800493e:	d1ef      	bne.n	8004920 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	374c      	adds	r7, #76	; 0x4c
 8004946:	46bd      	mov	sp, r7
 8004948:	bd90      	pop	{r4, r7, pc}
 800494a:	bf00      	nop
 800494c:	08006adc 	.word	0x08006adc
 8004950:	08006aec 	.word	0x08006aec
 8004954:	08006af8 	.word	0x08006af8
 8004958:	58004000 	.word	0x58004000

0800495c <LL_RCC_LSE_IsEnabled>:
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <LL_RCC_LSE_IsEnabled+0x18>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <LL_RCC_LSE_IsEnabled+0x1a>
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <LL_RCC_LSE_IsReady>:
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b02      	cmp	r3, #2
 8004992:	d101      	bne.n	8004998 <LL_RCC_LSE_IsReady+0x18>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <LL_RCC_LSE_IsReady+0x1a>
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <LL_RCC_MSI_EnablePLLMode>:
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049b2:	f043 0304 	orr.w	r3, r3, #4
 80049b6:	6013      	str	r3, [r2, #0]
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <LL_RCC_SetRFWKPClockSource>:
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <LL_RCC_SetSMPSClockSource>:
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80049f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	f023 0203 	bic.w	r2, r3, #3
 8004a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <LL_RCC_SetSMPSPrescaler>:
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <LL_RCC_SetUSARTClockSource>:
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <LL_RCC_SetLPUARTClockSource>:
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <LL_RCC_SetI2CClockSource>:
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	401a      	ands	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <LL_RCC_SetLPTIMClockSource>:
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004adc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	401a      	ands	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <LL_RCC_SetSAIClockSource>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <LL_RCC_SetRNGClockSource>:
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_RCC_SetCLK48ClockSource>:
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <LL_RCC_SetUSBClockSource>:
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ffe3 	bl	8004b5c <LL_RCC_SetCLK48ClockSource>
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <LL_RCC_SetADCClockSource>:
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <LL_RCC_SetRTCClockSource>:
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <LL_RCC_GetRTCClockSource>:
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <LL_RCC_ForceBackupDomainReset>:
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c28:	bf00      	nop
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004c32:	b480      	push	{r7}
 8004c34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c4a:	bf00      	nop
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <LL_RCC_PLLSAI1_Enable>:
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c66:	6013      	str	r3, [r2, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <LL_RCC_PLLSAI1_Disable>:
{
 8004c72:	b480      	push	{r7}
 8004c74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c84:	6013      	str	r3, [r2, #0]
}
 8004c86:	bf00      	nop
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <LL_RCC_PLLSAI1_IsReady>:
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca2:	d101      	bne.n	8004ca8 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d034      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cd8:	d021      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004cda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cde:	d81b      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ce0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ce4:	d01d      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004ce6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cea:	d815      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf4:	d110      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d04:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d06:	e00d      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f94d 	bl	8004fac <RCCEx_PLLSAI1_ConfigNP>
 8004d12:	4603      	mov	r3, r0
 8004d14:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d16:	e005      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	77fb      	strb	r3, [r7, #31]
        break;
 8004d1c:	e002      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004d1e:	bf00      	nop
 8004d20:	e000      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d24:	7ffb      	ldrb	r3, [r7, #31]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff fee8 	bl	8004b04 <LL_RCC_SetSAIClockSource>
 8004d34:	e001      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d36:	7ffb      	ldrb	r3, [r7, #31]
 8004d38:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d046      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004d46:	f7ff ff56 	bl	8004bf6 <LL_RCC_GetRTCClockSource>
 8004d4a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d03c      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d56:	f7fe fc3d 	bl	80035d4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff ff30 	bl	8004bca <LL_RCC_SetRTCClockSource>
 8004d6a:	e02e      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d74:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004d76:	f7ff ff4b 	bl	8004c10 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004d7a:	f7ff ff5a 	bl	8004c32 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004d96:	f7ff fde1 	bl	800495c <LL_RCC_LSE_IsEnabled>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d114      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004da0:	f7fd f9fc 	bl	800219c <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f7fd f9f8 	bl	800219c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d902      	bls.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	77fb      	strb	r3, [r7, #31]
              break;
 8004dbe:	e004      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004dc0:	f7ff fdde 	bl	8004980 <LL_RCC_LSE_IsReady>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d1ee      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004dca:	7ffb      	ldrb	r3, [r7, #31]
 8004dcc:	77bb      	strb	r3, [r7, #30]
 8004dce:	e001      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7ffb      	ldrb	r3, [r7, #31]
 8004dd2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d004      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fe2a 	bl	8004a3e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fe35 	bl	8004a6a <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fe5d 	bl	8004ad0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d004      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fe52 	bl	8004ad0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d004      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fe2a 	bl	8004a96 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d004      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fe1f 	bl	8004a96 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d022      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fe8d 	bl	8004b88 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e76:	d107      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e86:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e90:	d10b      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3304      	adds	r3, #4
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f8e3 	bl	8005062 <RCCEx_PLLSAI1_ConfigNQ>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004ea0:	7ffb      	ldrb	r3, [r7, #31]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004ea6:	7ffb      	ldrb	r3, [r7, #31]
 8004ea8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d02b      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ec8:	d003      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d105      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fe2a 	bl	8004b30 <LL_RCC_SetRNGClockSource>
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	2000      	movs	r0, #0
 8004eea:	f7ff fe21 	bl	8004b30 <LL_RCC_SetRNGClockSource>
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f7ff fe34 	bl	8004b5c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004efc:	d107      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d022      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fe3d 	bl	8004b9e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f2c:	d107      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f46:	d10b      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 f8e3 	bl	8005118 <RCCEx_PLLSAI1_ConfigNR>
 8004f52:	4603      	mov	r3, r0
 8004f54:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004f56:	7ffb      	ldrb	r3, [r7, #31]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004f5c:	7ffb      	ldrb	r3, [r7, #31]
 8004f5e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fd26 	bl	80049c2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fd45 	bl	8004a16 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fd2c 	bl	80049ee <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004f96:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004fa4:	f7ff fcfe 	bl	80049a4 <LL_RCC_MSI_EnablePLLMode>
}
 8004fa8:	bf00      	nop
 8004faa:	bd80      	pop	{r7, pc}

08004fac <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004fb8:	f7ff fe5b 	bl	8004c72 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fbc:	f7fd f8ee 	bl	800219c <HAL_GetTick>
 8004fc0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fc2:	e009      	b.n	8004fd8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fc4:	f7fd f8ea 	bl	800219c <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d902      	bls.n	8004fd8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd6:	e004      	b.n	8004fe2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fd8:	f7ff fe5a 	bl	8004c90 <LL_RCC_PLLSAI1_IsReady>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d137      	bne.n	8005058 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005012:	4313      	orrs	r3, r2
 8005014:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005016:	f7ff fe1d 	bl	8004c54 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800501a:	f7fd f8bf 	bl	800219c <HAL_GetTick>
 800501e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005020:	e009      	b.n	8005036 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005022:	f7fd f8bb 	bl	800219c <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d902      	bls.n	8005036 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	73fb      	strb	r3, [r7, #15]
        break;
 8005034:	e004      	b.n	8005040 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005036:	f7ff fe2b 	bl	8004c90 <LL_RCC_PLLSAI1_IsReady>
 800503a:	4603      	mov	r3, r0
 800503c:	2b01      	cmp	r3, #1
 800503e:	d1f0      	bne.n	8005022 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d108      	bne.n	8005058 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005054:	4313      	orrs	r3, r2
 8005056:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800506e:	f7ff fe00 	bl	8004c72 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005072:	f7fd f893 	bl	800219c <HAL_GetTick>
 8005076:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005078:	e009      	b.n	800508e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800507a:	f7fd f88f 	bl	800219c <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d902      	bls.n	800508e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	73fb      	strb	r3, [r7, #15]
      break;
 800508c:	e004      	b.n	8005098 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800508e:	f7ff fdff 	bl	8004c90 <LL_RCC_PLLSAI1_IsReady>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1f0      	bne.n	800507a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d137      	bne.n	800510e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800509e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b2:	4313      	orrs	r3, r2
 80050b4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050c8:	4313      	orrs	r3, r2
 80050ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80050cc:	f7ff fdc2 	bl	8004c54 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d0:	f7fd f864 	bl	800219c <HAL_GetTick>
 80050d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80050d6:	e009      	b.n	80050ec <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050d8:	f7fd f860 	bl	800219c <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d902      	bls.n	80050ec <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	73fb      	strb	r3, [r7, #15]
        break;
 80050ea:	e004      	b.n	80050f6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80050ec:	f7ff fdd0 	bl	8004c90 <LL_RCC_PLLSAI1_IsReady>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d1f0      	bne.n	80050d8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d108      	bne.n	800510e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80050fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800510a:	4313      	orrs	r3, r2
 800510c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005124:	f7ff fda5 	bl	8004c72 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005128:	f7fd f838 	bl	800219c <HAL_GetTick>
 800512c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800512e:	e009      	b.n	8005144 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005130:	f7fd f834 	bl	800219c <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d902      	bls.n	8005144 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	73fb      	strb	r3, [r7, #15]
      break;
 8005142:	e004      	b.n	800514e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005144:	f7ff fda4 	bl	8004c90 <LL_RCC_PLLSAI1_IsReady>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d137      	bne.n	80051c4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005168:	4313      	orrs	r3, r2
 800516a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800517e:	4313      	orrs	r3, r2
 8005180:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005182:	f7ff fd67 	bl	8004c54 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005186:	f7fd f809 	bl	800219c <HAL_GetTick>
 800518a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800518c:	e009      	b.n	80051a2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800518e:	f7fd f805 	bl	800219c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d902      	bls.n	80051a2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	73fb      	strb	r3, [r7, #15]
        break;
 80051a0:	e004      	b.n	80051ac <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051a2:	f7ff fd75 	bl	8004c90 <LL_RCC_PLLSAI1_IsReady>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d1f0      	bne.n	800518e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d108      	bne.n	80051c4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051c0:	4313      	orrs	r3, r2
 80051c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e049      	b.n	8005274 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d106      	bne.n	80051fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fc fe05 	bl	8001e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3304      	adds	r3, #4
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f000 f8fb 	bl	8005408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_TIM_ConfigClockSource+0x18>
 8005290:	2302      	movs	r3, #2
 8005292:	e0b5      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x184>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80052b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d0:	d03e      	beq.n	8005350 <HAL_TIM_ConfigClockSource+0xd4>
 80052d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d6:	f200 8087 	bhi.w	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052de:	f000 8085 	beq.w	80053ec <HAL_TIM_ConfigClockSource+0x170>
 80052e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e6:	d87f      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 80052e8:	2b70      	cmp	r3, #112	; 0x70
 80052ea:	d01a      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0xa6>
 80052ec:	2b70      	cmp	r3, #112	; 0x70
 80052ee:	d87b      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 80052f0:	2b60      	cmp	r3, #96	; 0x60
 80052f2:	d050      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0x11a>
 80052f4:	2b60      	cmp	r3, #96	; 0x60
 80052f6:	d877      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 80052f8:	2b50      	cmp	r3, #80	; 0x50
 80052fa:	d03c      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0xfa>
 80052fc:	2b50      	cmp	r3, #80	; 0x50
 80052fe:	d873      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005300:	2b40      	cmp	r3, #64	; 0x40
 8005302:	d058      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0x13a>
 8005304:	2b40      	cmp	r3, #64	; 0x40
 8005306:	d86f      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005308:	2b30      	cmp	r3, #48	; 0x30
 800530a:	d064      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x15a>
 800530c:	2b30      	cmp	r3, #48	; 0x30
 800530e:	d86b      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b20      	cmp	r3, #32
 8005312:	d060      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005314:	2b20      	cmp	r3, #32
 8005316:	d867      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d05c      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x15a>
 800531c:	2b10      	cmp	r3, #16
 800531e:	d05a      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005320:	e062      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6899      	ldr	r1, [r3, #8]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f000 f949 	bl	80055c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005344:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	609a      	str	r2, [r3, #8]
      break;
 800534e:	e04e      	b.n	80053ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6899      	ldr	r1, [r3, #8]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f000 f932 	bl	80055c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005372:	609a      	str	r2, [r3, #8]
      break;
 8005374:	e03b      	b.n	80053ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6859      	ldr	r1, [r3, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	461a      	mov	r2, r3
 8005384:	f000 f8a4 	bl	80054d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2150      	movs	r1, #80	; 0x50
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f8fd 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 8005394:	e02b      	b.n	80053ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6859      	ldr	r1, [r3, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	461a      	mov	r2, r3
 80053a4:	f000 f8c3 	bl	800552e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2160      	movs	r1, #96	; 0x60
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f8ed 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 80053b4:	e01b      	b.n	80053ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6859      	ldr	r1, [r3, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	461a      	mov	r2, r3
 80053c4:	f000 f884 	bl	80054d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2140      	movs	r1, #64	; 0x40
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f8dd 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 80053d4:	e00b      	b.n	80053ee <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4619      	mov	r1, r3
 80053e0:	4610      	mov	r0, r2
 80053e2:	f000 f8d4 	bl	800558e <TIM_ITRx_SetConfig>
        break;
 80053e6:	e002      	b.n	80053ee <HAL_TIM_ConfigClockSource+0x172>
      break;
 80053e8:	bf00      	nop
 80053ea:	e000      	b.n	80053ee <HAL_TIM_ConfigClockSource+0x172>
      break;
 80053ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <TIM_Base_SetConfig+0xbc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d003      	beq.n	8005428 <TIM_Base_SetConfig+0x20>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005426:	d108      	bne.n	800543a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a21      	ldr	r2, [pc, #132]	; (80054c4 <TIM_Base_SetConfig+0xbc>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00b      	beq.n	800545a <TIM_Base_SetConfig+0x52>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005448:	d007      	beq.n	800545a <TIM_Base_SetConfig+0x52>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <TIM_Base_SetConfig+0xc0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_Base_SetConfig+0x52>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a1d      	ldr	r2, [pc, #116]	; (80054cc <TIM_Base_SetConfig+0xc4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d108      	bne.n	800546c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a0c      	ldr	r2, [pc, #48]	; (80054c4 <TIM_Base_SetConfig+0xbc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0xa0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a0b      	ldr	r2, [pc, #44]	; (80054c8 <TIM_Base_SetConfig+0xc0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0xa0>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <TIM_Base_SetConfig+0xc4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d103      	bne.n	80054b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	615a      	str	r2, [r3, #20]
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800

080054d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f023 0201 	bic.w	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f023 030a 	bic.w	r3, r3, #10
 800550c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800552e:	b480      	push	{r7}
 8005530:	b087      	sub	sp, #28
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f023 0210 	bic.w	r2, r3, #16
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	031b      	lsls	r3, r3, #12
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800556a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80055a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f043 0307 	orr.w	r3, r3, #7
 80055b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	609a      	str	r2, [r3, #8]
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	021a      	lsls	r2, r3, #8
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	609a      	str	r2, [r3, #8]
}
 80055fc:	bf00      	nop
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800561c:	2302      	movs	r3, #2
 800561e:	e04a      	b.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1f      	ldr	r2, [pc, #124]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d108      	bne.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005650:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a12      	ldr	r2, [pc, #72]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005688:	d10c      	bne.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	4313      	orrs	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40012c00 	.word	0x40012c00

080056c8 <LL_RCC_GetUSARTClockSource>:
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80056d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4013      	ands	r3, r2
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <LL_RCC_GetLPUARTClockSource>:
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80056f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4013      	ands	r3, r2
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e042      	b.n	80057a0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7fc fb7d 	bl	8001e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2224      	movs	r2, #36	; 0x24
 8005736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f82c 	bl	80057a8 <UART_SetConfig>
 8005750:	4603      	mov	r3, r0
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e022      	b.n	80057a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa26 	bl	8005bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 faad 	bl	8005cf8 <UART_CheckIdleState>
 800579e:	4603      	mov	r3, r0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a8:	b5b0      	push	{r4, r5, r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4ba3      	ldr	r3, [pc, #652]	; (8005a60 <UART_SetConfig+0x2b8>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	69f9      	ldr	r1, [r7, #28]
 80057dc:	430b      	orrs	r3, r1
 80057de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a98      	ldr	r2, [pc, #608]	; (8005a64 <UART_SetConfig+0x2bc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	4313      	orrs	r3, r2
 800580e:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800581a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	69f9      	ldr	r1, [r7, #28]
 8005824:	430b      	orrs	r3, r1
 8005826:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	f023 010f 	bic.w	r1, r3, #15
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a89      	ldr	r2, [pc, #548]	; (8005a68 <UART_SetConfig+0x2c0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d120      	bne.n	800588a <UART_SetConfig+0xe2>
 8005848:	2003      	movs	r0, #3
 800584a:	f7ff ff3d 	bl	80056c8 <LL_RCC_GetUSARTClockSource>
 800584e:	4603      	mov	r3, r0
 8005850:	2b03      	cmp	r3, #3
 8005852:	d817      	bhi.n	8005884 <UART_SetConfig+0xdc>
 8005854:	a201      	add	r2, pc, #4	; (adr r2, 800585c <UART_SetConfig+0xb4>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	0800586d 	.word	0x0800586d
 8005860:	08005879 	.word	0x08005879
 8005864:	08005873 	.word	0x08005873
 8005868:	0800587f 	.word	0x0800587f
 800586c:	2301      	movs	r3, #1
 800586e:	76fb      	strb	r3, [r7, #27]
 8005870:	e038      	b.n	80058e4 <UART_SetConfig+0x13c>
 8005872:	2302      	movs	r3, #2
 8005874:	76fb      	strb	r3, [r7, #27]
 8005876:	e035      	b.n	80058e4 <UART_SetConfig+0x13c>
 8005878:	2304      	movs	r3, #4
 800587a:	76fb      	strb	r3, [r7, #27]
 800587c:	e032      	b.n	80058e4 <UART_SetConfig+0x13c>
 800587e:	2308      	movs	r3, #8
 8005880:	76fb      	strb	r3, [r7, #27]
 8005882:	e02f      	b.n	80058e4 <UART_SetConfig+0x13c>
 8005884:	2310      	movs	r3, #16
 8005886:	76fb      	strb	r3, [r7, #27]
 8005888:	e02c      	b.n	80058e4 <UART_SetConfig+0x13c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a75      	ldr	r2, [pc, #468]	; (8005a64 <UART_SetConfig+0x2bc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d125      	bne.n	80058e0 <UART_SetConfig+0x138>
 8005894:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005898:	f7ff ff26 	bl	80056e8 <LL_RCC_GetLPUARTClockSource>
 800589c:	4603      	mov	r3, r0
 800589e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058a2:	d017      	beq.n	80058d4 <UART_SetConfig+0x12c>
 80058a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058a8:	d817      	bhi.n	80058da <UART_SetConfig+0x132>
 80058aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ae:	d00b      	beq.n	80058c8 <UART_SetConfig+0x120>
 80058b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b4:	d811      	bhi.n	80058da <UART_SetConfig+0x132>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <UART_SetConfig+0x11a>
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058be:	d006      	beq.n	80058ce <UART_SetConfig+0x126>
 80058c0:	e00b      	b.n	80058da <UART_SetConfig+0x132>
 80058c2:	2300      	movs	r3, #0
 80058c4:	76fb      	strb	r3, [r7, #27]
 80058c6:	e00d      	b.n	80058e4 <UART_SetConfig+0x13c>
 80058c8:	2302      	movs	r3, #2
 80058ca:	76fb      	strb	r3, [r7, #27]
 80058cc:	e00a      	b.n	80058e4 <UART_SetConfig+0x13c>
 80058ce:	2304      	movs	r3, #4
 80058d0:	76fb      	strb	r3, [r7, #27]
 80058d2:	e007      	b.n	80058e4 <UART_SetConfig+0x13c>
 80058d4:	2308      	movs	r3, #8
 80058d6:	76fb      	strb	r3, [r7, #27]
 80058d8:	e004      	b.n	80058e4 <UART_SetConfig+0x13c>
 80058da:	2310      	movs	r3, #16
 80058dc:	76fb      	strb	r3, [r7, #27]
 80058de:	e001      	b.n	80058e4 <UART_SetConfig+0x13c>
 80058e0:	2310      	movs	r3, #16
 80058e2:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a5e      	ldr	r2, [pc, #376]	; (8005a64 <UART_SetConfig+0x2bc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	f040 808b 	bne.w	8005a06 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058f0:	7efb      	ldrb	r3, [r7, #27]
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d823      	bhi.n	800593e <UART_SetConfig+0x196>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <UART_SetConfig+0x154>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005921 	.word	0x08005921
 8005900:	0800593f 	.word	0x0800593f
 8005904:	08005929 	.word	0x08005929
 8005908:	0800593f 	.word	0x0800593f
 800590c:	0800592f 	.word	0x0800592f
 8005910:	0800593f 	.word	0x0800593f
 8005914:	0800593f 	.word	0x0800593f
 8005918:	0800593f 	.word	0x0800593f
 800591c:	08005937 	.word	0x08005937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7fe ff38 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 8005924:	6178      	str	r0, [r7, #20]
        break;
 8005926:	e00f      	b.n	8005948 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005928:	4b50      	ldr	r3, [pc, #320]	; (8005a6c <UART_SetConfig+0x2c4>)
 800592a:	617b      	str	r3, [r7, #20]
        break;
 800592c:	e00c      	b.n	8005948 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592e:	f7fe feb1 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8005932:	6178      	str	r0, [r7, #20]
        break;
 8005934:	e008      	b.n	8005948 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593a:	617b      	str	r3, [r7, #20]
        break;
 800593c:	e004      	b.n	8005948 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	76bb      	strb	r3, [r7, #26]
        break;
 8005946:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 811a 	beq.w	8005b84 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	4a46      	ldr	r2, [pc, #280]	; (8005a70 <UART_SetConfig+0x2c8>)
 8005956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800595a:	461a      	mov	r2, r3
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005962:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	4413      	add	r3, r2
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	429a      	cmp	r2, r3
 8005972:	d305      	bcc.n	8005980 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	429a      	cmp	r2, r3
 800597e:	d902      	bls.n	8005986 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	76bb      	strb	r3, [r7, #26]
 8005984:	e0fe      	b.n	8005b84 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	4618      	mov	r0, r3
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	4a37      	ldr	r2, [pc, #220]	; (8005a70 <UART_SetConfig+0x2c8>)
 8005994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005998:	b29a      	uxth	r2, r3
 800599a:	f04f 0300 	mov.w	r3, #0
 800599e:	f7fb f835 	bl	8000a0c <__aeabi_uldivmod>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4610      	mov	r0, r2
 80059a8:	4619      	mov	r1, r3
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	020b      	lsls	r3, r1, #8
 80059b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059b8:	0202      	lsls	r2, r0, #8
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	6849      	ldr	r1, [r1, #4]
 80059be:	0849      	lsrs	r1, r1, #1
 80059c0:	4608      	mov	r0, r1
 80059c2:	f04f 0100 	mov.w	r1, #0
 80059c6:	1814      	adds	r4, r2, r0
 80059c8:	eb43 0501 	adc.w	r5, r3, r1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	461a      	mov	r2, r3
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	4620      	mov	r0, r4
 80059d8:	4629      	mov	r1, r5
 80059da:	f7fb f817 	bl	8000a0c <__aeabi_uldivmod>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4613      	mov	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ec:	d308      	bcc.n	8005a00 <UART_SetConfig+0x258>
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059f4:	d204      	bcs.n	8005a00 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	60da      	str	r2, [r3, #12]
 80059fe:	e0c1      	b.n	8005b84 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	76bb      	strb	r3, [r7, #26]
 8005a04:	e0be      	b.n	8005b84 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a0e:	d16a      	bne.n	8005ae6 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005a10:	7efb      	ldrb	r3, [r7, #27]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	2b07      	cmp	r3, #7
 8005a16:	d82d      	bhi.n	8005a74 <UART_SetConfig+0x2cc>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <UART_SetConfig+0x278>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a41 	.word	0x08005a41
 8005a24:	08005a49 	.word	0x08005a49
 8005a28:	08005a75 	.word	0x08005a75
 8005a2c:	08005a4f 	.word	0x08005a4f
 8005a30:	08005a75 	.word	0x08005a75
 8005a34:	08005a75 	.word	0x08005a75
 8005a38:	08005a75 	.word	0x08005a75
 8005a3c:	08005a57 	.word	0x08005a57
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a40:	f7fe febe 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 8005a44:	6178      	str	r0, [r7, #20]
        break;
 8005a46:	e01a      	b.n	8005a7e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a48:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <UART_SetConfig+0x2c4>)
 8005a4a:	617b      	str	r3, [r7, #20]
        break;
 8005a4c:	e017      	b.n	8005a7e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a4e:	f7fe fe21 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8005a52:	6178      	str	r0, [r7, #20]
        break;
 8005a54:	e013      	b.n	8005a7e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a5a:	617b      	str	r3, [r7, #20]
        break;
 8005a5c:	e00f      	b.n	8005a7e <UART_SetConfig+0x2d6>
 8005a5e:	bf00      	nop
 8005a60:	cfff69f3 	.word	0xcfff69f3
 8005a64:	40008000 	.word	0x40008000
 8005a68:	40013800 	.word	0x40013800
 8005a6c:	00f42400 	.word	0x00f42400
 8005a70:	08007198 	.word	0x08007198
      default:
        pclk = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	76bb      	strb	r3, [r7, #26]
        break;
 8005a7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d07f      	beq.n	8005b84 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	4a48      	ldr	r2, [pc, #288]	; (8005bac <UART_SetConfig+0x404>)
 8005a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a96:	005a      	lsls	r2, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	441a      	add	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2b0f      	cmp	r3, #15
 8005ab0:	d916      	bls.n	8005ae0 <UART_SetConfig+0x338>
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab8:	d212      	bcs.n	8005ae0 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f023 030f 	bic.w	r3, r3, #15
 8005ac2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	085b      	lsrs	r3, r3, #1
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	89fb      	ldrh	r3, [r7, #14]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	89fa      	ldrh	r2, [r7, #14]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	e051      	b.n	8005b84 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	76bb      	strb	r3, [r7, #26]
 8005ae4:	e04e      	b.n	8005b84 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ae6:	7efb      	ldrb	r3, [r7, #27]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	2b07      	cmp	r3, #7
 8005aec:	d821      	bhi.n	8005b32 <UART_SetConfig+0x38a>
 8005aee:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <UART_SetConfig+0x34c>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b15 	.word	0x08005b15
 8005af8:	08005b1d 	.word	0x08005b1d
 8005afc:	08005b33 	.word	0x08005b33
 8005b00:	08005b23 	.word	0x08005b23
 8005b04:	08005b33 	.word	0x08005b33
 8005b08:	08005b33 	.word	0x08005b33
 8005b0c:	08005b33 	.word	0x08005b33
 8005b10:	08005b2b 	.word	0x08005b2b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b14:	f7fe fe54 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 8005b18:	6178      	str	r0, [r7, #20]
        break;
 8005b1a:	e00f      	b.n	8005b3c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b1c:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <UART_SetConfig+0x408>)
 8005b1e:	617b      	str	r3, [r7, #20]
        break;
 8005b20:	e00c      	b.n	8005b3c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b22:	f7fe fdb7 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8005b26:	6178      	str	r0, [r7, #20]
        break;
 8005b28:	e008      	b.n	8005b3c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b2e:	617b      	str	r3, [r7, #20]
        break;
 8005b30:	e004      	b.n	8005b3c <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	76bb      	strb	r3, [r7, #26]
        break;
 8005b3a:	bf00      	nop
    }

    if (pclk != 0U)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d020      	beq.n	8005b84 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	4a19      	ldr	r2, [pc, #100]	; (8005bac <UART_SetConfig+0x404>)
 8005b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	085b      	lsrs	r3, r3, #1
 8005b5a:	441a      	add	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b0f      	cmp	r3, #15
 8005b6c:	d908      	bls.n	8005b80 <UART_SetConfig+0x3d8>
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b74:	d204      	bcs.n	8005b80 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	e001      	b.n	8005b84 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005ba0:	7ebb      	ldrb	r3, [r7, #26]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8005baa:	bf00      	nop
 8005bac:	08007198 	.word	0x08007198
 8005bb0:	00f42400 	.word	0x00f42400

08005bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01a      	beq.n	8005cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb2:	d10a      	bne.n	8005cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	605a      	str	r2, [r3, #4]
  }
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d08:	f7fc fa48 	bl	800219c <HAL_GetTick>
 8005d0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d10e      	bne.n	8005d3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f82f 	bl	8005d8e <UART_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e025      	b.n	8005d86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d10e      	bne.n	8005d66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f819 	bl	8005d8e <UART_WaitOnFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e00f      	b.n	8005d86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9e:	e062      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d05e      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da8:	f7fc f9f8 	bl	800219c <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d302      	bcc.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x30>
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d11d      	bne.n	8005dfa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dcc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0201 	bic.w	r2, r2, #1
 8005ddc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e045      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d02e      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e16:	d126      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e30:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e00f      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d08d      	beq.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b085      	sub	sp, #20
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e027      	b.n	8005ef4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2224      	movs	r2, #36	; 0x24
 8005eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0201 	bic.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ed2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e02d      	b.n	8005f74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2224      	movs	r2, #36	; 0x24
 8005f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f84f 	bl	8005ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e02d      	b.n	8005ff0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2224      	movs	r2, #36	; 0x24
 8005fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0201 	bic.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f811 	bl	8005ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006004:	2b00      	cmp	r3, #0
 8006006:	d108      	bne.n	800601a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006018:	e031      	b.n	800607e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800601a:	2308      	movs	r3, #8
 800601c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800601e:	2308      	movs	r3, #8
 8006020:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	0e5b      	lsrs	r3, r3, #25
 800602a:	b2db      	uxtb	r3, r3
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	0f5b      	lsrs	r3, r3, #29
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006042:	7bbb      	ldrb	r3, [r7, #14]
 8006044:	7b3a      	ldrb	r2, [r7, #12]
 8006046:	4911      	ldr	r1, [pc, #68]	; (800608c <UARTEx_SetNbDataToProcess+0x94>)
 8006048:	5c8a      	ldrb	r2, [r1, r2]
 800604a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800604e:	7b3a      	ldrb	r2, [r7, #12]
 8006050:	490f      	ldr	r1, [pc, #60]	; (8006090 <UARTEx_SetNbDataToProcess+0x98>)
 8006052:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006054:	fb93 f3f2 	sdiv	r3, r3, r2
 8006058:	b29a      	uxth	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	7b7a      	ldrb	r2, [r7, #13]
 8006064:	4909      	ldr	r1, [pc, #36]	; (800608c <UARTEx_SetNbDataToProcess+0x94>)
 8006066:	5c8a      	ldrb	r2, [r1, r2]
 8006068:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800606c:	7b7a      	ldrb	r2, [r7, #13]
 800606e:	4908      	ldr	r1, [pc, #32]	; (8006090 <UARTEx_SetNbDataToProcess+0x98>)
 8006070:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006072:	fb93 f3f2 	sdiv	r3, r3, r2
 8006076:	b29a      	uxth	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800607e:	bf00      	nop
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	080071b0 	.word	0x080071b0
 8006090:	080071b8 	.word	0x080071b8

08006094 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800609c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80060a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	43db      	mvns	r3, r3
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	4013      	ands	r3, r2
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80060ca:	b084      	sub	sp, #16
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	f107 0014 	add.w	r0, r7, #20
 80060d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	b004      	add	sp, #16
 800610a:	4770      	bx	lr

0800610c <__errno>:
 800610c:	4b01      	ldr	r3, [pc, #4]	; (8006114 <__errno+0x8>)
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000018 	.word	0x20000018

08006118 <__libc_init_array>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4d0d      	ldr	r5, [pc, #52]	; (8006150 <__libc_init_array+0x38>)
 800611c:	4c0d      	ldr	r4, [pc, #52]	; (8006154 <__libc_init_array+0x3c>)
 800611e:	1b64      	subs	r4, r4, r5
 8006120:	10a4      	asrs	r4, r4, #2
 8006122:	2600      	movs	r6, #0
 8006124:	42a6      	cmp	r6, r4
 8006126:	d109      	bne.n	800613c <__libc_init_array+0x24>
 8006128:	4d0b      	ldr	r5, [pc, #44]	; (8006158 <__libc_init_array+0x40>)
 800612a:	4c0c      	ldr	r4, [pc, #48]	; (800615c <__libc_init_array+0x44>)
 800612c:	f000 fc4e 	bl	80069cc <_init>
 8006130:	1b64      	subs	r4, r4, r5
 8006132:	10a4      	asrs	r4, r4, #2
 8006134:	2600      	movs	r6, #0
 8006136:	42a6      	cmp	r6, r4
 8006138:	d105      	bne.n	8006146 <__libc_init_array+0x2e>
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006140:	4798      	blx	r3
 8006142:	3601      	adds	r6, #1
 8006144:	e7ee      	b.n	8006124 <__libc_init_array+0xc>
 8006146:	f855 3b04 	ldr.w	r3, [r5], #4
 800614a:	4798      	blx	r3
 800614c:	3601      	adds	r6, #1
 800614e:	e7f2      	b.n	8006136 <__libc_init_array+0x1e>
 8006150:	080071fc 	.word	0x080071fc
 8006154:	080071fc 	.word	0x080071fc
 8006158:	080071fc 	.word	0x080071fc
 800615c:	08007200 	.word	0x08007200

08006160 <memcpy>:
 8006160:	440a      	add	r2, r1
 8006162:	4291      	cmp	r1, r2
 8006164:	f100 33ff 	add.w	r3, r0, #4294967295
 8006168:	d100      	bne.n	800616c <memcpy+0xc>
 800616a:	4770      	bx	lr
 800616c:	b510      	push	{r4, lr}
 800616e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006176:	4291      	cmp	r1, r2
 8006178:	d1f9      	bne.n	800616e <memcpy+0xe>
 800617a:	bd10      	pop	{r4, pc}

0800617c <memmove>:
 800617c:	4288      	cmp	r0, r1
 800617e:	b510      	push	{r4, lr}
 8006180:	eb01 0402 	add.w	r4, r1, r2
 8006184:	d902      	bls.n	800618c <memmove+0x10>
 8006186:	4284      	cmp	r4, r0
 8006188:	4623      	mov	r3, r4
 800618a:	d807      	bhi.n	800619c <memmove+0x20>
 800618c:	1e43      	subs	r3, r0, #1
 800618e:	42a1      	cmp	r1, r4
 8006190:	d008      	beq.n	80061a4 <memmove+0x28>
 8006192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800619a:	e7f8      	b.n	800618e <memmove+0x12>
 800619c:	4402      	add	r2, r0
 800619e:	4601      	mov	r1, r0
 80061a0:	428a      	cmp	r2, r1
 80061a2:	d100      	bne.n	80061a6 <memmove+0x2a>
 80061a4:	bd10      	pop	{r4, pc}
 80061a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ae:	e7f7      	b.n	80061a0 <memmove+0x24>

080061b0 <memset>:
 80061b0:	4402      	add	r2, r0
 80061b2:	4603      	mov	r3, r0
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d100      	bne.n	80061ba <memset+0xa>
 80061b8:	4770      	bx	lr
 80061ba:	f803 1b01 	strb.w	r1, [r3], #1
 80061be:	e7f9      	b.n	80061b4 <memset+0x4>

080061c0 <siprintf>:
 80061c0:	b40e      	push	{r1, r2, r3}
 80061c2:	b500      	push	{lr}
 80061c4:	b09c      	sub	sp, #112	; 0x70
 80061c6:	ab1d      	add	r3, sp, #116	; 0x74
 80061c8:	9002      	str	r0, [sp, #8]
 80061ca:	9006      	str	r0, [sp, #24]
 80061cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061d0:	4809      	ldr	r0, [pc, #36]	; (80061f8 <siprintf+0x38>)
 80061d2:	9107      	str	r1, [sp, #28]
 80061d4:	9104      	str	r1, [sp, #16]
 80061d6:	4909      	ldr	r1, [pc, #36]	; (80061fc <siprintf+0x3c>)
 80061d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061dc:	9105      	str	r1, [sp, #20]
 80061de:	6800      	ldr	r0, [r0, #0]
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	a902      	add	r1, sp, #8
 80061e4:	f000 f868 	bl	80062b8 <_svfiprintf_r>
 80061e8:	9b02      	ldr	r3, [sp, #8]
 80061ea:	2200      	movs	r2, #0
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	b01c      	add	sp, #112	; 0x70
 80061f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f4:	b003      	add	sp, #12
 80061f6:	4770      	bx	lr
 80061f8:	20000018 	.word	0x20000018
 80061fc:	ffff0208 	.word	0xffff0208

08006200 <__ssputs_r>:
 8006200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006204:	688e      	ldr	r6, [r1, #8]
 8006206:	429e      	cmp	r6, r3
 8006208:	4682      	mov	sl, r0
 800620a:	460c      	mov	r4, r1
 800620c:	4690      	mov	r8, r2
 800620e:	461f      	mov	r7, r3
 8006210:	d838      	bhi.n	8006284 <__ssputs_r+0x84>
 8006212:	898a      	ldrh	r2, [r1, #12]
 8006214:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006218:	d032      	beq.n	8006280 <__ssputs_r+0x80>
 800621a:	6825      	ldr	r5, [r4, #0]
 800621c:	6909      	ldr	r1, [r1, #16]
 800621e:	eba5 0901 	sub.w	r9, r5, r1
 8006222:	6965      	ldr	r5, [r4, #20]
 8006224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800622c:	3301      	adds	r3, #1
 800622e:	444b      	add	r3, r9
 8006230:	106d      	asrs	r5, r5, #1
 8006232:	429d      	cmp	r5, r3
 8006234:	bf38      	it	cc
 8006236:	461d      	movcc	r5, r3
 8006238:	0553      	lsls	r3, r2, #21
 800623a:	d531      	bpl.n	80062a0 <__ssputs_r+0xa0>
 800623c:	4629      	mov	r1, r5
 800623e:	f000 fb1f 	bl	8006880 <_malloc_r>
 8006242:	4606      	mov	r6, r0
 8006244:	b950      	cbnz	r0, 800625c <__ssputs_r+0x5c>
 8006246:	230c      	movs	r3, #12
 8006248:	f8ca 3000 	str.w	r3, [sl]
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006252:	81a3      	strh	r3, [r4, #12]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625c:	6921      	ldr	r1, [r4, #16]
 800625e:	464a      	mov	r2, r9
 8006260:	f7ff ff7e 	bl	8006160 <memcpy>
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800626a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626e:	81a3      	strh	r3, [r4, #12]
 8006270:	6126      	str	r6, [r4, #16]
 8006272:	6165      	str	r5, [r4, #20]
 8006274:	444e      	add	r6, r9
 8006276:	eba5 0509 	sub.w	r5, r5, r9
 800627a:	6026      	str	r6, [r4, #0]
 800627c:	60a5      	str	r5, [r4, #8]
 800627e:	463e      	mov	r6, r7
 8006280:	42be      	cmp	r6, r7
 8006282:	d900      	bls.n	8006286 <__ssputs_r+0x86>
 8006284:	463e      	mov	r6, r7
 8006286:	4632      	mov	r2, r6
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	4641      	mov	r1, r8
 800628c:	f7ff ff76 	bl	800617c <memmove>
 8006290:	68a3      	ldr	r3, [r4, #8]
 8006292:	6822      	ldr	r2, [r4, #0]
 8006294:	1b9b      	subs	r3, r3, r6
 8006296:	4432      	add	r2, r6
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	6022      	str	r2, [r4, #0]
 800629c:	2000      	movs	r0, #0
 800629e:	e7db      	b.n	8006258 <__ssputs_r+0x58>
 80062a0:	462a      	mov	r2, r5
 80062a2:	f000 fb47 	bl	8006934 <_realloc_r>
 80062a6:	4606      	mov	r6, r0
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d1e1      	bne.n	8006270 <__ssputs_r+0x70>
 80062ac:	6921      	ldr	r1, [r4, #16]
 80062ae:	4650      	mov	r0, sl
 80062b0:	f000 fa96 	bl	80067e0 <_free_r>
 80062b4:	e7c7      	b.n	8006246 <__ssputs_r+0x46>
	...

080062b8 <_svfiprintf_r>:
 80062b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	4698      	mov	r8, r3
 80062be:	898b      	ldrh	r3, [r1, #12]
 80062c0:	061b      	lsls	r3, r3, #24
 80062c2:	b09d      	sub	sp, #116	; 0x74
 80062c4:	4607      	mov	r7, r0
 80062c6:	460d      	mov	r5, r1
 80062c8:	4614      	mov	r4, r2
 80062ca:	d50e      	bpl.n	80062ea <_svfiprintf_r+0x32>
 80062cc:	690b      	ldr	r3, [r1, #16]
 80062ce:	b963      	cbnz	r3, 80062ea <_svfiprintf_r+0x32>
 80062d0:	2140      	movs	r1, #64	; 0x40
 80062d2:	f000 fad5 	bl	8006880 <_malloc_r>
 80062d6:	6028      	str	r0, [r5, #0]
 80062d8:	6128      	str	r0, [r5, #16]
 80062da:	b920      	cbnz	r0, 80062e6 <_svfiprintf_r+0x2e>
 80062dc:	230c      	movs	r3, #12
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	f04f 30ff 	mov.w	r0, #4294967295
 80062e4:	e0d1      	b.n	800648a <_svfiprintf_r+0x1d2>
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	616b      	str	r3, [r5, #20]
 80062ea:	2300      	movs	r3, #0
 80062ec:	9309      	str	r3, [sp, #36]	; 0x24
 80062ee:	2320      	movs	r3, #32
 80062f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80062f8:	2330      	movs	r3, #48	; 0x30
 80062fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80064a4 <_svfiprintf_r+0x1ec>
 80062fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006302:	f04f 0901 	mov.w	r9, #1
 8006306:	4623      	mov	r3, r4
 8006308:	469a      	mov	sl, r3
 800630a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800630e:	b10a      	cbz	r2, 8006314 <_svfiprintf_r+0x5c>
 8006310:	2a25      	cmp	r2, #37	; 0x25
 8006312:	d1f9      	bne.n	8006308 <_svfiprintf_r+0x50>
 8006314:	ebba 0b04 	subs.w	fp, sl, r4
 8006318:	d00b      	beq.n	8006332 <_svfiprintf_r+0x7a>
 800631a:	465b      	mov	r3, fp
 800631c:	4622      	mov	r2, r4
 800631e:	4629      	mov	r1, r5
 8006320:	4638      	mov	r0, r7
 8006322:	f7ff ff6d 	bl	8006200 <__ssputs_r>
 8006326:	3001      	adds	r0, #1
 8006328:	f000 80aa 	beq.w	8006480 <_svfiprintf_r+0x1c8>
 800632c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800632e:	445a      	add	r2, fp
 8006330:	9209      	str	r2, [sp, #36]	; 0x24
 8006332:	f89a 3000 	ldrb.w	r3, [sl]
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 80a2 	beq.w	8006480 <_svfiprintf_r+0x1c8>
 800633c:	2300      	movs	r3, #0
 800633e:	f04f 32ff 	mov.w	r2, #4294967295
 8006342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006346:	f10a 0a01 	add.w	sl, sl, #1
 800634a:	9304      	str	r3, [sp, #16]
 800634c:	9307      	str	r3, [sp, #28]
 800634e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006352:	931a      	str	r3, [sp, #104]	; 0x68
 8006354:	4654      	mov	r4, sl
 8006356:	2205      	movs	r2, #5
 8006358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800635c:	4851      	ldr	r0, [pc, #324]	; (80064a4 <_svfiprintf_r+0x1ec>)
 800635e:	f7f9 ff0f 	bl	8000180 <memchr>
 8006362:	9a04      	ldr	r2, [sp, #16]
 8006364:	b9d8      	cbnz	r0, 800639e <_svfiprintf_r+0xe6>
 8006366:	06d0      	lsls	r0, r2, #27
 8006368:	bf44      	itt	mi
 800636a:	2320      	movmi	r3, #32
 800636c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006370:	0711      	lsls	r1, r2, #28
 8006372:	bf44      	itt	mi
 8006374:	232b      	movmi	r3, #43	; 0x2b
 8006376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800637a:	f89a 3000 	ldrb.w	r3, [sl]
 800637e:	2b2a      	cmp	r3, #42	; 0x2a
 8006380:	d015      	beq.n	80063ae <_svfiprintf_r+0xf6>
 8006382:	9a07      	ldr	r2, [sp, #28]
 8006384:	4654      	mov	r4, sl
 8006386:	2000      	movs	r0, #0
 8006388:	f04f 0c0a 	mov.w	ip, #10
 800638c:	4621      	mov	r1, r4
 800638e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006392:	3b30      	subs	r3, #48	; 0x30
 8006394:	2b09      	cmp	r3, #9
 8006396:	d94e      	bls.n	8006436 <_svfiprintf_r+0x17e>
 8006398:	b1b0      	cbz	r0, 80063c8 <_svfiprintf_r+0x110>
 800639a:	9207      	str	r2, [sp, #28]
 800639c:	e014      	b.n	80063c8 <_svfiprintf_r+0x110>
 800639e:	eba0 0308 	sub.w	r3, r0, r8
 80063a2:	fa09 f303 	lsl.w	r3, r9, r3
 80063a6:	4313      	orrs	r3, r2
 80063a8:	9304      	str	r3, [sp, #16]
 80063aa:	46a2      	mov	sl, r4
 80063ac:	e7d2      	b.n	8006354 <_svfiprintf_r+0x9c>
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	1d19      	adds	r1, r3, #4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	9103      	str	r1, [sp, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfbb      	ittet	lt
 80063ba:	425b      	neglt	r3, r3
 80063bc:	f042 0202 	orrlt.w	r2, r2, #2
 80063c0:	9307      	strge	r3, [sp, #28]
 80063c2:	9307      	strlt	r3, [sp, #28]
 80063c4:	bfb8      	it	lt
 80063c6:	9204      	strlt	r2, [sp, #16]
 80063c8:	7823      	ldrb	r3, [r4, #0]
 80063ca:	2b2e      	cmp	r3, #46	; 0x2e
 80063cc:	d10c      	bne.n	80063e8 <_svfiprintf_r+0x130>
 80063ce:	7863      	ldrb	r3, [r4, #1]
 80063d0:	2b2a      	cmp	r3, #42	; 0x2a
 80063d2:	d135      	bne.n	8006440 <_svfiprintf_r+0x188>
 80063d4:	9b03      	ldr	r3, [sp, #12]
 80063d6:	1d1a      	adds	r2, r3, #4
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	9203      	str	r2, [sp, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bfb8      	it	lt
 80063e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80063e4:	3402      	adds	r4, #2
 80063e6:	9305      	str	r3, [sp, #20]
 80063e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064b4 <_svfiprintf_r+0x1fc>
 80063ec:	7821      	ldrb	r1, [r4, #0]
 80063ee:	2203      	movs	r2, #3
 80063f0:	4650      	mov	r0, sl
 80063f2:	f7f9 fec5 	bl	8000180 <memchr>
 80063f6:	b140      	cbz	r0, 800640a <_svfiprintf_r+0x152>
 80063f8:	2340      	movs	r3, #64	; 0x40
 80063fa:	eba0 000a 	sub.w	r0, r0, sl
 80063fe:	fa03 f000 	lsl.w	r0, r3, r0
 8006402:	9b04      	ldr	r3, [sp, #16]
 8006404:	4303      	orrs	r3, r0
 8006406:	3401      	adds	r4, #1
 8006408:	9304      	str	r3, [sp, #16]
 800640a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640e:	4826      	ldr	r0, [pc, #152]	; (80064a8 <_svfiprintf_r+0x1f0>)
 8006410:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006414:	2206      	movs	r2, #6
 8006416:	f7f9 feb3 	bl	8000180 <memchr>
 800641a:	2800      	cmp	r0, #0
 800641c:	d038      	beq.n	8006490 <_svfiprintf_r+0x1d8>
 800641e:	4b23      	ldr	r3, [pc, #140]	; (80064ac <_svfiprintf_r+0x1f4>)
 8006420:	bb1b      	cbnz	r3, 800646a <_svfiprintf_r+0x1b2>
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	3307      	adds	r3, #7
 8006426:	f023 0307 	bic.w	r3, r3, #7
 800642a:	3308      	adds	r3, #8
 800642c:	9303      	str	r3, [sp, #12]
 800642e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006430:	4433      	add	r3, r6
 8006432:	9309      	str	r3, [sp, #36]	; 0x24
 8006434:	e767      	b.n	8006306 <_svfiprintf_r+0x4e>
 8006436:	fb0c 3202 	mla	r2, ip, r2, r3
 800643a:	460c      	mov	r4, r1
 800643c:	2001      	movs	r0, #1
 800643e:	e7a5      	b.n	800638c <_svfiprintf_r+0xd4>
 8006440:	2300      	movs	r3, #0
 8006442:	3401      	adds	r4, #1
 8006444:	9305      	str	r3, [sp, #20]
 8006446:	4619      	mov	r1, r3
 8006448:	f04f 0c0a 	mov.w	ip, #10
 800644c:	4620      	mov	r0, r4
 800644e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006452:	3a30      	subs	r2, #48	; 0x30
 8006454:	2a09      	cmp	r2, #9
 8006456:	d903      	bls.n	8006460 <_svfiprintf_r+0x1a8>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0c5      	beq.n	80063e8 <_svfiprintf_r+0x130>
 800645c:	9105      	str	r1, [sp, #20]
 800645e:	e7c3      	b.n	80063e8 <_svfiprintf_r+0x130>
 8006460:	fb0c 2101 	mla	r1, ip, r1, r2
 8006464:	4604      	mov	r4, r0
 8006466:	2301      	movs	r3, #1
 8006468:	e7f0      	b.n	800644c <_svfiprintf_r+0x194>
 800646a:	ab03      	add	r3, sp, #12
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	462a      	mov	r2, r5
 8006470:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <_svfiprintf_r+0x1f8>)
 8006472:	a904      	add	r1, sp, #16
 8006474:	4638      	mov	r0, r7
 8006476:	f3af 8000 	nop.w
 800647a:	1c42      	adds	r2, r0, #1
 800647c:	4606      	mov	r6, r0
 800647e:	d1d6      	bne.n	800642e <_svfiprintf_r+0x176>
 8006480:	89ab      	ldrh	r3, [r5, #12]
 8006482:	065b      	lsls	r3, r3, #25
 8006484:	f53f af2c 	bmi.w	80062e0 <_svfiprintf_r+0x28>
 8006488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800648a:	b01d      	add	sp, #116	; 0x74
 800648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006490:	ab03      	add	r3, sp, #12
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	462a      	mov	r2, r5
 8006496:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <_svfiprintf_r+0x1f8>)
 8006498:	a904      	add	r1, sp, #16
 800649a:	4638      	mov	r0, r7
 800649c:	f000 f87a 	bl	8006594 <_printf_i>
 80064a0:	e7eb      	b.n	800647a <_svfiprintf_r+0x1c2>
 80064a2:	bf00      	nop
 80064a4:	080071c0 	.word	0x080071c0
 80064a8:	080071ca 	.word	0x080071ca
 80064ac:	00000000 	.word	0x00000000
 80064b0:	08006201 	.word	0x08006201
 80064b4:	080071c6 	.word	0x080071c6

080064b8 <_printf_common>:
 80064b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	4616      	mov	r6, r2
 80064be:	4699      	mov	r9, r3
 80064c0:	688a      	ldr	r2, [r1, #8]
 80064c2:	690b      	ldr	r3, [r1, #16]
 80064c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064c8:	4293      	cmp	r3, r2
 80064ca:	bfb8      	it	lt
 80064cc:	4613      	movlt	r3, r2
 80064ce:	6033      	str	r3, [r6, #0]
 80064d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064d4:	4607      	mov	r7, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	b10a      	cbz	r2, 80064de <_printf_common+0x26>
 80064da:	3301      	adds	r3, #1
 80064dc:	6033      	str	r3, [r6, #0]
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	0699      	lsls	r1, r3, #26
 80064e2:	bf42      	ittt	mi
 80064e4:	6833      	ldrmi	r3, [r6, #0]
 80064e6:	3302      	addmi	r3, #2
 80064e8:	6033      	strmi	r3, [r6, #0]
 80064ea:	6825      	ldr	r5, [r4, #0]
 80064ec:	f015 0506 	ands.w	r5, r5, #6
 80064f0:	d106      	bne.n	8006500 <_printf_common+0x48>
 80064f2:	f104 0a19 	add.w	sl, r4, #25
 80064f6:	68e3      	ldr	r3, [r4, #12]
 80064f8:	6832      	ldr	r2, [r6, #0]
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	42ab      	cmp	r3, r5
 80064fe:	dc26      	bgt.n	800654e <_printf_common+0x96>
 8006500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006504:	1e13      	subs	r3, r2, #0
 8006506:	6822      	ldr	r2, [r4, #0]
 8006508:	bf18      	it	ne
 800650a:	2301      	movne	r3, #1
 800650c:	0692      	lsls	r2, r2, #26
 800650e:	d42b      	bmi.n	8006568 <_printf_common+0xb0>
 8006510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006514:	4649      	mov	r1, r9
 8006516:	4638      	mov	r0, r7
 8006518:	47c0      	blx	r8
 800651a:	3001      	adds	r0, #1
 800651c:	d01e      	beq.n	800655c <_printf_common+0xa4>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	68e5      	ldr	r5, [r4, #12]
 8006522:	6832      	ldr	r2, [r6, #0]
 8006524:	f003 0306 	and.w	r3, r3, #6
 8006528:	2b04      	cmp	r3, #4
 800652a:	bf08      	it	eq
 800652c:	1aad      	subeq	r5, r5, r2
 800652e:	68a3      	ldr	r3, [r4, #8]
 8006530:	6922      	ldr	r2, [r4, #16]
 8006532:	bf0c      	ite	eq
 8006534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006538:	2500      	movne	r5, #0
 800653a:	4293      	cmp	r3, r2
 800653c:	bfc4      	itt	gt
 800653e:	1a9b      	subgt	r3, r3, r2
 8006540:	18ed      	addgt	r5, r5, r3
 8006542:	2600      	movs	r6, #0
 8006544:	341a      	adds	r4, #26
 8006546:	42b5      	cmp	r5, r6
 8006548:	d11a      	bne.n	8006580 <_printf_common+0xc8>
 800654a:	2000      	movs	r0, #0
 800654c:	e008      	b.n	8006560 <_printf_common+0xa8>
 800654e:	2301      	movs	r3, #1
 8006550:	4652      	mov	r2, sl
 8006552:	4649      	mov	r1, r9
 8006554:	4638      	mov	r0, r7
 8006556:	47c0      	blx	r8
 8006558:	3001      	adds	r0, #1
 800655a:	d103      	bne.n	8006564 <_printf_common+0xac>
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006564:	3501      	adds	r5, #1
 8006566:	e7c6      	b.n	80064f6 <_printf_common+0x3e>
 8006568:	18e1      	adds	r1, r4, r3
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	2030      	movs	r0, #48	; 0x30
 800656e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006572:	4422      	add	r2, r4
 8006574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800657c:	3302      	adds	r3, #2
 800657e:	e7c7      	b.n	8006510 <_printf_common+0x58>
 8006580:	2301      	movs	r3, #1
 8006582:	4622      	mov	r2, r4
 8006584:	4649      	mov	r1, r9
 8006586:	4638      	mov	r0, r7
 8006588:	47c0      	blx	r8
 800658a:	3001      	adds	r0, #1
 800658c:	d0e6      	beq.n	800655c <_printf_common+0xa4>
 800658e:	3601      	adds	r6, #1
 8006590:	e7d9      	b.n	8006546 <_printf_common+0x8e>
	...

08006594 <_printf_i>:
 8006594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	460c      	mov	r4, r1
 800659a:	4691      	mov	r9, r2
 800659c:	7e27      	ldrb	r7, [r4, #24]
 800659e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065a0:	2f78      	cmp	r7, #120	; 0x78
 80065a2:	4680      	mov	r8, r0
 80065a4:	469a      	mov	sl, r3
 80065a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065aa:	d807      	bhi.n	80065bc <_printf_i+0x28>
 80065ac:	2f62      	cmp	r7, #98	; 0x62
 80065ae:	d80a      	bhi.n	80065c6 <_printf_i+0x32>
 80065b0:	2f00      	cmp	r7, #0
 80065b2:	f000 80d8 	beq.w	8006766 <_printf_i+0x1d2>
 80065b6:	2f58      	cmp	r7, #88	; 0x58
 80065b8:	f000 80a3 	beq.w	8006702 <_printf_i+0x16e>
 80065bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065c4:	e03a      	b.n	800663c <_printf_i+0xa8>
 80065c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ca:	2b15      	cmp	r3, #21
 80065cc:	d8f6      	bhi.n	80065bc <_printf_i+0x28>
 80065ce:	a001      	add	r0, pc, #4	; (adr r0, 80065d4 <_printf_i+0x40>)
 80065d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80065d4:	0800662d 	.word	0x0800662d
 80065d8:	08006641 	.word	0x08006641
 80065dc:	080065bd 	.word	0x080065bd
 80065e0:	080065bd 	.word	0x080065bd
 80065e4:	080065bd 	.word	0x080065bd
 80065e8:	080065bd 	.word	0x080065bd
 80065ec:	08006641 	.word	0x08006641
 80065f0:	080065bd 	.word	0x080065bd
 80065f4:	080065bd 	.word	0x080065bd
 80065f8:	080065bd 	.word	0x080065bd
 80065fc:	080065bd 	.word	0x080065bd
 8006600:	0800674d 	.word	0x0800674d
 8006604:	08006671 	.word	0x08006671
 8006608:	0800672f 	.word	0x0800672f
 800660c:	080065bd 	.word	0x080065bd
 8006610:	080065bd 	.word	0x080065bd
 8006614:	0800676f 	.word	0x0800676f
 8006618:	080065bd 	.word	0x080065bd
 800661c:	08006671 	.word	0x08006671
 8006620:	080065bd 	.word	0x080065bd
 8006624:	080065bd 	.word	0x080065bd
 8006628:	08006737 	.word	0x08006737
 800662c:	680b      	ldr	r3, [r1, #0]
 800662e:	1d1a      	adds	r2, r3, #4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	600a      	str	r2, [r1, #0]
 8006634:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800663c:	2301      	movs	r3, #1
 800663e:	e0a3      	b.n	8006788 <_printf_i+0x1f4>
 8006640:	6825      	ldr	r5, [r4, #0]
 8006642:	6808      	ldr	r0, [r1, #0]
 8006644:	062e      	lsls	r6, r5, #24
 8006646:	f100 0304 	add.w	r3, r0, #4
 800664a:	d50a      	bpl.n	8006662 <_printf_i+0xce>
 800664c:	6805      	ldr	r5, [r0, #0]
 800664e:	600b      	str	r3, [r1, #0]
 8006650:	2d00      	cmp	r5, #0
 8006652:	da03      	bge.n	800665c <_printf_i+0xc8>
 8006654:	232d      	movs	r3, #45	; 0x2d
 8006656:	426d      	negs	r5, r5
 8006658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800665c:	485e      	ldr	r0, [pc, #376]	; (80067d8 <_printf_i+0x244>)
 800665e:	230a      	movs	r3, #10
 8006660:	e019      	b.n	8006696 <_printf_i+0x102>
 8006662:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006666:	6805      	ldr	r5, [r0, #0]
 8006668:	600b      	str	r3, [r1, #0]
 800666a:	bf18      	it	ne
 800666c:	b22d      	sxthne	r5, r5
 800666e:	e7ef      	b.n	8006650 <_printf_i+0xbc>
 8006670:	680b      	ldr	r3, [r1, #0]
 8006672:	6825      	ldr	r5, [r4, #0]
 8006674:	1d18      	adds	r0, r3, #4
 8006676:	6008      	str	r0, [r1, #0]
 8006678:	0628      	lsls	r0, r5, #24
 800667a:	d501      	bpl.n	8006680 <_printf_i+0xec>
 800667c:	681d      	ldr	r5, [r3, #0]
 800667e:	e002      	b.n	8006686 <_printf_i+0xf2>
 8006680:	0669      	lsls	r1, r5, #25
 8006682:	d5fb      	bpl.n	800667c <_printf_i+0xe8>
 8006684:	881d      	ldrh	r5, [r3, #0]
 8006686:	4854      	ldr	r0, [pc, #336]	; (80067d8 <_printf_i+0x244>)
 8006688:	2f6f      	cmp	r7, #111	; 0x6f
 800668a:	bf0c      	ite	eq
 800668c:	2308      	moveq	r3, #8
 800668e:	230a      	movne	r3, #10
 8006690:	2100      	movs	r1, #0
 8006692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006696:	6866      	ldr	r6, [r4, #4]
 8006698:	60a6      	str	r6, [r4, #8]
 800669a:	2e00      	cmp	r6, #0
 800669c:	bfa2      	ittt	ge
 800669e:	6821      	ldrge	r1, [r4, #0]
 80066a0:	f021 0104 	bicge.w	r1, r1, #4
 80066a4:	6021      	strge	r1, [r4, #0]
 80066a6:	b90d      	cbnz	r5, 80066ac <_printf_i+0x118>
 80066a8:	2e00      	cmp	r6, #0
 80066aa:	d04d      	beq.n	8006748 <_printf_i+0x1b4>
 80066ac:	4616      	mov	r6, r2
 80066ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80066b2:	fb03 5711 	mls	r7, r3, r1, r5
 80066b6:	5dc7      	ldrb	r7, [r0, r7]
 80066b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066bc:	462f      	mov	r7, r5
 80066be:	42bb      	cmp	r3, r7
 80066c0:	460d      	mov	r5, r1
 80066c2:	d9f4      	bls.n	80066ae <_printf_i+0x11a>
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d10b      	bne.n	80066e0 <_printf_i+0x14c>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	07df      	lsls	r7, r3, #31
 80066cc:	d508      	bpl.n	80066e0 <_printf_i+0x14c>
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	6861      	ldr	r1, [r4, #4]
 80066d2:	4299      	cmp	r1, r3
 80066d4:	bfde      	ittt	le
 80066d6:	2330      	movle	r3, #48	; 0x30
 80066d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066e0:	1b92      	subs	r2, r2, r6
 80066e2:	6122      	str	r2, [r4, #16]
 80066e4:	f8cd a000 	str.w	sl, [sp]
 80066e8:	464b      	mov	r3, r9
 80066ea:	aa03      	add	r2, sp, #12
 80066ec:	4621      	mov	r1, r4
 80066ee:	4640      	mov	r0, r8
 80066f0:	f7ff fee2 	bl	80064b8 <_printf_common>
 80066f4:	3001      	adds	r0, #1
 80066f6:	d14c      	bne.n	8006792 <_printf_i+0x1fe>
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295
 80066fc:	b004      	add	sp, #16
 80066fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006702:	4835      	ldr	r0, [pc, #212]	; (80067d8 <_printf_i+0x244>)
 8006704:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	680e      	ldr	r6, [r1, #0]
 800670c:	061f      	lsls	r7, r3, #24
 800670e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006712:	600e      	str	r6, [r1, #0]
 8006714:	d514      	bpl.n	8006740 <_printf_i+0x1ac>
 8006716:	07d9      	lsls	r1, r3, #31
 8006718:	bf44      	itt	mi
 800671a:	f043 0320 	orrmi.w	r3, r3, #32
 800671e:	6023      	strmi	r3, [r4, #0]
 8006720:	b91d      	cbnz	r5, 800672a <_printf_i+0x196>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	f023 0320 	bic.w	r3, r3, #32
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	2310      	movs	r3, #16
 800672c:	e7b0      	b.n	8006690 <_printf_i+0xfc>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	f043 0320 	orr.w	r3, r3, #32
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	2378      	movs	r3, #120	; 0x78
 8006738:	4828      	ldr	r0, [pc, #160]	; (80067dc <_printf_i+0x248>)
 800673a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800673e:	e7e3      	b.n	8006708 <_printf_i+0x174>
 8006740:	065e      	lsls	r6, r3, #25
 8006742:	bf48      	it	mi
 8006744:	b2ad      	uxthmi	r5, r5
 8006746:	e7e6      	b.n	8006716 <_printf_i+0x182>
 8006748:	4616      	mov	r6, r2
 800674a:	e7bb      	b.n	80066c4 <_printf_i+0x130>
 800674c:	680b      	ldr	r3, [r1, #0]
 800674e:	6826      	ldr	r6, [r4, #0]
 8006750:	6960      	ldr	r0, [r4, #20]
 8006752:	1d1d      	adds	r5, r3, #4
 8006754:	600d      	str	r5, [r1, #0]
 8006756:	0635      	lsls	r5, r6, #24
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	d501      	bpl.n	8006760 <_printf_i+0x1cc>
 800675c:	6018      	str	r0, [r3, #0]
 800675e:	e002      	b.n	8006766 <_printf_i+0x1d2>
 8006760:	0671      	lsls	r1, r6, #25
 8006762:	d5fb      	bpl.n	800675c <_printf_i+0x1c8>
 8006764:	8018      	strh	r0, [r3, #0]
 8006766:	2300      	movs	r3, #0
 8006768:	6123      	str	r3, [r4, #16]
 800676a:	4616      	mov	r6, r2
 800676c:	e7ba      	b.n	80066e4 <_printf_i+0x150>
 800676e:	680b      	ldr	r3, [r1, #0]
 8006770:	1d1a      	adds	r2, r3, #4
 8006772:	600a      	str	r2, [r1, #0]
 8006774:	681e      	ldr	r6, [r3, #0]
 8006776:	6862      	ldr	r2, [r4, #4]
 8006778:	2100      	movs	r1, #0
 800677a:	4630      	mov	r0, r6
 800677c:	f7f9 fd00 	bl	8000180 <memchr>
 8006780:	b108      	cbz	r0, 8006786 <_printf_i+0x1f2>
 8006782:	1b80      	subs	r0, r0, r6
 8006784:	6060      	str	r0, [r4, #4]
 8006786:	6863      	ldr	r3, [r4, #4]
 8006788:	6123      	str	r3, [r4, #16]
 800678a:	2300      	movs	r3, #0
 800678c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006790:	e7a8      	b.n	80066e4 <_printf_i+0x150>
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	4632      	mov	r2, r6
 8006796:	4649      	mov	r1, r9
 8006798:	4640      	mov	r0, r8
 800679a:	47d0      	blx	sl
 800679c:	3001      	adds	r0, #1
 800679e:	d0ab      	beq.n	80066f8 <_printf_i+0x164>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	079b      	lsls	r3, r3, #30
 80067a4:	d413      	bmi.n	80067ce <_printf_i+0x23a>
 80067a6:	68e0      	ldr	r0, [r4, #12]
 80067a8:	9b03      	ldr	r3, [sp, #12]
 80067aa:	4298      	cmp	r0, r3
 80067ac:	bfb8      	it	lt
 80067ae:	4618      	movlt	r0, r3
 80067b0:	e7a4      	b.n	80066fc <_printf_i+0x168>
 80067b2:	2301      	movs	r3, #1
 80067b4:	4632      	mov	r2, r6
 80067b6:	4649      	mov	r1, r9
 80067b8:	4640      	mov	r0, r8
 80067ba:	47d0      	blx	sl
 80067bc:	3001      	adds	r0, #1
 80067be:	d09b      	beq.n	80066f8 <_printf_i+0x164>
 80067c0:	3501      	adds	r5, #1
 80067c2:	68e3      	ldr	r3, [r4, #12]
 80067c4:	9903      	ldr	r1, [sp, #12]
 80067c6:	1a5b      	subs	r3, r3, r1
 80067c8:	42ab      	cmp	r3, r5
 80067ca:	dcf2      	bgt.n	80067b2 <_printf_i+0x21e>
 80067cc:	e7eb      	b.n	80067a6 <_printf_i+0x212>
 80067ce:	2500      	movs	r5, #0
 80067d0:	f104 0619 	add.w	r6, r4, #25
 80067d4:	e7f5      	b.n	80067c2 <_printf_i+0x22e>
 80067d6:	bf00      	nop
 80067d8:	080071d1 	.word	0x080071d1
 80067dc:	080071e2 	.word	0x080071e2

080067e0 <_free_r>:
 80067e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067e2:	2900      	cmp	r1, #0
 80067e4:	d048      	beq.n	8006878 <_free_r+0x98>
 80067e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ea:	9001      	str	r0, [sp, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f1a1 0404 	sub.w	r4, r1, #4
 80067f2:	bfb8      	it	lt
 80067f4:	18e4      	addlt	r4, r4, r3
 80067f6:	f000 f8d3 	bl	80069a0 <__malloc_lock>
 80067fa:	4a20      	ldr	r2, [pc, #128]	; (800687c <_free_r+0x9c>)
 80067fc:	9801      	ldr	r0, [sp, #4]
 80067fe:	6813      	ldr	r3, [r2, #0]
 8006800:	4615      	mov	r5, r2
 8006802:	b933      	cbnz	r3, 8006812 <_free_r+0x32>
 8006804:	6063      	str	r3, [r4, #4]
 8006806:	6014      	str	r4, [r2, #0]
 8006808:	b003      	add	sp, #12
 800680a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800680e:	f000 b8cd 	b.w	80069ac <__malloc_unlock>
 8006812:	42a3      	cmp	r3, r4
 8006814:	d90b      	bls.n	800682e <_free_r+0x4e>
 8006816:	6821      	ldr	r1, [r4, #0]
 8006818:	1862      	adds	r2, r4, r1
 800681a:	4293      	cmp	r3, r2
 800681c:	bf04      	itt	eq
 800681e:	681a      	ldreq	r2, [r3, #0]
 8006820:	685b      	ldreq	r3, [r3, #4]
 8006822:	6063      	str	r3, [r4, #4]
 8006824:	bf04      	itt	eq
 8006826:	1852      	addeq	r2, r2, r1
 8006828:	6022      	streq	r2, [r4, #0]
 800682a:	602c      	str	r4, [r5, #0]
 800682c:	e7ec      	b.n	8006808 <_free_r+0x28>
 800682e:	461a      	mov	r2, r3
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	b10b      	cbz	r3, 8006838 <_free_r+0x58>
 8006834:	42a3      	cmp	r3, r4
 8006836:	d9fa      	bls.n	800682e <_free_r+0x4e>
 8006838:	6811      	ldr	r1, [r2, #0]
 800683a:	1855      	adds	r5, r2, r1
 800683c:	42a5      	cmp	r5, r4
 800683e:	d10b      	bne.n	8006858 <_free_r+0x78>
 8006840:	6824      	ldr	r4, [r4, #0]
 8006842:	4421      	add	r1, r4
 8006844:	1854      	adds	r4, r2, r1
 8006846:	42a3      	cmp	r3, r4
 8006848:	6011      	str	r1, [r2, #0]
 800684a:	d1dd      	bne.n	8006808 <_free_r+0x28>
 800684c:	681c      	ldr	r4, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	6053      	str	r3, [r2, #4]
 8006852:	4421      	add	r1, r4
 8006854:	6011      	str	r1, [r2, #0]
 8006856:	e7d7      	b.n	8006808 <_free_r+0x28>
 8006858:	d902      	bls.n	8006860 <_free_r+0x80>
 800685a:	230c      	movs	r3, #12
 800685c:	6003      	str	r3, [r0, #0]
 800685e:	e7d3      	b.n	8006808 <_free_r+0x28>
 8006860:	6825      	ldr	r5, [r4, #0]
 8006862:	1961      	adds	r1, r4, r5
 8006864:	428b      	cmp	r3, r1
 8006866:	bf04      	itt	eq
 8006868:	6819      	ldreq	r1, [r3, #0]
 800686a:	685b      	ldreq	r3, [r3, #4]
 800686c:	6063      	str	r3, [r4, #4]
 800686e:	bf04      	itt	eq
 8006870:	1949      	addeq	r1, r1, r5
 8006872:	6021      	streq	r1, [r4, #0]
 8006874:	6054      	str	r4, [r2, #4]
 8006876:	e7c7      	b.n	8006808 <_free_r+0x28>
 8006878:	b003      	add	sp, #12
 800687a:	bd30      	pop	{r4, r5, pc}
 800687c:	200004a4 	.word	0x200004a4

08006880 <_malloc_r>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	1ccd      	adds	r5, r1, #3
 8006884:	f025 0503 	bic.w	r5, r5, #3
 8006888:	3508      	adds	r5, #8
 800688a:	2d0c      	cmp	r5, #12
 800688c:	bf38      	it	cc
 800688e:	250c      	movcc	r5, #12
 8006890:	2d00      	cmp	r5, #0
 8006892:	4606      	mov	r6, r0
 8006894:	db01      	blt.n	800689a <_malloc_r+0x1a>
 8006896:	42a9      	cmp	r1, r5
 8006898:	d903      	bls.n	80068a2 <_malloc_r+0x22>
 800689a:	230c      	movs	r3, #12
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	2000      	movs	r0, #0
 80068a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a2:	f000 f87d 	bl	80069a0 <__malloc_lock>
 80068a6:	4921      	ldr	r1, [pc, #132]	; (800692c <_malloc_r+0xac>)
 80068a8:	680a      	ldr	r2, [r1, #0]
 80068aa:	4614      	mov	r4, r2
 80068ac:	b99c      	cbnz	r4, 80068d6 <_malloc_r+0x56>
 80068ae:	4f20      	ldr	r7, [pc, #128]	; (8006930 <_malloc_r+0xb0>)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	b923      	cbnz	r3, 80068be <_malloc_r+0x3e>
 80068b4:	4621      	mov	r1, r4
 80068b6:	4630      	mov	r0, r6
 80068b8:	f000 f862 	bl	8006980 <_sbrk_r>
 80068bc:	6038      	str	r0, [r7, #0]
 80068be:	4629      	mov	r1, r5
 80068c0:	4630      	mov	r0, r6
 80068c2:	f000 f85d 	bl	8006980 <_sbrk_r>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d123      	bne.n	8006912 <_malloc_r+0x92>
 80068ca:	230c      	movs	r3, #12
 80068cc:	6033      	str	r3, [r6, #0]
 80068ce:	4630      	mov	r0, r6
 80068d0:	f000 f86c 	bl	80069ac <__malloc_unlock>
 80068d4:	e7e3      	b.n	800689e <_malloc_r+0x1e>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	1b5b      	subs	r3, r3, r5
 80068da:	d417      	bmi.n	800690c <_malloc_r+0x8c>
 80068dc:	2b0b      	cmp	r3, #11
 80068de:	d903      	bls.n	80068e8 <_malloc_r+0x68>
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	441c      	add	r4, r3
 80068e4:	6025      	str	r5, [r4, #0]
 80068e6:	e004      	b.n	80068f2 <_malloc_r+0x72>
 80068e8:	6863      	ldr	r3, [r4, #4]
 80068ea:	42a2      	cmp	r2, r4
 80068ec:	bf0c      	ite	eq
 80068ee:	600b      	streq	r3, [r1, #0]
 80068f0:	6053      	strne	r3, [r2, #4]
 80068f2:	4630      	mov	r0, r6
 80068f4:	f000 f85a 	bl	80069ac <__malloc_unlock>
 80068f8:	f104 000b 	add.w	r0, r4, #11
 80068fc:	1d23      	adds	r3, r4, #4
 80068fe:	f020 0007 	bic.w	r0, r0, #7
 8006902:	1ac2      	subs	r2, r0, r3
 8006904:	d0cc      	beq.n	80068a0 <_malloc_r+0x20>
 8006906:	1a1b      	subs	r3, r3, r0
 8006908:	50a3      	str	r3, [r4, r2]
 800690a:	e7c9      	b.n	80068a0 <_malloc_r+0x20>
 800690c:	4622      	mov	r2, r4
 800690e:	6864      	ldr	r4, [r4, #4]
 8006910:	e7cc      	b.n	80068ac <_malloc_r+0x2c>
 8006912:	1cc4      	adds	r4, r0, #3
 8006914:	f024 0403 	bic.w	r4, r4, #3
 8006918:	42a0      	cmp	r0, r4
 800691a:	d0e3      	beq.n	80068e4 <_malloc_r+0x64>
 800691c:	1a21      	subs	r1, r4, r0
 800691e:	4630      	mov	r0, r6
 8006920:	f000 f82e 	bl	8006980 <_sbrk_r>
 8006924:	3001      	adds	r0, #1
 8006926:	d1dd      	bne.n	80068e4 <_malloc_r+0x64>
 8006928:	e7cf      	b.n	80068ca <_malloc_r+0x4a>
 800692a:	bf00      	nop
 800692c:	200004a4 	.word	0x200004a4
 8006930:	200004a8 	.word	0x200004a8

08006934 <_realloc_r>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	4607      	mov	r7, r0
 8006938:	4614      	mov	r4, r2
 800693a:	460e      	mov	r6, r1
 800693c:	b921      	cbnz	r1, 8006948 <_realloc_r+0x14>
 800693e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006942:	4611      	mov	r1, r2
 8006944:	f7ff bf9c 	b.w	8006880 <_malloc_r>
 8006948:	b922      	cbnz	r2, 8006954 <_realloc_r+0x20>
 800694a:	f7ff ff49 	bl	80067e0 <_free_r>
 800694e:	4625      	mov	r5, r4
 8006950:	4628      	mov	r0, r5
 8006952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006954:	f000 f830 	bl	80069b8 <_malloc_usable_size_r>
 8006958:	42a0      	cmp	r0, r4
 800695a:	d20f      	bcs.n	800697c <_realloc_r+0x48>
 800695c:	4621      	mov	r1, r4
 800695e:	4638      	mov	r0, r7
 8006960:	f7ff ff8e 	bl	8006880 <_malloc_r>
 8006964:	4605      	mov	r5, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	d0f2      	beq.n	8006950 <_realloc_r+0x1c>
 800696a:	4631      	mov	r1, r6
 800696c:	4622      	mov	r2, r4
 800696e:	f7ff fbf7 	bl	8006160 <memcpy>
 8006972:	4631      	mov	r1, r6
 8006974:	4638      	mov	r0, r7
 8006976:	f7ff ff33 	bl	80067e0 <_free_r>
 800697a:	e7e9      	b.n	8006950 <_realloc_r+0x1c>
 800697c:	4635      	mov	r5, r6
 800697e:	e7e7      	b.n	8006950 <_realloc_r+0x1c>

08006980 <_sbrk_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4d06      	ldr	r5, [pc, #24]	; (800699c <_sbrk_r+0x1c>)
 8006984:	2300      	movs	r3, #0
 8006986:	4604      	mov	r4, r0
 8006988:	4608      	mov	r0, r1
 800698a:	602b      	str	r3, [r5, #0]
 800698c:	f7fb fad8 	bl	8001f40 <_sbrk>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_sbrk_r+0x1a>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b103      	cbz	r3, 800699a <_sbrk_r+0x1a>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	20000900 	.word	0x20000900

080069a0 <__malloc_lock>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__malloc_lock+0x8>)
 80069a2:	f000 b811 	b.w	80069c8 <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	20000908 	.word	0x20000908

080069ac <__malloc_unlock>:
 80069ac:	4801      	ldr	r0, [pc, #4]	; (80069b4 <__malloc_unlock+0x8>)
 80069ae:	f000 b80c 	b.w	80069ca <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	20000908 	.word	0x20000908

080069b8 <_malloc_usable_size_r>:
 80069b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069bc:	1f18      	subs	r0, r3, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bfbc      	itt	lt
 80069c2:	580b      	ldrlt	r3, [r1, r0]
 80069c4:	18c0      	addlt	r0, r0, r3
 80069c6:	4770      	bx	lr

080069c8 <__retarget_lock_acquire_recursive>:
 80069c8:	4770      	bx	lr

080069ca <__retarget_lock_release_recursive>:
 80069ca:	4770      	bx	lr

080069cc <_init>:
 80069cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ce:	bf00      	nop
 80069d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d2:	bc08      	pop	{r3}
 80069d4:	469e      	mov	lr, r3
 80069d6:	4770      	bx	lr

080069d8 <_fini>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	bf00      	nop
 80069dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069de:	bc08      	pop	{r3}
 80069e0:	469e      	mov	lr, r3
 80069e2:	4770      	bx	lr
