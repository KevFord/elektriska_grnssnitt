
el_grns_lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a6c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d70  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006924  08006924  00016924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  20000004  08006928  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000878  2000001c  08006940  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000894  08006940  00020894  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002075a  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b06  00000000  00000000  000407a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001eb0  00000000  00000000  000442b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d40  00000000  00000000  00046160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00028300  00000000  00000000  00047ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cccb  00000000  00000000  000701a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e6d65  00000000  00000000  0008ce6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00173bd0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000082b8  00000000  00000000  00173c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000001c 	.word	0x2000001c
 8000158:	00000000 	.word	0x00000000
 800015c:	08005b90 	.word	0x08005b90

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000020 	.word	0x20000020
 8000178:	08005b90 	.word	0x08005b90

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <TextLCD_Strobe>:
  {
  }
}

void TextLCD_Strobe(TextLCDType *lcd) // anropas för att kunnna sktriva till LCD
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af02      	add	r7, sp, #8
 800047a:	6078      	str	r0, [r7, #4]
	// Set bit 2 which corresponds to E (strobe) and send data
	lcd->data |= 0x04;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	b2da      	uxtb	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6818      	ldr	r0, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	b299      	uxth	r1, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	1d5a      	adds	r2, r3, #5
 8000498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	2301      	movs	r3, #1
 80004a0:	f001 feca 	bl	8002238 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80004a4:	2001      	movs	r0, #1
 80004a6:	f001 fb63 	bl	8001b70 <HAL_Delay>
	// Clear bit 2 which corresponds to E (strobe) and send data
	lcd->data &= 0xFB;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	795b      	ldrb	r3, [r3, #5]
 80004ae:	f023 0304 	bic.w	r3, r3, #4
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	b299      	uxth	r1, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	1d5a      	adds	r2, r3, #5
 80004c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2301      	movs	r3, #1
 80004ce:	f001 feb3 	bl	8002238 <HAL_I2C_Master_Transmit>
//	min_Delay(40);
	HAL_Delay(1);
 80004d2:	2001      	movs	r0, #1
 80004d4:	f001 fb4c 	bl	8001b70 <HAL_Delay>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <TextLCD_Cmd>:

void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd) // skickar cmd till LCD, anrop: TextLCD_Cmd(&lcd, 0x02); där 02 är kommandot
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]
	// for command RS is set to 0
	lcd->data = (lcd->data & 0x0C) | (cmd & 0xF0);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	f003 030c 	and.w	r3, r3, #12
 80004f6:	b25a      	sxtb	r2, r3
 80004f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80004fc:	f023 030f 	bic.w	r3, r3, #15
 8000500:	b25b      	sxtb	r3, r3
 8000502:	4313      	orrs	r3, r2
 8000504:	b25b      	sxtb	r3, r3
 8000506:	b2da      	uxtb	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6818      	ldr	r0, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	b299      	uxth	r1, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	1d5a      	adds	r2, r3, #5
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2301      	movs	r3, #1
 8000522:	f001 fe89 	bl	8002238 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ffa4 	bl	8000474 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0C) | (cmd << 4);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	795b      	ldrb	r3, [r3, #5]
 8000530:	b25b      	sxtb	r3, r3
 8000532:	f003 030c 	and.w	r3, r3, #12
 8000536:	b25a      	sxtb	r2, r3
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	b25b      	sxtb	r3, r3
 800053e:	4313      	orrs	r3, r2
 8000540:	b25b      	sxtb	r3, r3
 8000542:	b2da      	uxtb	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6818      	ldr	r0, [r3, #0]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	b299      	uxth	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	1d5a      	adds	r2, r3, #5
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2301      	movs	r3, #1
 800055e:	f001 fe6b 	bl	8002238 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f7ff ff86 	bl	8000474 <TextLCD_Strobe>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <TextLCD_Data>:

void TextLCD_Data(TextLCDType *lcd, uint8_t data) // anrop: TextLCD_Data(&lcd, 0x55); skickar komando 55 till LCD
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
	// for data RS is set to 1
	lcd->data = (lcd->data & 0x0D) | (data & 0xF0) | 0x01;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	b25b      	sxtb	r3, r3
 8000582:	f003 030d 	and.w	r3, r3, #13
 8000586:	b25a      	sxtb	r2, r3
 8000588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800058c:	f023 030f 	bic.w	r3, r3, #15
 8000590:	b25b      	sxtb	r3, r3
 8000592:	4313      	orrs	r3, r2
 8000594:	b25b      	sxtb	r3, r3
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	b25b      	sxtb	r3, r3
 800059c:	b2da      	uxtb	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6818      	ldr	r0, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	b299      	uxth	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	1d5a      	adds	r2, r3, #5
 80005b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	f001 fe3e 	bl	8002238 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ff59 	bl	8000474 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0D) | (data << 4) | 0x01;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	795b      	ldrb	r3, [r3, #5]
 80005c6:	b25b      	sxtb	r3, r3
 80005c8:	f003 030d 	and.w	r3, r3, #13
 80005cc:	b25a      	sxtb	r2, r3
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	b299      	uxth	r1, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	1d5a      	adds	r2, r3, #5
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	f001 fe1d 	bl	8002238 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff ff38 	bl	8000474 <TextLCD_Strobe>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <TextLCD_Init>:

void TextLCD_Init(TextLCDType *lcd, I2C_HandleTypeDef *hi2c, uint8_t DevAddress)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af02      	add	r7, sp, #8
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	4613      	mov	r3, r2
 8000618:	71fb      	strb	r3, [r7, #7]
	lcd->hi2c = hi2c;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	68ba      	ldr	r2, [r7, #8]
 800061e:	601a      	str	r2, [r3, #0]
	lcd->DevAddress = DevAddress;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	711a      	strb	r2, [r3, #4]
	lcd->data = 0x38;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2238      	movs	r2, #56	; 0x38
 800062a:	715a      	strb	r2, [r3, #5]

	// Do init setting LCD controller into 4-bit mode

	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	b299      	uxth	r1, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	1d5a      	adds	r2, r3, #5
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2301      	movs	r3, #1
 8000642:	f001 fdf9 	bl	8002238 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff ff14 	bl	8000474 <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	b299      	uxth	r1, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	1d5a      	adds	r2, r3, #5
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	f001 fde9 	bl	8002238 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f7ff ff04 	bl	8000474 <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	b299      	uxth	r1, r3
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	1d5a      	adds	r2, r3, #5
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2301      	movs	r3, #1
 8000682:	f001 fdd9 	bl	8002238 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f7ff fef4 	bl	8000474 <TextLCD_Strobe>
	lcd->data = 0x28;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2228      	movs	r2, #40	; 0x28
 8000690:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	b299      	uxth	r1, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	1d5a      	adds	r2, r3, #5
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	f001 fdc6 	bl	8002238 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f7ff fee1 	bl	8000474 <TextLCD_Strobe>

	// Finished setting up 4-bit mode. Let's configure display

	TextLCD_Cmd(lcd, 0x28); //N=1 (2 line), F=0 (5x8)
 80006b2:	2128      	movs	r1, #40	; 0x28
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff ff13 	bl	80004e0 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x08); //Display off, Cursor Off, Blink off
 80006ba:	2108      	movs	r1, #8
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f7ff ff0f 	bl	80004e0 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x01); //Clear
 80006c2:	2101      	movs	r1, #1
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f7ff ff0b 	bl	80004e0 <TextLCD_Cmd>
	HAL_Delay(5);
 80006ca:	2005      	movs	r0, #5
 80006cc:	f001 fa50 	bl	8001b70 <HAL_Delay>
	TextLCD_Cmd(lcd, 0x06); //ID=1(increment), S=0 (no shift)
 80006d0:	2106      	movs	r1, #6
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f7ff ff04 	bl	80004e0 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x0C); //Display on, Cursor Off, Blink off
 80006d8:	210c      	movs	r1, #12
 80006da:	68f8      	ldr	r0, [r7, #12]
 80006dc:	f7ff ff00 	bl	80004e0 <TextLCD_Cmd>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <TextLCD_Home>:

void TextLCD_Home(TextLCDType *lcd){ // skall flytta cursor till första positionen
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

	TextLCD_Cmd(lcd, 0x02); // 02 = home
 80006f0:	2102      	movs	r1, #2
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff fef4 	bl	80004e0 <TextLCD_Cmd>
//	TextLCD_Strobe(lcd); // läs in-pin
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <TextLCD_Position>:
	TextLCD_Cmd(lcd, 0x01); // skickar 01 till LCD, 01 = clear. Rensar en pixel?
//	TextLCD_Strobe(lcd); // anropar för att LCD skall uppdateras och läsa in-pinnen.
}

void TextLCD_Position(TextLCDType *lcd, int x, int y) // Stulen.
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
	uint8_t cmd_bit = 0x80;
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	75fb      	strb	r3, [r7, #23]
	uint8_t adr     = x + (0x40 * y);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	019b      	lsls	r3, r3, #6
 8000716:	b2da      	uxtb	r2, r3
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4413      	add	r3, r2
 800071e:	75bb      	strb	r3, [r7, #22]
	uint8_t cmd     = cmd_bit | adr;
 8000720:	7dfa      	ldrb	r2, [r7, #23]
 8000722:	7dbb      	ldrb	r3, [r7, #22]
 8000724:	4313      	orrs	r3, r2
 8000726:	757b      	strb	r3, [r7, #21]
	TextLCD_Cmd(lcd, cmd);
 8000728:	7d7b      	ldrb	r3, [r7, #21]
 800072a:	4619      	mov	r1, r3
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff fed7 	bl	80004e0 <TextLCD_Cmd>
}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <TextLCD_Putchar>:

void TextLCD_Putchar(TextLCDType *lcd, uint8_t data){ // anrop: TextLCD_Putchar(&lcd, 'K'); ref till lcd och vilken char.
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	460b      	mov	r3, r1
 8000744:	70fb      	strb	r3, [r7, #3]

	TextLCD_Data(lcd, data);// + data);
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	4619      	mov	r1, r3
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff10 	bl	8000570 <TextLCD_Data>
//	TextLCD_Strobe(lcd);
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <TextLCD_Puts>:

	TextLCD_Data(lcd, 0x30 + data);// + data);
//	TextLCD_Strobe(lcd);
}

void TextLCD_Puts(TextLCDType *lcd, char *string){ // anrop: liknande putchar, men en string "texttext" som andra argument.
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]

	for(int i = 0; string[i] != 0; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e00a      	b.n	800077e <TextLCD_Puts+0x26>
		TextLCD_Putchar(lcd, string[i]);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffe1 	bl	800073a <TextLCD_Putchar>
	for(int i = 0; string[i] != 0; i++)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1ee      	bne.n	8000768 <TextLCD_Puts+0x10>
//	TextLCD_Strobe(lcd);
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800079c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007a4:	f023 0218 	bic.w	r2, r3, #24
 80007a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e4:	68fb      	ldr	r3, [r7, #12]
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <checkLevel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void checkLevel(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

	HAL_Delay(MPU_UPDATE_FREQ); // 5 Hz update frequency.
 80007f8:	20c8      	movs	r0, #200	; 0xc8
 80007fa:	f001 f9b9 	bl	8001b70 <HAL_Delay>

	ret = MPU6050_ReadRegisters(&mpu, ACCEL_XOUT_H, 6);
 80007fe:	2206      	movs	r2, #6
 8000800:	213b      	movs	r1, #59	; 0x3b
 8000802:	482b      	ldr	r0, [pc, #172]	; (80008b0 <checkLevel+0xbc>)
 8000804:	f000 fc9e 	bl	8001144 <MPU6050_ReadRegisters>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <checkLevel+0xc0>)
 800080e:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <checkLevel+0xc0>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <checkLevel+0x2c>
		LCD_Debug("Read error:", "ACCEL_XOUT_H");
 8000818:	4927      	ldr	r1, [pc, #156]	; (80008b8 <checkLevel+0xc4>)
 800081a:	4828      	ldr	r0, [pc, #160]	; (80008bc <checkLevel+0xc8>)
 800081c:	f000 fbea 	bl	8000ff4 <LCD_Debug>

	Accel_X_RAW = (int16_t)(mpu.data[0] << 8 | mpu.data[1]); // Combine both registers into one value.
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <checkLevel+0xbc>)
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <checkLevel+0xbc>)
 800082a:	799b      	ldrb	r3, [r3, #6]
 800082c:	b21b      	sxth	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	b21a      	sxth	r2, r3
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <checkLevel+0xcc>)
 8000834:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(mpu.data[2] << 8 | mpu.data[3]);
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <checkLevel+0xbc>)
 8000838:	79db      	ldrb	r3, [r3, #7]
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	b21a      	sxth	r2, r3
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <checkLevel+0xbc>)
 8000840:	7a1b      	ldrb	r3, [r3, #8]
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21a      	sxth	r2, r3
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <checkLevel+0xd0>)
 800084a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(mpu.data[4] << 8 | mpu.data[5]);
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <checkLevel+0xbc>)
 800084e:	7a5b      	ldrb	r3, [r3, #9]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <checkLevel+0xbc>)
 8000856:	7a9b      	ldrb	r3, [r3, #10]
 8000858:	b21b      	sxth	r3, r3
 800085a:	4313      	orrs	r3, r2
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <checkLevel+0xd4>)
 8000860:	801a      	strh	r2, [r3, #0]

	accelXValue = Accel_X_RAW / x_offset; // Divide by the value from the calibration.
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <checkLevel+0xcc>)
 8000864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000868:	461a      	mov	r2, r3
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <checkLevel+0xd8>)
 800086c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000870:	fb92 f3f3 	sdiv	r3, r2, r3
 8000874:	b21a      	sxth	r2, r3
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <checkLevel+0xdc>)
 8000878:	801a      	strh	r2, [r3, #0]
	accelYValue = Accel_Y_RAW / y_offset;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <checkLevel+0xd0>)
 800087c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000880:	461a      	mov	r2, r3
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <checkLevel+0xe0>)
 8000884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000888:	fb92 f3f3 	sdiv	r3, r2, r3
 800088c:	b21a      	sxth	r2, r3
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <checkLevel+0xe4>)
 8000890:	801a      	strh	r2, [r3, #0]
	accelZValue = Accel_Z_RAW / z_offset;
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <checkLevel+0xd4>)
 8000894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000898:	461a      	mov	r2, r3
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <checkLevel+0xe8>)
 800089c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <checkLevel+0xec>)
 80008a8:	801a      	strh	r2, [r3, #0]
//		accelYValue |= 0xF000;
//	}
//	if(accelZValue > 0x8000){ // 2's complement.
//		accelZValue |= 0xF000;
//	}
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000538 	.word	0x20000538
 80008b4:	2000088c 	.word	0x2000088c
 80008b8:	08005ba8 	.word	0x08005ba8
 80008bc:	08005bb8 	.word	0x08005bb8
 80008c0:	20000440 	.word	0x20000440
 80008c4:	200004a2 	.word	0x200004a2
 80008c8:	200004a4 	.word	0x200004a4
 80008cc:	2000088e 	.word	0x2000088e
 80008d0:	20000594 	.word	0x20000594
 80008d4:	20000596 	.word	0x20000596
 80008d8:	20000590 	.word	0x20000590
 80008dc:	20000498 	.word	0x20000498
 80008e0:	20000592 	.word	0x20000592

080008e4 <displayLevel>:
	ssd1306_WriteString(strZ, Font_6x8, White);
	ssd1306_SetCursor(0, 54);
	ssd1306_UpdateScreen();
}

void displayLevel(int16_t axis_level){ // Displays the values as a "bubble".
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]

	int16_t tiltValue = (35 - axis_level); // Center the "bubble"
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	817b      	strh	r3, [r7, #10]

	ssd1306_SetDisplayOn(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 fec9 	bl	8001690 <ssd1306_SetDisplayOn>
	ssd1306_Fill(Black);
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 fcf2 	bl	80012e8 <ssd1306_Fill>

	for(int i = 0; i < 70; i++){ // Display some lines to indicate tilt.
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	e01b      	b.n	8000942 <displayLevel+0x5e>
		if(i % 5 == 0){
 800090a:	68f9      	ldr	r1, [r7, #12]
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <displayLevel+0xa4>)
 800090e:	fb83 2301 	smull	r2, r3, r3, r1
 8000912:	105a      	asrs	r2, r3, #1
 8000914:	17cb      	asrs	r3, r1, #31
 8000916:	1ad2      	subs	r2, r2, r3
 8000918:	4613      	mov	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4413      	add	r3, r2
 800091e:	1aca      	subs	r2, r1, r3
 8000920:	2a00      	cmp	r2, #0
 8000922:	d10b      	bne.n	800093c <displayLevel+0x58>
			ssd1306_SetCursor(i, 34);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2122      	movs	r1, #34	; 0x22
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fe2a 	bl	8001584 <ssd1306_SetCursor>
			ssd1306_WriteString("|", Font_7x10, White);
 8000930:	4a16      	ldr	r2, [pc, #88]	; (800098c <displayLevel+0xa8>)
 8000932:	2301      	movs	r3, #1
 8000934:	ca06      	ldmia	r2, {r1, r2}
 8000936:	4816      	ldr	r0, [pc, #88]	; (8000990 <displayLevel+0xac>)
 8000938:	f000 fdfe 	bl	8001538 <ssd1306_WriteString>
	for(int i = 0; i < 70; i++){ // Display some lines to indicate tilt.
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3301      	adds	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2b45      	cmp	r3, #69	; 0x45
 8000946:	dde0      	ble.n	800090a <displayLevel+0x26>
		}
	}

	ssd1306_SetCursor(tiltValue, 24); // Set the "bubble".
 8000948:	897b      	ldrh	r3, [r7, #10]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2118      	movs	r1, #24
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fe18 	bl	8001584 <ssd1306_SetCursor>
	ssd1306_WriteString("O", Font_7x10, White);
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <displayLevel+0xa8>)
 8000956:	2301      	movs	r3, #1
 8000958:	ca06      	ldmia	r2, {r1, r2}
 800095a:	480e      	ldr	r0, [pc, #56]	; (8000994 <displayLevel+0xb0>)
 800095c:	f000 fdec 	bl	8001538 <ssd1306_WriteString>

	if(axis_level > 20 || axis_level < -20) // Just to indicate a silly angle...
 8000960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000964:	2b14      	cmp	r3, #20
 8000966:	dc04      	bgt.n	8000972 <displayLevel+0x8e>
 8000968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800096c:	f113 0f14 	cmn.w	r3, #20
 8000970:	da02      	bge.n	8000978 <displayLevel+0x94>
		drawGarfield();
 8000972:	f000 feab 	bl	80016cc <drawGarfield>
 8000976:	e002      	b.n	800097e <displayLevel+0x9a>
	else ssd1306_UpdateScreen();
 8000978:	f000 fcda 	bl	8001330 <ssd1306_UpdateScreen>
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	66666667 	.word	0x66666667
 800098c:	20000008 	.word	0x20000008
 8000990:	08005bec 	.word	0x08005bec
 8000994:	08005bf0 	.word	0x08005bf0

08000998 <calibrateMPU>:
float resultInDegrees(int16_t z_axis, int16_t comparative_axis){

	return (atan2(comparative_axis, z_axis) / 57.2957795);
}

void calibrateMPU(MPU6050_Type mpu6050){
 8000998:	b580      	push	{r7, lr}
 800099a:	b098      	sub	sp, #96	; 0x60
 800099c:	af00      	add	r7, sp, #0
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t x_calibration;
	int16_t y_calibration;
	int16_t z_calibration;

	// Fill with samples:
	for(int i = 0; i < NUMBER_OF_CALIBRATION_ITERATIONS; i++){
 80009a4:	2300      	movs	r3, #0
 80009a6:	657b      	str	r3, [r7, #84]	; 0x54
 80009a8:	e020      	b.n	80009ec <calibrateMPU+0x54>
		x_values[i] = Accel_X_RAW;
 80009aa:	4b55      	ldr	r3, [pc, #340]	; (8000b00 <calibrateMPU+0x168>)
 80009ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80009b8:	440b      	add	r3, r1
 80009ba:	f823 2c24 	strh.w	r2, [r3, #-36]
		y_values[i] = Accel_Y_RAW;
 80009be:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <calibrateMPU+0x16c>)
 80009c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80009cc:	440b      	add	r3, r1
 80009ce:	f823 2c38 	strh.w	r2, [r3, #-56]
		z_values[i] = Accel_Z_RAW;
 80009d2:	4b4d      	ldr	r3, [pc, #308]	; (8000b08 <calibrateMPU+0x170>)
 80009d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80009e0:	440b      	add	r3, r1
 80009e2:	f823 2c4c 	strh.w	r2, [r3, #-76]
	for(int i = 0; i < NUMBER_OF_CALIBRATION_ITERATIONS; i++){
 80009e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009e8:	3301      	adds	r3, #1
 80009ea:	657b      	str	r3, [r7, #84]	; 0x54
 80009ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009ee:	2b09      	cmp	r3, #9
 80009f0:	dddb      	ble.n	80009aa <calibrateMPU+0x12>
	}
	for(int i = 0; i < NUMBER_OF_CALIBRATION_ITERATIONS; i++){
 80009f2:	2300      	movs	r3, #0
 80009f4:	653b      	str	r3, [r7, #80]	; 0x50
 80009f6:	e02c      	b.n	8000a52 <calibrateMPU+0xba>
		x_calibration += x_values[i];
 80009f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000a00:	4413      	add	r3, r2
 8000a02:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		y_calibration += y_values[i];
 8000a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000a1c:	4413      	add	r3, r2
 8000a1e:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000a28:	4413      	add	r3, r2
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		z_calibration += z_values[i];
 8000a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000a38:	4413      	add	r3, r2
 8000a3a:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000a44:	4413      	add	r3, r2
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	for(int i = 0; i < NUMBER_OF_CALIBRATION_ITERATIONS; i++){
 8000a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a4e:	3301      	adds	r3, #1
 8000a50:	653b      	str	r3, [r7, #80]	; 0x50
 8000a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a54:	2b09      	cmp	r3, #9
 8000a56:	ddcf      	ble.n	80009f8 <calibrateMPU+0x60>
	}

	// Perform the calibration, divide to find the mean value.
	x_offset = x_calibration / NUMBER_OF_CALIBRATION_ITERATIONS;
 8000a58:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000a5c:	4a2b      	ldr	r2, [pc, #172]	; (8000b0c <calibrateMPU+0x174>)
 8000a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a62:	1092      	asrs	r2, r2, #2
 8000a64:	17db      	asrs	r3, r3, #31
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <calibrateMPU+0x178>)
 8000a6c:	801a      	strh	r2, [r3, #0]
	y_offset = y_calibration / NUMBER_OF_CALIBRATION_ITERATIONS;
 8000a6e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8000a72:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <calibrateMPU+0x174>)
 8000a74:	fb82 1203 	smull	r1, r2, r2, r3
 8000a78:	1092      	asrs	r2, r2, #2
 8000a7a:	17db      	asrs	r3, r3, #31
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <calibrateMPU+0x17c>)
 8000a82:	801a      	strh	r2, [r3, #0]
	z_offset = z_calibration / NUMBER_OF_CALIBRATION_ITERATIONS;
 8000a84:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8000a88:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <calibrateMPU+0x174>)
 8000a8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8e:	1092      	asrs	r2, r2, #2
 8000a90:	17db      	asrs	r3, r3, #31
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	b21a      	sxth	r2, r3
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <calibrateMPU+0x180>)
 8000a98:	801a      	strh	r2, [r3, #0]

	// To preserve the sanctity of the universe, we ensure we do not divide by zero.
	if(x_offset == 0)
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <calibrateMPU+0x178>)
 8000a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <calibrateMPU+0x112>
		x_offset = 1;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <calibrateMPU+0x178>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	801a      	strh	r2, [r3, #0]
	if(y_offset == 0)
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <calibrateMPU+0x17c>)
 8000aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <calibrateMPU+0x122>
		y_offset = 1;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <calibrateMPU+0x17c>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	801a      	strh	r2, [r3, #0]
	if(z_offset == 0)
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <calibrateMPU+0x180>)
 8000abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <calibrateMPU+0x132>
		z_offset = 1;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <calibrateMPU+0x180>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	801a      	strh	r2, [r3, #0]

	// Let the user know that the device is being calibrated.
	ssd1306_SetDisplayOn(1);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f000 fde0 	bl	8001690 <ssd1306_SetDisplayOn>
	ssd1306_Fill(Black);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 fc09 	bl	80012e8 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 fd53 	bl	8001584 <ssd1306_SetCursor>
	ssd1306_WriteString("Calibrating...", Font_7x10, White);
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <calibrateMPU+0x184>)
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	ca06      	ldmia	r2, {r1, r2}
 8000ae4:	480e      	ldr	r0, [pc, #56]	; (8000b20 <calibrateMPU+0x188>)
 8000ae6:	f000 fd27 	bl	8001538 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000aea:	f000 fc21 	bl	8001330 <ssd1306_UpdateScreen>
	HAL_Delay(500); // A small delay so the user has time to read the text.
 8000aee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af2:	f001 f83d 	bl	8001b70 <HAL_Delay>
}
 8000af6:	bf00      	nop
 8000af8:	3760      	adds	r7, #96	; 0x60
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000440 	.word	0x20000440
 8000b04:	200004a2 	.word	0x200004a2
 8000b08:	200004a4 	.word	0x200004a4
 8000b0c:	66666667 	.word	0x66666667
 8000b10:	2000088e 	.word	0x2000088e
 8000b14:	20000596 	.word	0x20000596
 8000b18:	20000498 	.word	0x20000498
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	08005bf4 	.word	0x08005bf4

08000b24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == TOUCH_BTN_Pin)
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d102      	bne.n	8000b3a <HAL_GPIO_EXTI_Callback+0x16>
		calibrate = 1;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000004 	.word	0x20000004

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f000 ff88 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f836 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f000 f9e8 	bl	8000f2c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b5c:	f000 f970 	bl	8000e40 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000b60:	f000 f9bc 	bl	8000edc <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8000b64:	f000 f8d8 	bl	8000d18 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000b68:	f000 f916 	bl	8000d98 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TextLCD_Init(&lcd, &hi2c1, 0x4E); // "startar" LCD
 8000b6c:	224e      	movs	r2, #78	; 0x4e
 8000b6e:	4910      	ldr	r1, [pc, #64]	; (8000bb0 <main+0x64>)
 8000b70:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <main+0x68>)
 8000b72:	f7ff fd4b 	bl	800060c <TextLCD_Init>
  MPU6050_Init(&mpu, &hi2c1); // Setup the mpu sensor.
 8000b76:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <main+0x64>)
 8000b78:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <main+0x6c>)
 8000b7a:	f000 fa57 	bl	800102c <MPU6050_Init>
  ssd1306_Init(); // OLED Init.
 8000b7e:	f000 fb49 	bl	8001214 <ssd1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(calibrate == 1){ // Check calibration flag.
 8000b82:	e007      	b.n	8000b94 <main+0x48>
		  calibrateMPU(mpu); // Calibrate if necessary.
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <main+0x6c>)
 8000b86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b8a:	f7ff ff05 	bl	8000998 <calibrateMPU>
		  calibrate = 0; // Reset the flag.
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <main+0x70>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
	  while(calibrate == 1){ // Check calibration flag.
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <main+0x70>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d0f3      	beq.n	8000b84 <main+0x38>
	  }
	  checkLevel(); // Take in readings from the MPU, reads x, y and z axis and combines
 8000b9c:	f7ff fe2a 	bl	80007f4 <checkLevel>
//	  displayResultsOLED(accelXValue, accelYValue, accelZValue); // Displays the results as integers.
	  displayLevel(accelYValue); // Displays the result in a spirit level like fashion.
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <main+0x74>)
 8000ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe9c 	bl	80008e4 <displayLevel>
	  while(calibrate == 1){ // Check calibration flag.
 8000bac:	e7f2      	b.n	8000b94 <main+0x48>
 8000bae:	bf00      	nop
 8000bb0:	2000044c 	.word	0x2000044c
 8000bb4:	20000444 	.word	0x20000444
 8000bb8:	20000538 	.word	0x20000538
 8000bbc:	20000004 	.word	0x20000004
 8000bc0:	20000590 	.word	0x20000590

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0ae      	sub	sp, #184	; 0xb8
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bce:	2248      	movs	r2, #72	; 0x48
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f004 ffd4 	bl	8005b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
 8000be8:	615a      	str	r2, [r3, #20]
 8000bea:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2250      	movs	r2, #80	; 0x50
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 ffc4 	bl	8005b80 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c06:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	f023 0303 	bic.w	r3, r3, #3
 8000c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c1c:	f002 f9f0 	bl	8003000 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fdb7 	bl	8000794 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c26:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <SystemClock_Config+0x150>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c2e:	4a39      	ldr	r2, [pc, #228]	; (8000d14 <SystemClock_Config+0x150>)
 8000c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <SystemClock_Config+0x150>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000c42:	2327      	movs	r3, #39	; 0x27
 8000c44:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c54:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5c:	2340      	movs	r3, #64	; 0x40
 8000c5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c68:	2360      	movs	r3, #96	; 0x60
 8000c6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fd55 	bl	8003728 <HAL_RCC_OscConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c84:	f000 f9b0 	bl	8000fe8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000c88:	236f      	movs	r3, #111	; 0x6f
 8000c8a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ca4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 f8c8 	bl	8003e40 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000cb6:	f000 f997 	bl	8000fe8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000cba:	f242 1305 	movw	r3, #8453	; 0x2105
 8000cbe:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000cc0:	2318      	movs	r3, #24
 8000cc2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cce:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000cd0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cd4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cda:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ce0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ce6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000cec:	2300      	movs	r3, #0
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 fcf2 	bl	80046e0 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x142>
  {
    Error_Handler();
 8000d02:	f000 f971 	bl	8000fe8 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d06:	f003 fe61 	bl	80049cc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d0a:	bf00      	nop
 8000d0c:	37b8      	adds	r7, #184	; 0xb8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	58000400 	.word	0x58000400

08000d18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <MX_I2C1_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d24:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <MX_I2C1_Init+0x7c>)
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d52:	480e      	ldr	r0, [pc, #56]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d54:	f001 f9e0 	bl	8002118 <HAL_I2C_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d5e:	f000 f943 	bl	8000fe8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d66:	f001 ffa5 	bl	8002cb4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d70:	f000 f93a 	bl	8000fe8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_I2C1_Init+0x74>)
 8000d78:	f001 ffe7 	bl	8002d4a <HAL_I2CEx_ConfigDigitalFilter>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 f931 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000044c 	.word	0x2000044c
 8000d90:	40005400 	.word	0x40005400
 8000d94:	00707cbb 	.word	0x00707cbb

08000d98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000db8:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <MX_TIM1_Init+0xa4>)
 8000dba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000de2:	4815      	ldr	r0, [pc, #84]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000de4:	f003 ff09 	bl	8004bfa <HAL_TIM_Base_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000dee:	f000 f8fb 	bl	8000fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480e      	ldr	r0, [pc, #56]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000e00:	f003 ff52 	bl	8004ca8 <HAL_TIM_ConfigClockSource>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e0a:	f000 f8ed 	bl	8000fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_TIM1_Init+0xa0>)
 8000e20:	f004 f908 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e2a:	f000 f8dd 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000544 	.word	0x20000544
 8000e3c:	40012c00 	.word	0x40012c00

08000e40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e46:	4a24      	ldr	r2, [pc, #144]	; (8000ed8 <MX_USART1_UART_Init+0x98>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e58:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e68:	220c      	movs	r2, #12
 8000e6a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e8a:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e8c:	f004 f952 	bl	8005134 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000e96:	f000 f8a7 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e9e:	f004 fd45 	bl	800592c <HAL_UARTEx_SetTxFifoThreshold>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000ea8:	f000 f89e 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000eb0:	f004 fd7a 	bl	80059a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000eba:	f000 f895 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000ec0:	f004 fcfb 	bl	80058ba <HAL_UARTEx_DisableFifoMode>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f000 f88d 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200004a8 	.word	0x200004a8
 8000ed8:	40013800 	.word	0x40013800

08000edc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_USB_PCD_Init+0x48>)
 8000ee2:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <MX_USB_PCD_Init+0x4c>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_USB_PCD_Init+0x48>)
 8000ee8:	2208      	movs	r2, #8
 8000eea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <MX_USB_PCD_Init+0x48>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_USB_PCD_Init+0x48>)
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <MX_USB_PCD_Init+0x48>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_USB_PCD_Init+0x48>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_USB_PCD_Init+0x48>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_USB_PCD_Init+0x48>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_USB_PCD_Init+0x48>)
 8000f12:	f001 ff66 	bl	8002de2 <HAL_PCD_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000f1c:	f000 f864 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000598 	.word	0x20000598
 8000f28:	40006800 	.word	0x40006800

08000f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f40:	2004      	movs	r0, #4
 8000f42:	f7ff fc3d 	bl	80007c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2002      	movs	r0, #2
 8000f48:	f7ff fc3a 	bl	80007c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff fc37 	bl	80007c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	2008      	movs	r0, #8
 8000f54:	f7ff fc34 	bl	80007c0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2123      	movs	r1, #35	; 0x23
 8000f5c:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <MX_GPIO_Init+0xac>)
 8000f5e:	f001 f8ab 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_BTN_Pin */
  GPIO_InitStruct.Pin = TOUCH_BTN_Pin;
 8000f62:	2304      	movs	r3, #4
 8000f64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_GPIO_Init+0xb0>)
 8000f68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TOUCH_BTN_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <MX_GPIO_Init+0xb4>)
 8000f74:	f000 ff30 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <MX_GPIO_Init+0xb4>)
 8000f8a:	f000 ff25 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000f8e:	2323      	movs	r3, #35	; 0x23
 8000f90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_GPIO_Init+0xac>)
 8000fa4:	f000 ff18 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <MX_GPIO_Init+0xb8>)
 8000fba:	f000 ff0d 	bl	8001dd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2008      	movs	r0, #8
 8000fc4:	f000 fed3 	bl	8001d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000fc8:	2008      	movs	r0, #8
 8000fca:	f000 feea 	bl	8001da2 <HAL_NVIC_EnableIRQ>

}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	10110000 	.word	0x10110000
 8000fe0:	48000800 	.word	0x48000800
 8000fe4:	48000c00 	.word	0x48000c00

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <LCD_Debug>:
	ACCEL_ZOUT_L

	MPU6050 slave address: Binary: 1101001 / 1101000. Hex: 69 / 68. Pin AD0 hi / lo.
*/

void LCD_Debug(const char* first_row, const char* second_row){ // Used for debug purposes.
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]

	TextLCD_Puts(&lcd, first_row);
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <LCD_Debug+0x34>)
 8001002:	f7ff fba9 	bl	8000758 <TextLCD_Puts>
	TextLCD_Position(&lcd, 0, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	2100      	movs	r1, #0
 800100a:	4807      	ldr	r0, [pc, #28]	; (8001028 <LCD_Debug+0x34>)
 800100c:	f7ff fb78 	bl	8000700 <TextLCD_Position>
	TextLCD_Puts(&lcd, second_row);
 8001010:	6839      	ldr	r1, [r7, #0]
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <LCD_Debug+0x34>)
 8001014:	f7ff fba0 	bl	8000758 <TextLCD_Puts>
	TextLCD_Home(&lcd);
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <LCD_Debug+0x34>)
 800101a:	f7ff fb65 	bl	80006e8 <TextLCD_Home>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000444 	.word	0x20000444

0800102c <MPU6050_Init>:

HAL_StatusTypeDef MPU6050_Init(MPU6050_Type *sensor, I2C_HandleTypeDef *hi2c) { // Setup. OK
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret; // Used for storing return value of the i2c functions.

	sensor->i2c = hi2c; // Set which i2c to use.
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	601a      	str	r2, [r3, #0]
	sensor->DevAddress = MPU6050_ADDR; // Device address
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	22d0      	movs	r2, #208	; 0xd0
 8001040:	711a      	strb	r2, [r3, #4]

	uint8_t data = 0; // Stores values to be written into the selected register.
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]

	ret = MPU6050_WriteRegister(sensor, PWR_MGMT_1, data, 1);
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	461a      	mov	r2, r3
 800104a:	2301      	movs	r3, #1
 800104c:	216b      	movs	r1, #107	; 0x6b
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f84a 	bl	80010e8 <MPU6050_WriteRegister>
 8001054:	4603      	mov	r3, r0
 8001056:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK) // Check return value.
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <MPU6050_Init+0x3a>
		LCD_Debug("MPU INIT PWR", "MGMT FAILED"); // Display an error if not ok.
 800105e:	491a      	ldr	r1, [pc, #104]	; (80010c8 <MPU6050_Init+0x9c>)
 8001060:	481a      	ldr	r0, [pc, #104]	; (80010cc <MPU6050_Init+0xa0>)
 8001062:	f7ff ffc7 	bl	8000ff4 <LCD_Debug>

	data = 0x07; // Divide 8kHz by (1 + 0x07), 8 / 8 = 1. MPU will now update with the same frequency as its output.
 8001066:	2307      	movs	r3, #7
 8001068:	73fb      	strb	r3, [r7, #15]
	ret = MPU6050_WriteRegister(sensor, SMPLRT_DIV, data, 1);
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	461a      	mov	r2, r3
 800106e:	2301      	movs	r3, #1
 8001070:	2119      	movs	r1, #25
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f838 	bl	80010e8 <MPU6050_WriteRegister>
 8001078:	4603      	mov	r3, r0
 800107a:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK) // Check return value.
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <MPU6050_Init+0x5e>
		LCD_Debug("MPU INIT SMPLRT", "_DIV FAILED");
 8001082:	4913      	ldr	r1, [pc, #76]	; (80010d0 <MPU6050_Init+0xa4>)
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MPU6050_Init+0xa8>)
 8001086:	f7ff ffb5 	bl	8000ff4 <LCD_Debug>

	data = 0x00; // 0
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
	ret = MPU6050_WriteRegister(sensor, ACCEL_CONFIG, data, 1);
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	461a      	mov	r2, r3
 8001092:	2301      	movs	r3, #1
 8001094:	211c      	movs	r1, #28
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f826 	bl	80010e8 <MPU6050_WriteRegister>
 800109c:	4603      	mov	r3, r0
 800109e:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK) // Check return value.
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <MPU6050_Init+0x82>
		LCD_Debug("MPU INIT ACCEL", "CONFIG FAILED");
 80010a6:	490c      	ldr	r1, [pc, #48]	; (80010d8 <MPU6050_Init+0xac>)
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MPU6050_Init+0xb0>)
 80010aa:	f7ff ffa3 	bl	8000ff4 <LCD_Debug>

	if(ret == HAL_OK)
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d103      	bne.n	80010bc <MPU6050_Init+0x90>
		LCD_Debug("MPU INIT:", "SUCCESSFUL");
 80010b4:	490a      	ldr	r1, [pc, #40]	; (80010e0 <MPU6050_Init+0xb4>)
 80010b6:	480b      	ldr	r0, [pc, #44]	; (80010e4 <MPU6050_Init+0xb8>)
 80010b8:	f7ff ff9c 	bl	8000ff4 <LCD_Debug>

	return ret;
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	08005c04 	.word	0x08005c04
 80010cc:	08005c10 	.word	0x08005c10
 80010d0:	08005c20 	.word	0x08005c20
 80010d4:	08005c2c 	.word	0x08005c2c
 80010d8:	08005c3c 	.word	0x08005c3c
 80010dc:	08005c4c 	.word	0x08005c4c
 80010e0:	08005c5c 	.word	0x08005c5c
 80010e4:	08005c68 	.word	0x08005c68

080010e8 <MPU6050_WriteRegister>:

HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050_Type *sensor, uint8_t reg, uint8_t *data, uint8_t bytes){ // Write to the registers.
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b08b      	sub	sp, #44	; 0x2c
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	461a      	mov	r2, r3
 80010f4:	460b      	mov	r3, r1
 80010f6:	72fb      	strb	r3, [r7, #11]
 80010f8:	4613      	mov	r3, r2
 80010fa:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Write(sensor->i2c, sensor->DevAddress, reg, 1, &data, bytes, HAL_MAX_DELAY); // Which register.
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	791b      	ldrb	r3, [r3, #4]
 8001104:	b299      	uxth	r1, r3
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	b29a      	uxth	r2, r3
 800110a:	7abb      	ldrb	r3, [r7, #10]
 800110c:	b29b      	uxth	r3, r3
 800110e:	f04f 34ff 	mov.w	r4, #4294967295
 8001112:	9402      	str	r4, [sp, #8]
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	f001 f980 	bl	8002420 <HAL_I2C_Mem_Write>
 8001120:	4603      	mov	r3, r0
 8001122:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK)
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <MPU6050_WriteRegister+0x4a>
		LCD_Debug("MPU WRITE", "REGISTER FAILED");
 800112a:	4904      	ldr	r1, [pc, #16]	; (800113c <MPU6050_WriteRegister+0x54>)
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <MPU6050_WriteRegister+0x58>)
 800112e:	f7ff ff61 	bl	8000ff4 <LCD_Debug>

	return ret;
 8001132:	7dfb      	ldrb	r3, [r7, #23]
}
 8001134:	4618      	mov	r0, r3
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	08005c74 	.word	0x08005c74
 8001140:	08005c84 	.word	0x08005c84

08001144 <MPU6050_ReadRegisters>:
		LCD_Debug("MPU MEM READ", "REG FAILED");

	return ret;
}

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050_Type *sensor, uint8_t address, uint8_t size){	// Read a specific register, size number of bytes.
 8001144:	b5b0      	push	{r4, r5, r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af04      	add	r7, sp, #16
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
 8001150:	4613      	mov	r3, r2
 8001152:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(sensor->i2c, sensor->DevAddress, address, 1, &sensor->data, size, HAL_MAX_DELAY);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	791b      	ldrb	r3, [r3, #4]
 800115c:	b299      	uxth	r1, r3
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	b29c      	uxth	r4, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3305      	adds	r3, #5
 8001166:	78ba      	ldrb	r2, [r7, #2]
 8001168:	b292      	uxth	r2, r2
 800116a:	f04f 35ff 	mov.w	r5, #4294967295
 800116e:	9502      	str	r5, [sp, #8]
 8001170:	9201      	str	r2, [sp, #4]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	4622      	mov	r2, r4
 8001178:	f001 fa66 	bl	8002648 <HAL_I2C_Mem_Read>
 800117c:	4603      	mov	r3, r0
 800117e:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <MPU6050_ReadRegisters+0x4a>
		LCD_Debug("MPU MEM READ", "REGS FAILED");
 8001186:	4904      	ldr	r1, [pc, #16]	; (8001198 <MPU6050_ReadRegisters+0x54>)
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MPU6050_ReadRegisters+0x58>)
 800118a:	f7ff ff33 	bl	8000ff4 <LCD_Debug>

	return ret;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
} // Read the selected register, and any following registers.
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	08005cac 	.word	0x08005cac
 800119c:	08005c9c 	.word	0x08005c9c

080011a0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	2301      	movs	r3, #1
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	1dfb      	adds	r3, r7, #7
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	2200      	movs	r2, #0
 80011cc:	2178      	movs	r1, #120	; 0x78
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <ssd1306_WriteCommand+0x2c>)
 80011d0:	f001 f926 	bl	8002420 <HAL_I2C_Mem_Write>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000044c 	.word	0x2000044c

080011e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af04      	add	r7, sp, #16
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	f04f 32ff 	mov.w	r2, #4294967295
 80011f2:	9202      	str	r2, [sp, #8]
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2240      	movs	r2, #64	; 0x40
 80011fe:	2178      	movs	r1, #120	; 0x78
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <ssd1306_WriteData+0x30>)
 8001202:	f001 f90d 	bl	8002420 <HAL_I2C_Mem_Write>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000044c 	.word	0x2000044c

08001214 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001218:	f7ff ffc2 	bl	80011a0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800121c:	2064      	movs	r0, #100	; 0x64
 800121e:	f000 fca7 	bl	8001b70 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001222:	2000      	movs	r0, #0
 8001224:	f000 fa34 	bl	8001690 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001228:	2020      	movs	r0, #32
 800122a:	f7ff ffc1 	bl	80011b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ffbe 	bl	80011b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001234:	20b0      	movs	r0, #176	; 0xb0
 8001236:	f7ff ffbb 	bl	80011b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800123a:	20c8      	movs	r0, #200	; 0xc8
 800123c:	f7ff ffb8 	bl	80011b0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ffb5 	bl	80011b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001246:	2010      	movs	r0, #16
 8001248:	f7ff ffb2 	bl	80011b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800124c:	2040      	movs	r0, #64	; 0x40
 800124e:	f7ff ffaf 	bl	80011b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001252:	20ff      	movs	r0, #255	; 0xff
 8001254:	f000 fa09 	bl	800166a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001258:	20a1      	movs	r0, #161	; 0xa1
 800125a:	f7ff ffa9 	bl	80011b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800125e:	20a6      	movs	r0, #166	; 0xa6
 8001260:	f7ff ffa6 	bl	80011b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001264:	20a8      	movs	r0, #168	; 0xa8
 8001266:	f7ff ffa3 	bl	80011b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800126a:	203f      	movs	r0, #63	; 0x3f
 800126c:	f7ff ffa0 	bl	80011b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001270:	20a4      	movs	r0, #164	; 0xa4
 8001272:	f7ff ff9d 	bl	80011b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001276:	20d3      	movs	r0, #211	; 0xd3
 8001278:	f7ff ff9a 	bl	80011b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff ff97 	bl	80011b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001282:	20d5      	movs	r0, #213	; 0xd5
 8001284:	f7ff ff94 	bl	80011b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001288:	20f0      	movs	r0, #240	; 0xf0
 800128a:	f7ff ff91 	bl	80011b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800128e:	20d9      	movs	r0, #217	; 0xd9
 8001290:	f7ff ff8e 	bl	80011b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001294:	2022      	movs	r0, #34	; 0x22
 8001296:	f7ff ff8b 	bl	80011b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800129a:	20da      	movs	r0, #218	; 0xda
 800129c:	f7ff ff88 	bl	80011b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80012a0:	2012      	movs	r0, #18
 80012a2:	f7ff ff85 	bl	80011b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80012a6:	20db      	movs	r0, #219	; 0xdb
 80012a8:	f7ff ff82 	bl	80011b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012ac:	2020      	movs	r0, #32
 80012ae:	f7ff ff7f 	bl	80011b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012b2:	208d      	movs	r0, #141	; 0x8d
 80012b4:	f7ff ff7c 	bl	80011b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80012b8:	2014      	movs	r0, #20
 80012ba:	f7ff ff79 	bl	80011b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012be:	2001      	movs	r0, #1
 80012c0:	f000 f9e6 	bl	8001690 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f80f 	bl	80012e8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012ca:	f000 f831 	bl	8001330 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <ssd1306_Init+0xd0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <ssd1306_Init+0xd0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012da:	4b02      	ldr	r3, [pc, #8]	; (80012e4 <ssd1306_Init+0xd0>)
 80012dc:	2201      	movs	r2, #1
 80012de:	711a      	strb	r2, [r3, #4]
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000438 	.word	0x20000438

080012e8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e00d      	b.n	8001314 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <ssd1306_Fill+0x1a>
 80012fe:	2100      	movs	r1, #0
 8001300:	e000      	b.n	8001304 <ssd1306_Fill+0x1c>
 8001302:	21ff      	movs	r1, #255	; 0xff
 8001304:	4a09      	ldr	r2, [pc, #36]	; (800132c <ssd1306_Fill+0x44>)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	460a      	mov	r2, r1
 800130c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3301      	adds	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131a:	d3ed      	bcc.n	80012f8 <ssd1306_Fill+0x10>
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000038 	.word	0x20000038

08001330 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001336:	2300      	movs	r3, #0
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	e016      	b.n	800136a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	3b50      	subs	r3, #80	; 0x50
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff34 	bl	80011b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff ff31 	bl	80011b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800134e:	2010      	movs	r0, #16
 8001350:	f7ff ff2e 	bl	80011b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	01db      	lsls	r3, r3, #7
 8001358:	4a08      	ldr	r2, [pc, #32]	; (800137c <ssd1306_UpdateScreen+0x4c>)
 800135a:	4413      	add	r3, r2
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff3e 	bl	80011e0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	3301      	adds	r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b07      	cmp	r3, #7
 800136e:	d9e5      	bls.n	800133c <ssd1306_UpdateScreen+0xc>
    }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000038 	.word	0x20000038

08001380 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	460b      	mov	r3, r1
 800138c:	71bb      	strb	r3, [r7, #6]
 800138e:	4613      	mov	r3, r2
 8001390:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db3d      	blt.n	8001416 <ssd1306_DrawPixel+0x96>
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	2b3f      	cmp	r3, #63	; 0x3f
 800139e:	d83a      	bhi.n	8001416 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80013a0:	797b      	ldrb	r3, [r7, #5]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d11a      	bne.n	80013dc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	b2d8      	uxtb	r0, r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	01db      	lsls	r3, r3, #7
 80013b2:	4413      	add	r3, r2
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <ssd1306_DrawPixel+0xa4>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	2101      	movs	r1, #1
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b259      	sxtb	r1, r3
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	4603      	mov	r3, r0
 80013d0:	01db      	lsls	r3, r3, #7
 80013d2:	4413      	add	r3, r2
 80013d4:	b2c9      	uxtb	r1, r1
 80013d6:	4a13      	ldr	r2, [pc, #76]	; (8001424 <ssd1306_DrawPixel+0xa4>)
 80013d8:	54d1      	strb	r1, [r2, r3]
 80013da:	e01d      	b.n	8001418 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	08db      	lsrs	r3, r3, #3
 80013e2:	b2d8      	uxtb	r0, r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	01db      	lsls	r3, r3, #7
 80013e8:	4413      	add	r3, r2
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <ssd1306_DrawPixel+0xa4>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	b25a      	sxtb	r2, r3
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	b25b      	sxtb	r3, r3
 8001402:	4013      	ands	r3, r2
 8001404:	b259      	sxtb	r1, r3
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	4603      	mov	r3, r0
 800140a:	01db      	lsls	r3, r3, #7
 800140c:	4413      	add	r3, r2
 800140e:	b2c9      	uxtb	r1, r1
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <ssd1306_DrawPixel+0xa4>)
 8001412:	54d1      	strb	r1, [r2, r3]
 8001414:	e000      	b.n	8001418 <ssd1306_DrawPixel+0x98>
        return;
 8001416:	bf00      	nop
    }
}
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000038 	.word	0x20000038

08001428 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	4604      	mov	r4, r0
 8001430:	1d38      	adds	r0, r7, #4
 8001432:	e880 0006 	stmia.w	r0, {r1, r2}
 8001436:	461a      	mov	r2, r3
 8001438:	4623      	mov	r3, r4
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	4613      	mov	r3, r2
 800143e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2b1f      	cmp	r3, #31
 8001444:	d902      	bls.n	800144c <ssd1306_WriteChar+0x24>
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	2b7e      	cmp	r3, #126	; 0x7e
 800144a:	d901      	bls.n	8001450 <ssd1306_WriteChar+0x28>
        return 0;
 800144c:	2300      	movs	r3, #0
 800144e:	e06d      	b.n	800152c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001450:	4b38      	ldr	r3, [pc, #224]	; (8001534 <ssd1306_WriteChar+0x10c>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	2b80      	cmp	r3, #128	; 0x80
 800145c:	dc06      	bgt.n	800146c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800145e:	4b35      	ldr	r3, [pc, #212]	; (8001534 <ssd1306_WriteChar+0x10c>)
 8001460:	885b      	ldrh	r3, [r3, #2]
 8001462:	461a      	mov	r2, r3
 8001464:	797b      	ldrb	r3, [r7, #5]
 8001466:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001468:	2b40      	cmp	r3, #64	; 0x40
 800146a:	dd01      	ble.n	8001470 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800146c:	2300      	movs	r3, #0
 800146e:	e05d      	b.n	800152c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	e04c      	b.n	8001510 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	3b20      	subs	r3, #32
 800147c:	7979      	ldrb	r1, [r7, #5]
 800147e:	fb01 f303 	mul.w	r3, r1, r3
 8001482:	4619      	mov	r1, r3
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	440b      	add	r3, r1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	e034      	b.n	8001500 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d012      	beq.n	80014cc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <ssd1306_WriteChar+0x10c>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	b2d8      	uxtb	r0, r3
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <ssd1306_WriteChar+0x10c>)
 80014b6:	885b      	ldrh	r3, [r3, #2]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	7bba      	ldrb	r2, [r7, #14]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff ff5b 	bl	8001380 <ssd1306_DrawPixel>
 80014ca:	e016      	b.n	80014fa <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <ssd1306_WriteChar+0x10c>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b2d8      	uxtb	r0, r3
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <ssd1306_WriteChar+0x10c>)
 80014dc:	885b      	ldrh	r3, [r3, #2]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	b2d9      	uxtb	r1, r3
 80014e8:	7bbb      	ldrb	r3, [r7, #14]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	bf0c      	ite	eq
 80014ee:	2301      	moveq	r3, #1
 80014f0:	2300      	movne	r3, #0
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	f7ff ff43 	bl	8001380 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	793b      	ldrb	r3, [r7, #4]
 8001502:	461a      	mov	r2, r3
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	4293      	cmp	r3, r2
 8001508:	d3c5      	bcc.n	8001496 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	797b      	ldrb	r3, [r7, #5]
 8001512:	461a      	mov	r2, r3
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4293      	cmp	r3, r2
 8001518:	d3ad      	bcc.n	8001476 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <ssd1306_WriteChar+0x10c>)
 800151c:	881a      	ldrh	r2, [r3, #0]
 800151e:	793b      	ldrb	r3, [r7, #4]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4413      	add	r3, r2
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b03      	ldr	r3, [pc, #12]	; (8001534 <ssd1306_WriteChar+0x10c>)
 8001528:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3724      	adds	r7, #36	; 0x24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	20000438 	.word	0x20000438

08001538 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	1d38      	adds	r0, r7, #4
 8001542:	e880 0006 	stmia.w	r0, {r1, r2}
 8001546:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001548:	e012      	b.n	8001570 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	7818      	ldrb	r0, [r3, #0]
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	1d3a      	adds	r2, r7, #4
 8001552:	ca06      	ldmia	r2, {r1, r2}
 8001554:	f7ff ff68 	bl	8001428 <ssd1306_WriteChar>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d002      	beq.n	800156a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	e008      	b.n	800157c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e8      	bne.n	800154a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	781b      	ldrb	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	460a      	mov	r2, r1
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	4613      	mov	r3, r2
 8001592:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <ssd1306_SetCursor+0x2c>)
 800159a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <ssd1306_SetCursor+0x2c>)
 80015a2:	805a      	strh	r2, [r3, #2]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	20000438 	.word	0x20000438

080015b4 <ssd1306_DrawBitmap>:
}

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	603a      	str	r2, [r7, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	460b      	mov	r3, r1
 80015c4:	71bb      	strb	r3, [r7, #6]
 80015c6:	4613      	mov	r3, r2
 80015c8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80015ca:	797b      	ldrb	r3, [r7, #5]
 80015cc:	3307      	adds	r3, #7
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da00      	bge.n	80015d4 <ssd1306_DrawBitmap+0x20>
 80015d2:	3307      	adds	r3, #7
 80015d4:	10db      	asrs	r3, r3, #3
 80015d6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db3e      	blt.n	8001662 <ssd1306_DrawBitmap+0xae>
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	2b3f      	cmp	r3, #63	; 0x3f
 80015e8:	d83b      	bhi.n	8001662 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	73bb      	strb	r3, [r7, #14]
 80015ee:	e033      	b.n	8001658 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	737b      	strb	r3, [r7, #13]
 80015f4:	e026      	b.n	8001644 <ssd1306_DrawBitmap+0x90>
            if (i & 7)
 80015f6:	7b7b      	ldrb	r3, [r7, #13]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e00d      	b.n	8001624 <ssd1306_DrawBitmap+0x70>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	7b7a      	ldrb	r2, [r7, #13]
 8001614:	08d2      	lsrs	r2, r2, #3
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	4413      	add	r3, r2
 800161a:	461a      	mov	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	4413      	add	r3, r2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	73fb      	strb	r3, [r7, #15]
            if (byte & 0x80)
 8001624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da08      	bge.n	800163e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	4413      	add	r3, r2
 8001632:	b2db      	uxtb	r3, r3
 8001634:	7f3a      	ldrb	r2, [r7, #28]
 8001636:	79b9      	ldrb	r1, [r7, #6]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fea1 	bl	8001380 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800163e:	7b7b      	ldrb	r3, [r7, #13]
 8001640:	3301      	adds	r3, #1
 8001642:	737b      	strb	r3, [r7, #13]
 8001644:	7b7a      	ldrb	r2, [r7, #13]
 8001646:	797b      	ldrb	r3, [r7, #5]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3d4      	bcc.n	80015f6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800164c:	7bbb      	ldrb	r3, [r7, #14]
 800164e:	3301      	adds	r3, #1
 8001650:	73bb      	strb	r3, [r7, #14]
 8001652:	79bb      	ldrb	r3, [r7, #6]
 8001654:	3301      	adds	r3, #1
 8001656:	71bb      	strb	r3, [r7, #6]
 8001658:	7bba      	ldrb	r2, [r7, #14]
 800165a:	7e3b      	ldrb	r3, [r7, #24]
 800165c:	429a      	cmp	r2, r3
 800165e:	d3c7      	bcc.n	80015f0 <ssd1306_DrawBitmap+0x3c>
        }
    }
    return;
 8001660:	e000      	b.n	8001664 <ssd1306_DrawBitmap+0xb0>
        return;
 8001662:	bf00      	nop
}
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001674:	2381      	movs	r3, #129	; 0x81
 8001676:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fd98 	bl	80011b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fd94 	bl	80011b0 <ssd1306_WriteCommand>
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80016a0:	23af      	movs	r3, #175	; 0xaf
 80016a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <ssd1306_SetDisplayOn+0x38>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	715a      	strb	r2, [r3, #5]
 80016aa:	e004      	b.n	80016b6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80016ac:	23ae      	movs	r3, #174	; 0xae
 80016ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <ssd1306_SetDisplayOn+0x38>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fd79 	bl	80011b0 <ssd1306_WriteCommand>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000438 	.word	0x20000438

080016cc <drawGarfield>:
    HAL_Delay(3000);
    ssd1306_TestDrawBitmap();
    HAL_Delay(3000);
}

void drawGarfield(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff fe08 	bl	80012e8 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, garfield_128x64, 128, 64, White);
 80016d8:	2301      	movs	r3, #1
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	2340      	movs	r3, #64	; 0x40
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <drawGarfield+0x2c>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff ff64 	bl	80015b4 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80016ec:	f7ff fe20 	bl	8001330 <ssd1306_UpdateScreen>
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	08006450 	.word	0x08006450

080016fc <LL_AHB2_GRP1_EnableClock>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800170a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4313      	orrs	r3, r2
 8001712:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001718:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001720:	68fb      	ldr	r3, [r7, #12]
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800172e:	b480      	push	{r7}
 8001730:	b085      	sub	sp, #20
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800173c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4313      	orrs	r3, r2
 8001744:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4013      	ands	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800176e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4313      	orrs	r3, r2
 8001776:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001784:	68fb      	ldr	r3, [r7, #12]
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <HAL_I2C_MspInit+0x5c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d117      	bne.n	80017f2 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2002      	movs	r0, #2
 80017c4:	f7ff ff9a 	bl	80016fc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ce:	2312      	movs	r3, #18
 80017d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017da:	2304      	movs	r3, #4
 80017dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4619      	mov	r1, r3
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <HAL_I2C_MspInit+0x60>)
 80017e6:	f000 faf7 	bl	8001dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80017ee:	f7ff ff9e 	bl	800172e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3720      	adds	r7, #32
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40005400 	.word	0x40005400
 8001800:	48000400 	.word	0x48000400

08001804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_TIM_Base_MspInit+0x24>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d103      	bne.n	800181e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001816:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800181a:	f7ff ffa1 	bl	8001760 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40012c00 	.word	0x40012c00

0800182c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <HAL_UART_MspInit+0x58>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d116      	bne.n	800187c <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800184e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001852:	f7ff ff85 	bl	8001760 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2002      	movs	r0, #2
 8001858:	f7ff ff50 	bl	80016fc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800185c:	23c0      	movs	r3, #192	; 0xc0
 800185e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001864:	2301      	movs	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800186c:	2307      	movs	r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <HAL_UART_MspInit+0x5c>)
 8001878:	f000 faae 	bl	8001dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40013800 	.word	0x40013800
 8001888:	48000400 	.word	0x48000400

0800188c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <HAL_PCD_MspInit+0x5c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d118      	bne.n	80018e0 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff ff24 	bl	80016fc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80018c6:	230a      	movs	r3, #10
 80018c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d4:	f000 fa80 	bl	8001dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80018d8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80018dc:	f7ff ff27 	bl	800172e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40006800 	.word	0x40006800

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <NMI_Handler+0x4>

080018f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <MemManage_Handler+0x4>

080018fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>

0800190a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001938:	f000 f8ee 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}

08001940 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001944:	2004      	movs	r0, #4
 8001946:	f000 fbcf 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <SystemInit+0x98>)
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <SystemInit+0x98>)
 800195c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800197c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <SystemInit+0x9c>)
 800198a:	4013      	ands	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800198e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199a:	f023 0305 	bic.w	r3, r3, #5
 800199e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <SystemInit+0xa0>)
 80019bc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c2:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <SystemInit+0xa0>)
 80019c4:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00
 80019ec:	faf6fefb 	.word	0xfaf6fefb
 80019f0:	22041000 	.word	0x22041000

080019f4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019f4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f8:	3304      	adds	r3, #4

080019fa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019fe:	d3f9      	bcc.n	80019f4 <CopyDataInit>
  bx lr
 8001a00:	4770      	bx	lr

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001a02:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001a04:	3004      	adds	r0, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001a06:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>
  bx lr
 8001a0a:	4770      	bx	lr

08001a0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001a0e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a10:	f7ff ff9e 	bl	8001950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <LoopForever+0x8>)
 8001a16:	490c      	ldr	r1, [pc, #48]	; (8001a48 <LoopForever+0xc>)
 8001a18:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <LoopForever+0x10>)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f7ff ffed 	bl	80019fa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a20:	480b      	ldr	r0, [pc, #44]	; (8001a50 <LoopForever+0x14>)
 8001a22:	490c      	ldr	r1, [pc, #48]	; (8001a54 <LoopForever+0x18>)
 8001a24:	2300      	movs	r3, #0
 8001a26:	f7ff ffee 	bl	8001a06 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <LoopForever+0x1c>)
 8001a2c:	490b      	ldr	r1, [pc, #44]	; (8001a5c <LoopForever+0x20>)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f7ff ffe9 	bl	8001a06 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a34:	f004 f880 	bl	8005b38 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001a38:	f7ff f888 	bl	8000b4c <main>

08001a3c <LoopForever>:

LoopForever:
  b LoopForever
 8001a3c:	e7fe      	b.n	8001a3c <LoopForever>
 8001a3e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001a40:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a44:	20000004 	.word	0x20000004
 8001a48:	2000001c 	.word	0x2000001c
 8001a4c:	08006928 	.word	0x08006928
  INIT_BSS _sbss, _ebss
 8001a50:	2000001c 	.word	0x2000001c
 8001a54:	20000894 	.word	0x20000894
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a58:	20030000 	.word	0x20030000
 8001a5c:	20030000 	.word	0x20030000

08001a60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC1_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_Init+0x3c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <HAL_Init+0x3c>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	f000 f96c 	bl	8001d58 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a80:	2000      	movs	r0, #0
 8001a82:	f000 f80f 	bl	8001aa4 <HAL_InitTick>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	71fb      	strb	r3, [r7, #7]
 8001a90:	e001      	b.n	8001a96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a92:	f7ff fe7e 	bl	8001792 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a96:	79fb      	ldrb	r3, [r7, #7]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	58004000 	.word	0x58004000

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_InitTick+0x6c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d024      	beq.n	8001b02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ab8:	f002 fb6e 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_InitTick+0x6c>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f974 	bl	8001dbe <HAL_SYSTICK_Config>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10f      	bne.n	8001afc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	d809      	bhi.n	8001af6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aea:	f000 f940 	bl	8001d6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_InitTick+0x70>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e007      	b.n	8001b06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e004      	b.n	8001b06 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e001      	b.n	8001b06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000018 	.word	0x20000018
 8001b14:	20000014 	.word	0x20000014

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000018 	.word	0x20000018
 8001b3c:	20000890 	.word	0x20000890

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000890 	.word	0x20000890

08001b58 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_GetTickPrio+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000014 	.word	0x20000014

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff ffe2 	bl	8001b40 <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_Delay+0x44>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001b96:	bf00      	nop
 8001b98:	f7ff ffd2 	bl	8001b40 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
    {
    }
  }
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000018 	.word	0x20000018

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <__NVIC_GetPriorityGrouping+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 0307 	and.w	r3, r3, #7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4907      	ldr	r1, [pc, #28]	; (8001c54 <__NVIC_EnableIRQ+0x38>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d24:	d301      	bcc.n	8001d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00f      	b.n	8001d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <SysTick_Config+0x40>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d32:	210f      	movs	r1, #15
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f7ff ff8e 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SysTick_Config+0x40>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SysTick_Config+0x40>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	e000e010 	.word	0xe000e010

08001d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff29 	bl	8001bb8 <__NVIC_SetPriorityGrouping>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff40 	bl	8001c00 <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff90 	bl	8001cac <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5f 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff33 	bl	8001c1c <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa4 	bl	8001d14 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	e14c      	b.n	8002082 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2101      	movs	r1, #1
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	4013      	ands	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 813e 	beq.w	800207c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d00b      	beq.n	8001e20 <HAL_GPIO_Init+0x48>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d007      	beq.n	8001e20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e14:	2b11      	cmp	r3, #17
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b12      	cmp	r3, #18
 8001e1e:	d130      	bne.n	8001e82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e56:	2201      	movs	r2, #1
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 0201 	and.w	r2, r3, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0xea>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b12      	cmp	r3, #18
 8001ec0:	d123      	bne.n	8001f0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	08da      	lsrs	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3208      	adds	r2, #8
 8001eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	08da      	lsrs	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3208      	adds	r2, #8
 8001f04:	6939      	ldr	r1, [r7, #16]
 8001f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0203 	and.w	r2, r3, #3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8098 	beq.w	800207c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f4c:	4a54      	ldr	r2, [pc, #336]	; (80020a0 <HAL_GPIO_Init+0x2c8>)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f76:	d019      	beq.n	8001fac <HAL_GPIO_Init+0x1d4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a4a      	ldr	r2, [pc, #296]	; (80020a4 <HAL_GPIO_Init+0x2cc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_GPIO_Init+0x1d0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a49      	ldr	r2, [pc, #292]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00d      	beq.n	8001fa4 <HAL_GPIO_Init+0x1cc>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a48      	ldr	r2, [pc, #288]	; (80020ac <HAL_GPIO_Init+0x2d4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <HAL_GPIO_Init+0x1c8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a47      	ldr	r2, [pc, #284]	; (80020b0 <HAL_GPIO_Init+0x2d8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_GPIO_Init+0x1c4>
 8001f98:	2304      	movs	r3, #4
 8001f9a:	e008      	b.n	8001fae <HAL_GPIO_Init+0x1d6>
 8001f9c:	2307      	movs	r3, #7
 8001f9e:	e006      	b.n	8001fae <HAL_GPIO_Init+0x1d6>
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e004      	b.n	8001fae <HAL_GPIO_Init+0x1d6>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_Init+0x1d6>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_GPIO_Init+0x1d6>
 8001fac:	2300      	movs	r3, #0
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	f002 0203 	and.w	r2, r2, #3
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	4093      	lsls	r3, r2
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fbe:	4938      	ldr	r1, [pc, #224]	; (80020a0 <HAL_GPIO_Init+0x2c8>)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8001fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ff2:	4a30      	ldr	r2, [pc, #192]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001ffa:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8001ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002020:	4a24      	ldr	r2, [pc, #144]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002028:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002076:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	f47f aeab 	bne.w	8001de8 <HAL_GPIO_Init+0x10>
  }
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40010000 	.word	0x40010000
 80020a4:	48000400 	.word	0x48000400
 80020a8:	48000800 	.word	0x48000800
 80020ac:	48000c00 	.word	0x48000c00
 80020b0:	48001000 	.word	0x48001000
 80020b4:	58000800 	.word	0x58000800

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fd0c 	bl	8000b24 <HAL_GPIO_EXTI_Callback>
  }
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	58000800 	.word	0x58000800

08002118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e081      	b.n	800222e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fb2e 	bl	80017a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2224      	movs	r2, #36	; 0x24
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002168:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002178:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	e006      	b.n	80021a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800219e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d104      	bne.n	80021b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	ea42 0103 	orr.w	r1, r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	021a      	lsls	r2, r3, #8
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69d9      	ldr	r1, [r3, #28]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	461a      	mov	r2, r3
 8002244:	460b      	mov	r3, r1
 8002246:	817b      	strh	r3, [r7, #10]
 8002248:	4613      	mov	r3, r2
 800224a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b20      	cmp	r3, #32
 8002256:	f040 80da 	bne.w	800240e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_I2C_Master_Transmit+0x30>
 8002264:	2302      	movs	r3, #2
 8002266:	e0d3      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002270:	f7ff fc66 	bl	8001b40 <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2319      	movs	r3, #25
 800227c:	2201      	movs	r2, #1
 800227e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fbc6 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0be      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2221      	movs	r2, #33	; 0x21
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2210      	movs	r2, #16
 800229e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	893a      	ldrh	r2, [r7, #8]
 80022b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2bff      	cmp	r3, #255	; 0xff
 80022c2:	d90e      	bls.n	80022e2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	22ff      	movs	r2, #255	; 0xff
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	8979      	ldrh	r1, [r7, #10]
 80022d2:	4b51      	ldr	r3, [pc, #324]	; (8002418 <HAL_I2C_Master_Transmit+0x1e0>)
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 fcbc 	bl	8002c58 <I2C_TransferConfig>
 80022e0:	e06c      	b.n	80023bc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	8979      	ldrh	r1, [r7, #10]
 80022f4:	4b48      	ldr	r3, [pc, #288]	; (8002418 <HAL_I2C_Master_Transmit+0x1e0>)
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fcab 	bl	8002c58 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002302:	e05b      	b.n	80023bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	6a39      	ldr	r1, [r7, #32]
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fbc3 	bl	8002a94 <I2C_WaitOnTXISFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e07b      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d034      	beq.n	80023bc <HAL_I2C_Master_Transmit+0x184>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002356:	2b00      	cmp	r3, #0
 8002358:	d130      	bne.n	80023bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2200      	movs	r2, #0
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fb55 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e04d      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	2bff      	cmp	r3, #255	; 0xff
 800237c:	d90e      	bls.n	800239c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	22ff      	movs	r2, #255	; 0xff
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	b2da      	uxtb	r2, r3
 800238a:	8979      	ldrh	r1, [r7, #10]
 800238c:	2300      	movs	r3, #0
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fc5f 	bl	8002c58 <I2C_TransferConfig>
 800239a:	e00f      	b.n	80023bc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	8979      	ldrh	r1, [r7, #10]
 80023ae:	2300      	movs	r3, #0
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fc4e 	bl	8002c58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d19e      	bne.n	8002304 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	6a39      	ldr	r1, [r7, #32]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fba2 	bl	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e01a      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2220      	movs	r2, #32
 80023e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_I2C_Master_Transmit+0x1e4>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e000      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800240e:	2302      	movs	r3, #2
  }
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	80002000 	.word	0x80002000
 800241c:	fe00e800 	.word	0xfe00e800

08002420 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	4608      	mov	r0, r1
 800242a:	4611      	mov	r1, r2
 800242c:	461a      	mov	r2, r3
 800242e:	4603      	mov	r3, r0
 8002430:	817b      	strh	r3, [r7, #10]
 8002432:	460b      	mov	r3, r1
 8002434:	813b      	strh	r3, [r7, #8]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b20      	cmp	r3, #32
 8002444:	f040 80f9 	bne.w	800263a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_I2C_Mem_Write+0x34>
 800244e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0ed      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_I2C_Mem_Write+0x4e>
 800246a:	2302      	movs	r3, #2
 800246c:	e0e6      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002476:	f7ff fb63 	bl	8001b40 <HAL_GetTick>
 800247a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2319      	movs	r3, #25
 8002482:	2201      	movs	r2, #1
 8002484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fac3 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0d1      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2221      	movs	r2, #33	; 0x21
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2240      	movs	r2, #64	; 0x40
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024c0:	88f8      	ldrh	r0, [r7, #6]
 80024c2:	893a      	ldrh	r2, [r7, #8]
 80024c4:	8979      	ldrh	r1, [r7, #10]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4603      	mov	r3, r0
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f9d3 	bl	800287c <I2C_RequestMemoryWrite>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0a9      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2bff      	cmp	r3, #255	; 0xff
 80024f0:	d90e      	bls.n	8002510 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	22ff      	movs	r2, #255	; 0xff
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fba5 	bl	8002c58 <I2C_TransferConfig>
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	b2da      	uxtb	r2, r3
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	2300      	movs	r3, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fb94 	bl	8002c58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 faad 	bl	8002a94 <I2C_WaitOnTXISFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e07b      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d034      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x1c8>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	2b00      	cmp	r3, #0
 8002584:	d130      	bne.n	80025e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258c:	2200      	movs	r2, #0
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fa3f 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e04d      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2bff      	cmp	r3, #255	; 0xff
 80025a8:	d90e      	bls.n	80025c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	22ff      	movs	r2, #255	; 0xff
 80025ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	8979      	ldrh	r1, [r7, #10]
 80025b8:	2300      	movs	r3, #0
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fb49 	bl	8002c58 <I2C_TransferConfig>
 80025c6:	e00f      	b.n	80025e8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	8979      	ldrh	r1, [r7, #10]
 80025da:	2300      	movs	r3, #0
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fb38 	bl	8002c58 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d19e      	bne.n	8002530 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fa8c 	bl	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e01a      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2220      	movs	r2, #32
 800260c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_I2C_Mem_Write+0x224>)
 800261a:	400b      	ands	r3, r1
 800261c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e000      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800263a:	2302      	movs	r3, #2
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	fe00e800 	.word	0xfe00e800

08002648 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	817b      	strh	r3, [r7, #10]
 800265a:	460b      	mov	r3, r1
 800265c:	813b      	strh	r3, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	f040 80fd 	bne.w	800286a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_I2C_Mem_Read+0x34>
 8002676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002682:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0f1      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_I2C_Mem_Read+0x4e>
 8002692:	2302      	movs	r3, #2
 8002694:	e0ea      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800269e:	f7ff fa4f 	bl	8001b40 <HAL_GetTick>
 80026a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2319      	movs	r3, #25
 80026aa:	2201      	movs	r2, #1
 80026ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f9af 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0d5      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2222      	movs	r2, #34	; 0x22
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2240      	movs	r2, #64	; 0x40
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026e8:	88f8      	ldrh	r0, [r7, #6]
 80026ea:	893a      	ldrh	r2, [r7, #8]
 80026ec:	8979      	ldrh	r1, [r7, #10]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	4603      	mov	r3, r0
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f913 	bl	8002924 <I2C_RequestMemoryRead>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0ad      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	2bff      	cmp	r3, #255	; 0xff
 8002718:	d90e      	bls.n	8002738 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	22ff      	movs	r2, #255	; 0xff
 800271e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	b2da      	uxtb	r2, r3
 8002726:	8979      	ldrh	r1, [r7, #10]
 8002728:	4b52      	ldr	r3, [pc, #328]	; (8002874 <HAL_I2C_Mem_Read+0x22c>)
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fa91 	bl	8002c58 <I2C_TransferConfig>
 8002736:	e00f      	b.n	8002758 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002746:	b2da      	uxtb	r2, r3
 8002748:	8979      	ldrh	r1, [r7, #10]
 800274a:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <HAL_I2C_Mem_Read+0x22c>)
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa80 	bl	8002c58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	2200      	movs	r2, #0
 8002760:	2104      	movs	r1, #4
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f956 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07c      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d034      	beq.n	8002818 <HAL_I2C_Mem_Read+0x1d0>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d130      	bne.n	8002818 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	2200      	movs	r2, #0
 80027be:	2180      	movs	r1, #128	; 0x80
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f927 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e04d      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2bff      	cmp	r3, #255	; 0xff
 80027d8:	d90e      	bls.n	80027f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	22ff      	movs	r2, #255	; 0xff
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	8979      	ldrh	r1, [r7, #10]
 80027e8:	2300      	movs	r3, #0
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fa31 	bl	8002c58 <I2C_TransferConfig>
 80027f6:	e00f      	b.n	8002818 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	b2da      	uxtb	r2, r3
 8002808:	8979      	ldrh	r1, [r7, #10]
 800280a:	2300      	movs	r3, #0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fa20 	bl	8002c58 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d19a      	bne.n	8002758 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f974 	bl	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e01a      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2220      	movs	r2, #32
 800283c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_I2C_Mem_Read+0x230>)
 800284a:	400b      	ands	r3, r1
 800284c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800286a:	2302      	movs	r3, #2
  }
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	80002400 	.word	0x80002400
 8002878:	fe00e800 	.word	0xfe00e800

0800287c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	4608      	mov	r0, r1
 8002886:	4611      	mov	r1, r2
 8002888:	461a      	mov	r2, r3
 800288a:	4603      	mov	r3, r0
 800288c:	817b      	strh	r3, [r7, #10]
 800288e:	460b      	mov	r3, r1
 8002890:	813b      	strh	r3, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	8979      	ldrh	r1, [r7, #10]
 800289c:	4b20      	ldr	r3, [pc, #128]	; (8002920 <I2C_RequestMemoryWrite+0xa4>)
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f9d7 	bl	8002c58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	69b9      	ldr	r1, [r7, #24]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f8f0 	bl	8002a94 <I2C_WaitOnTXISFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e02c      	b.n	8002918 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c4:	893b      	ldrh	r3, [r7, #8]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28
 80028ce:	e015      	b.n	80028fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028d0:	893b      	ldrh	r3, [r7, #8]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	69b9      	ldr	r1, [r7, #24]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f8d6 	bl	8002a94 <I2C_WaitOnTXISFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e012      	b.n	8002918 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028f2:	893b      	ldrh	r3, [r7, #8]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2200      	movs	r2, #0
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f884 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	80002000 	.word	0x80002000

08002924 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	4608      	mov	r0, r1
 800292e:	4611      	mov	r1, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	817b      	strh	r3, [r7, #10]
 8002936:	460b      	mov	r3, r1
 8002938:	813b      	strh	r3, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	8979      	ldrh	r1, [r7, #10]
 8002944:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <I2C_RequestMemoryRead+0xa4>)
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2300      	movs	r3, #0
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f984 	bl	8002c58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	69b9      	ldr	r1, [r7, #24]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f89d 	bl	8002a94 <I2C_WaitOnTXISFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e02c      	b.n	80029be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d105      	bne.n	8002976 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800296a:	893b      	ldrh	r3, [r7, #8]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
 8002974:	e015      	b.n	80029a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002976:	893b      	ldrh	r3, [r7, #8]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	b29b      	uxth	r3, r3
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	69b9      	ldr	r1, [r7, #24]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f883 	bl	8002a94 <I2C_WaitOnTXISFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e012      	b.n	80029be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002998:	893b      	ldrh	r3, [r7, #8]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2140      	movs	r1, #64	; 0x40
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f831 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	80002000 	.word	0x80002000

080029cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d103      	bne.n	80029ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2200      	movs	r2, #0
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d007      	beq.n	8002a08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	619a      	str	r2, [r3, #24]
  }
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a24:	e022      	b.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d01e      	beq.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2e:	f7ff f887 	bl	8001b40 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d302      	bcc.n	8002a44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d113      	bne.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e00f      	b.n	8002a8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4013      	ands	r3, r2
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d0cd      	beq.n	8002a26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002aa0:	e02c      	b.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f870 	bl	8002b8c <I2C_IsAcknowledgeFailed>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e02a      	b.n	8002b0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d01e      	beq.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7ff f83f 	bl	8001b40 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d113      	bne.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e007      	b.n	8002b0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d1cb      	bne.n	8002aa2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b20:	e028      	b.n	8002b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f830 	bl	8002b8c <I2C_IsAcknowledgeFailed>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e026      	b.n	8002b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7ff f803 	bl	8001b40 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d113      	bne.n	8002b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e007      	b.n	8002b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d1cf      	bne.n	8002b22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d151      	bne.n	8002c4a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba6:	e022      	b.n	8002bee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bae:	d01e      	beq.n	8002bee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb0:	f7fe ffc6 	bl	8001b40 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d302      	bcc.n	8002bc6 <I2C_IsAcknowledgeFailed+0x3a>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d113      	bne.n	8002bee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f043 0220 	orr.w	r2, r3, #32
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e02e      	b.n	8002c4c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d1d5      	bne.n	8002ba8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2210      	movs	r2, #16
 8002c02:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff fedd 	bl	80029cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <I2C_IsAcknowledgeFailed+0xc8>)
 8002c1e:	400b      	ands	r3, r1
 8002c20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f043 0204 	orr.w	r2, r3, #4
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	fe00e800 	.word	0xfe00e800

08002c58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	817b      	strh	r3, [r7, #10]
 8002c66:	4613      	mov	r3, r2
 8002c68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	0d5b      	lsrs	r3, r3, #21
 8002c74:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c78:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <I2C_TransferConfig+0x58>)
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	ea02 0103 	and.w	r1, r2, r3
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c88:	7a7b      	ldrb	r3, [r7, #9]
 8002c8a:	041b      	lsls	r3, r3, #16
 8002c8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	03ff63ff 	.word	0x03ff63ff

08002cb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d138      	bne.n	8002d3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e032      	b.n	8002d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2224      	movs	r2, #36	; 0x24
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d139      	bne.n	8002dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e033      	b.n	8002dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2224      	movs	r2, #36	; 0x24
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de4:	b08b      	sub	sp, #44	; 0x2c
 8002de6:	af06      	add	r7, sp, #24
 8002de8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0d7      	b.n	8002fa4 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7fe fd3f 	bl	800188c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2203      	movs	r2, #3
 8002e12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f002 fe50 	bl	8005ac0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e04c      	b.n	8002ec0 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	3301      	adds	r3, #1
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	b298      	uxth	r0, r3
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	440b      	add	r3, r1
 8002e62:	3336      	adds	r3, #54	; 0x36
 8002e64:	4602      	mov	r2, r0
 8002e66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	3303      	adds	r3, #3
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3338      	adds	r3, #56	; 0x38
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	333c      	adds	r3, #60	; 0x3c
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3340      	adds	r3, #64	; 0x40
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d3ad      	bcc.n	8002e26 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	e044      	b.n	8002f5a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	440b      	add	r3, r1
 8002ede:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	440b      	add	r3, r1
 8002f0a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f3e:	7bfa      	ldrb	r2, [r7, #15]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	3301      	adds	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d3b5      	bcc.n	8002ed0 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	687e      	ldr	r6, [r7, #4]
 8002f6c:	466d      	mov	r5, sp
 8002f6e:	f106 0410 	add.w	r4, r6, #16
 8002f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	602b      	str	r3, [r5, #0]
 8002f7a:	1d33      	adds	r3, r6, #4
 8002f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f7e:	6838      	ldr	r0, [r7, #0]
 8002f80:	f002 fdb9 	bl	8005af6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d102      	bne.n	8002fa2 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f805 	bl	8002fac <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f043 0302 	orr.w	r3, r3, #2
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	58000400 	.word	0x58000400

08003020 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <HAL_PWREx_GetVoltageRange+0x18>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	58000400 	.word	0x58000400

0800303c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800304e:	d101      	bne.n	8003054 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_RCC_HSE_Enable>:
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <LL_RCC_HSE_Disable>:
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800308c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003090:	6013      	str	r3, [r2, #0]
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_RCC_HSE_IsReady>:
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80030a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030ae:	d101      	bne.n	80030b4 <LL_RCC_HSE_IsReady+0x18>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <LL_RCC_HSE_IsReady+0x1a>
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_RCC_HSI_Enable>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80030c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <LL_RCC_HSI_Disable>:
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]
}
 80030f2:	bf00      	nop
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_RCC_HSI_IsReady>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310e:	d101      	bne.n	8003114 <LL_RCC_HSI_IsReady+0x18>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <LL_RCC_HSI_IsReady+0x1a>
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_RCC_HSI48_Enable>:
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800314e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003156:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_RCC_HSI48_Disable>:
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <LL_RCC_HSI48_IsReady>:
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d101      	bne.n	80031a6 <LL_RCC_HSI48_IsReady+0x18>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <LL_RCC_HSI48_IsReady+0x1a>
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_RCC_LSE_Enable>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031ca:	bf00      	nop
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_RCC_LSE_Disable>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <LL_RCC_LSE_EnableBypass>:
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_RCC_LSE_DisableBypass>:
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d101      	bne.n	8003252 <LL_RCC_LSE_IsReady+0x18>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <LL_RCC_LSE_IsReady+0x1a>
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003276:	bf00      	nop
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800328c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d101      	bne.n	80032ba <LL_RCC_LSI1_IsReady+0x18>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <LL_RCC_LSI1_IsReady+0x1a>
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d6:	f043 0304 	orr.w	r3, r3, #4
 80032da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80032ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f8:	f023 0304 	bic.w	r3, r3, #4
 80032fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b08      	cmp	r3, #8
 800331c:	d101      	bne.n	8003322 <LL_RCC_LSI2_IsReady+0x18>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <LL_RCC_LSI2_IsReady+0x1a>
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6013      	str	r3, [r2, #0]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800337a:	b480      	push	{r7}
 800337c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800337e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	6013      	str	r3, [r2, #0]
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d101      	bne.n	80033ae <LL_RCC_MSI_IsReady+0x16>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <LL_RCC_MSI_IsReady+0x18>
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80033c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2bb0      	cmp	r3, #176	; 0xb0
 80033f8:	d901      	bls.n	80033fe <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80033fa:	23b0      	movs	r3, #176	; 0xb0
 80033fc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80033fe:	687b      	ldr	r3, [r7, #4]
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800343e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 0203 	bic.w	r2, r3, #3
 8003448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 030c 	and.w	r3, r3, #12
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800347e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80034d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034da:	f023 020f 	bic.w	r2, r3, #15
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800350a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4313      	orrs	r3, r2
 800353a:	608b      	str	r3, [r1, #8]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003572:	4618      	mov	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80035b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035dc:	6013      	str	r3, [r2, #0]
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80035ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035fa:	d101      	bne.n	8003600 <LL_RCC_PLL_IsReady+0x18>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <LL_RCC_PLL_IsReady+0x1a>
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	0a1b      	lsrs	r3, r3, #8
 8003618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0303 	and.w	r3, r3, #3
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800366e:	b480      	push	{r7}
 8003670:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003680:	d101      	bne.n	8003686 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036a6:	d101      	bne.n	80036ac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80036bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80036c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	d101      	bne.n	80036d2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80036de:	b480      	push	{r7}
 80036e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80036e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036f0:	d101      	bne.n	80036f6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003710:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003714:	d101      	bne.n	800371a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b08d      	sub	sp, #52	; 0x34
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e37e      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8092 	beq.w	800386c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003748:	f7ff fe89 	bl	800345e <LL_RCC_GetSysClkSource>
 800374c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800374e:	f7ff ff82 	bl	8003656 <LL_RCC_PLL_GetMainSource>
 8003752:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x3e>
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	2b0c      	cmp	r3, #12
 800375e:	d14c      	bne.n	80037fa <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	2b01      	cmp	r3, #1
 8003764:	d149      	bne.n	80037fa <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003766:	f7ff fe17 	bl	8003398 <LL_RCC_MSI_IsReady>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_OscConfig+0x54>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e35d      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003780:	f7ff fe2f 	bl	80033e2 <LL_RCC_MSI_GetRange>
 8003784:	4603      	mov	r3, r0
 8003786:	429c      	cmp	r4, r3
 8003788:	d914      	bls.n	80037b4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fd42 	bl	8004218 <RCC_SetFlashLatencyFromMSIRange>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e34c      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fe09 	bl	80033ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fe2d 	bl	800340c <LL_RCC_MSI_SetCalibTrimming>
 80037b2:	e013      	b.n	80037dc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fdfe 	bl	80033ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fe22 	bl	800340c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fd23 	bl	8004218 <RCC_SetFlashLatencyFromMSIRange>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e32d      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037dc:	f000 fcdc 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80037e0:	4603      	mov	r3, r0
 80037e2:	4ab3      	ldr	r2, [pc, #716]	; (8003ab0 <HAL_RCC_OscConfig+0x388>)
 80037e4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037e6:	4bb3      	ldr	r3, [pc, #716]	; (8003ab4 <HAL_RCC_OscConfig+0x38c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe f95a 	bl	8001aa4 <HAL_InitTick>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d039      	beq.n	800386a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e31e      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01e      	beq.n	8003840 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003802:	f7ff fdab 	bl	800335c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003806:	f7fe f99b 	bl	8001b40 <HAL_GetTick>
 800380a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800380e:	f7fe f997 	bl	8001b40 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e30b      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003820:	f7ff fdba 	bl	8003398 <LL_RCC_MSI_IsReady>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f1      	beq.n	800380e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fdc3 	bl	80033ba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fde7 	bl	800340c <LL_RCC_MSI_SetCalibTrimming>
 800383e:	e015      	b.n	800386c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003840:	f7ff fd9b 	bl	800337a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003844:	f7fe f97c 	bl	8001b40 <HAL_GetTick>
 8003848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800384c:	f7fe f978 	bl	8001b40 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e2ec      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800385e:	f7ff fd9b 	bl	8003398 <LL_RCC_MSI_IsReady>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f1      	bne.n	800384c <HAL_RCC_OscConfig+0x124>
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800386a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d04e      	beq.n	8003916 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003878:	f7ff fdf1 	bl	800345e <LL_RCC_GetSysClkSource>
 800387c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800387e:	f7ff feea 	bl	8003656 <LL_RCC_PLL_GetMainSource>
 8003882:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	2b08      	cmp	r3, #8
 8003888:	d005      	beq.n	8003896 <HAL_RCC_OscConfig+0x16e>
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	2b0c      	cmp	r3, #12
 800388e:	d10d      	bne.n	80038ac <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d10a      	bne.n	80038ac <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003896:	f7ff fc01 	bl	800309c <LL_RCC_HSE_IsReady>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d039      	beq.n	8003914 <HAL_RCC_OscConfig+0x1ec>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d135      	bne.n	8003914 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e2c5      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b4:	d102      	bne.n	80038bc <HAL_RCC_OscConfig+0x194>
 80038b6:	f7ff fbd3 	bl	8003060 <LL_RCC_HSE_Enable>
 80038ba:	e001      	b.n	80038c0 <HAL_RCC_OscConfig+0x198>
 80038bc:	f7ff fbdf 	bl	800307e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d012      	beq.n	80038ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe f93a 	bl	8001b40 <HAL_GetTick>
 80038cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fe f936 	bl	8001b40 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e2aa      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80038e2:	f7ff fbdb 	bl	800309c <LL_RCC_HSE_IsReady>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f1      	beq.n	80038d0 <HAL_RCC_OscConfig+0x1a8>
 80038ec:	e013      	b.n	8003916 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7fe f927 	bl	8001b40 <HAL_GetTick>
 80038f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f6:	f7fe f923 	bl	8001b40 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b64      	cmp	r3, #100	; 0x64
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e297      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003908:	f7ff fbc8 	bl	800309c <LL_RCC_HSE_IsReady>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f1      	bne.n	80038f6 <HAL_RCC_OscConfig+0x1ce>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d051      	beq.n	80039c6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003922:	f7ff fd9c 	bl	800345e <LL_RCC_GetSysClkSource>
 8003926:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003928:	f7ff fe95 	bl	8003656 <LL_RCC_PLL_GetMainSource>
 800392c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d005      	beq.n	8003940 <HAL_RCC_OscConfig+0x218>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d113      	bne.n	8003962 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d110      	bne.n	8003962 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003940:	f7ff fbdc 	bl	80030fc <LL_RCC_HSI_IsReady>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x22e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e270      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fbe0 	bl	8003120 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003960:	e031      	b.n	80039c6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d019      	beq.n	800399e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800396a:	f7ff fba9 	bl	80030c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fe f8e7 	bl	8001b40 <HAL_GetTick>
 8003972:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003976:	f7fe f8e3 	bl	8001b40 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e257      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003988:	f7ff fbb8 	bl	80030fc <LL_RCC_HSI_IsReady>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f1      	beq.n	8003976 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fbc2 	bl	8003120 <LL_RCC_HSI_SetCalibTrimming>
 800399c:	e013      	b.n	80039c6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800399e:	f7ff fb9e 	bl	80030de <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a2:	f7fe f8cd 	bl	8001b40 <HAL_GetTick>
 80039a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039aa:	f7fe f8c9 	bl	8001b40 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e23d      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80039bc:	f7ff fb9e 	bl	80030fc <LL_RCC_HSI_IsReady>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f1      	bne.n	80039aa <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80a3 	beq.w	8003b26 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d076      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d046      	beq.n	8003a82 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80039f4:	f7ff fc55 	bl	80032a2 <LL_RCC_LSI1_IsReady>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d113      	bne.n	8003a26 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80039fe:	f7ff fc2e 	bl	800325e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a02:	f7fe f89d 	bl	8001b40 <HAL_GetTick>
 8003a06:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a0a:	f7fe f899 	bl	8001b40 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e20d      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003a1c:	f7ff fc41 	bl	80032a2 <LL_RCC_LSI1_IsReady>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f1      	beq.n	8003a0a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003a26:	f7ff fc4e 	bl	80032c6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fe f889 	bl	8001b40 <HAL_GetTick>
 8003a2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003a32:	f7fe f885 	bl	8001b40 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1f9      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003a44:	f7ff fc61 	bl	800330a <LL_RCC_LSI2_IsReady>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f1      	beq.n	8003a32 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fc6b 	bl	800332e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003a58:	f7ff fc12 	bl	8003280 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe f870 	bl	8001b40 <HAL_GetTick>
 8003a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a64:	f7fe f86c 	bl	8001b40 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e1e0      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003a76:	f7ff fc14 	bl	80032a2 <LL_RCC_LSI1_IsReady>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f1      	bne.n	8003a64 <HAL_RCC_OscConfig+0x33c>
 8003a80:	e051      	b.n	8003b26 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003a82:	f7ff fbec 	bl	800325e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fe f85b 	bl	8001b40 <HAL_GetTick>
 8003a8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a8e:	f7fe f857 	bl	8001b40 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1cb      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003aa0:	f7ff fbff 	bl	80032a2 <LL_RCC_LSI1_IsReady>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f1      	beq.n	8003a8e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003aaa:	f7ff fc1d 	bl	80032e8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003aae:	e00c      	b.n	8003aca <HAL_RCC_OscConfig+0x3a2>
 8003ab0:	20000010 	.word	0x20000010
 8003ab4:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003ab8:	f7fe f842 	bl	8001b40 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e1b6      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003aca:	f7ff fc1e 	bl	800330a <LL_RCC_LSI2_IsReady>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f1      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x390>
 8003ad4:	e027      	b.n	8003b26 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003ad6:	f7ff fc07 	bl	80032e8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ada:	f7fe f831 	bl	8001b40 <HAL_GetTick>
 8003ade:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003ae2:	f7fe f82d 	bl	8001b40 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e1a1      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003af4:	f7ff fc09 	bl	800330a <LL_RCC_LSI2_IsReady>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f1      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003afe:	f7ff fbbf 	bl	8003280 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b02:	f7fe f81d 	bl	8001b40 <HAL_GetTick>
 8003b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003b0a:	f7fe f819 	bl	8001b40 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e18d      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003b1c:	f7ff fbc1 	bl	80032a2 <LL_RCC_LSI1_IsReady>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f1      	bne.n	8003b0a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d05b      	beq.n	8003bea <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b32:	4bb5      	ldr	r3, [pc, #724]	; (8003e08 <HAL_RCC_OscConfig+0x6e0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d114      	bne.n	8003b68 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003b3e:	f7ff fa5f 	bl	8003000 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b42:	f7fd fffd 	bl	8001b40 <HAL_GetTick>
 8003b46:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4a:	f7fd fff9 	bl	8001b40 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e16d      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b5c:	4baa      	ldr	r3, [pc, #680]	; (8003e08 <HAL_RCC_OscConfig+0x6e0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d102      	bne.n	8003b76 <HAL_RCC_OscConfig+0x44e>
 8003b70:	f7ff fb1f 	bl	80031b2 <LL_RCC_LSE_Enable>
 8003b74:	e00c      	b.n	8003b90 <HAL_RCC_OscConfig+0x468>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d104      	bne.n	8003b88 <HAL_RCC_OscConfig+0x460>
 8003b7e:	f7ff fb3a 	bl	80031f6 <LL_RCC_LSE_EnableBypass>
 8003b82:	f7ff fb16 	bl	80031b2 <LL_RCC_LSE_Enable>
 8003b86:	e003      	b.n	8003b90 <HAL_RCC_OscConfig+0x468>
 8003b88:	f7ff fb24 	bl	80031d4 <LL_RCC_LSE_Disable>
 8003b8c:	f7ff fb44 	bl	8003218 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d014      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd ffd2 	bl	8001b40 <HAL_GetTick>
 8003b9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fd ffce 	bl	8001b40 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e140      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003bb6:	f7ff fb40 	bl	800323a <LL_RCC_LSE_IsReady>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ef      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x478>
 8003bc0:	e013      	b.n	8003bea <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc2:	f7fd ffbd 	bl	8001b40 <HAL_GetTick>
 8003bc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fd ffb9 	bl	8001b40 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e12b      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003be0:	f7ff fb2b 	bl	800323a <LL_RCC_LSE_IsReady>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1ef      	bne.n	8003bca <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d02c      	beq.n	8003c50 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d014      	beq.n	8003c28 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bfe:	f7ff faa4 	bl	800314a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fd ff9d 	bl	8001b40 <HAL_GetTick>
 8003c06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c0a:	f7fd ff99 	bl	8001b40 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e10d      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003c1c:	f7ff fab7 	bl	800318e <LL_RCC_HSI48_IsReady>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f1      	beq.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
 8003c26:	e013      	b.n	8003c50 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c28:	f7ff faa0 	bl	800316c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fd ff88 	bl	8001b40 <HAL_GetTick>
 8003c30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c34:	f7fd ff84 	bl	8001b40 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e0f8      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003c46:	f7ff faa2 	bl	800318e <LL_RCC_HSI48_IsReady>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f1      	bne.n	8003c34 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80ee 	beq.w	8003e36 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c5a:	f7ff fc00 	bl	800345e <LL_RCC_GetSysClkSource>
 8003c5e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	f040 80af 	bne.w	8003dd0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0203 	and.w	r2, r3, #3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d123      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d11c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d114      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d10d      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d106      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d05d      	beq.n	8003d84 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b0c      	cmp	r3, #12
 8003ccc:	d058      	beq.n	8003d80 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0ab      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ce0:	f7ff fc73 	bl	80035ca <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ce4:	f7fd ff2c 	bl	8001b40 <HAL_GetTick>
 8003ce8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fd ff28 	bl	8001b40 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e09c      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ef      	bne.n	8003cec <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	4b3e      	ldr	r3, [pc, #248]	; (8003e0c <HAL_RCC_OscConfig+0x6e4>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d24:	0212      	lsls	r2, r2, #8
 8003d26:	4311      	orrs	r1, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d2c:	4311      	orrs	r1, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d32:	4311      	orrs	r1, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d42:	f7ff fc33 	bl	80035ac <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d56:	f7fd fef3 	bl	8001b40 <HAL_GetTick>
 8003d5a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5e:	f7fd feef 	bl	8001b40 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e063      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0ef      	beq.n	8003d5e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d7e:	e05a      	b.n	8003e36 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e059      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d151      	bne.n	8003e36 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d92:	f7ff fc0b 	bl	80035ac <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003da6:	f7fd fecb 	bl	8001b40 <HAL_GetTick>
 8003daa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dae:	f7fd fec7 	bl	8001b40 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e03b      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0ef      	beq.n	8003dae <HAL_RCC_OscConfig+0x686>
 8003dce:	e032      	b.n	8003e36 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d02d      	beq.n	8003e32 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	f7ff fbf8 	bl	80035ca <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003de4:	f023 0303 	bic.w	r3, r3, #3
 8003de8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003df4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfe:	f7fd fe9f 	bl	8001b40 <HAL_GetTick>
 8003e02:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e04:	e00d      	b.n	8003e22 <HAL_RCC_OscConfig+0x6fa>
 8003e06:	bf00      	nop
 8003e08:	58000400 	.word	0x58000400
 8003e0c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fd fe96 	bl	8001b40 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ef      	bne.n	8003e10 <HAL_RCC_OscConfig+0x6e8>
 8003e30:	e001      	b.n	8003e36 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3734      	adds	r7, #52	; 0x34
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd90      	pop	{r4, r7, pc}

08003e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e12d      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e54:	4b98      	ldr	r3, [pc, #608]	; (80040b8 <HAL_RCC_ClockConfig+0x278>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d91b      	bls.n	8003e9a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b95      	ldr	r3, [pc, #596]	; (80040b8 <HAL_RCC_ClockConfig+0x278>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f023 0207 	bic.w	r2, r3, #7
 8003e6a:	4993      	ldr	r1, [pc, #588]	; (80040b8 <HAL_RCC_ClockConfig+0x278>)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e72:	f7fd fe65 	bl	8001b40 <HAL_GetTick>
 8003e76:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e7a:	f7fd fe61 	bl	8001b40 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e111      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8c:	4b8a      	ldr	r3, [pc, #552]	; (80040b8 <HAL_RCC_ClockConfig+0x278>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d1ef      	bne.n	8003e7a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fae3 	bl	8003476 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003eb0:	f7fd fe46 	bl	8001b40 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003eb8:	f7fd fe42 	bl	8001b40 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0f2      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003eca:	f7ff fbd0 	bl	800366e <LL_RCC_IsActiveFlag_HPRE>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f1      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d016      	beq.n	8003f0e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fada 	bl	800349e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003eea:	f7fd fe29 	bl	8001b40 <HAL_GetTick>
 8003eee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ef2:	f7fd fe25 	bl	8001b40 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e0d5      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003f04:	f7ff fbc5 	bl	8003692 <LL_RCC_IsActiveFlag_C2HPRE>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f1      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fad3 	bl	80034ca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f24:	f7fd fe0c 	bl	8001b40 <HAL_GetTick>
 8003f28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f2c:	f7fd fe08 	bl	8001b40 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0b8      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003f3e:	f7ff fbbb 	bl	80036b8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f1      	beq.n	8003f2c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d016      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff facd 	bl	80034f8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f5e:	f7fd fdef 	bl	8001b40 <HAL_GetTick>
 8003f62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f66:	f7fd fdeb 	bl	8001b40 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e09b      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003f78:	f7ff fbb1 	bl	80036de <LL_RCC_IsActiveFlag_PPRE1>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f1      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d017      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fac3 	bl	8003520 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f9a:	f7fd fdd1 	bl	8001b40 <HAL_GetTick>
 8003f9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003fa2:	f7fd fdcd 	bl	8001b40 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e07d      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003fb4:	f7ff fba5 	bl	8003702 <LL_RCC_IsActiveFlag_PPRE2>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f1      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d043      	beq.n	8004052 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003fd2:	f7ff f863 	bl	800309c <LL_RCC_HSE_IsReady>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d11e      	bne.n	800401a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e067      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003fe8:	f7ff fafe 	bl	80035e8 <LL_RCC_PLL_IsReady>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d113      	bne.n	800401a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e05c      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003ffe:	f7ff f9cb 	bl	8003398 <LL_RCC_MSI_IsReady>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d108      	bne.n	800401a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e051      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800400c:	f7ff f876 	bl	80030fc <LL_RCC_HSI_IsReady>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e04a      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fa09 	bl	8003436 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004024:	f7fd fd8c 	bl	8001b40 <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	e00a      	b.n	8004042 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402c:	f7fd fd88 	bl	8001b40 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e036      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	f7ff fa0c 	bl	800345e <LL_RCC_GetSysClkSource>
 8004046:	4602      	mov	r2, r0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	429a      	cmp	r2, r3
 8004050:	d1ec      	bne.n	800402c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <HAL_RCC_ClockConfig+0x278>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d21b      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004060:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_RCC_ClockConfig+0x278>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f023 0207 	bic.w	r2, r3, #7
 8004068:	4913      	ldr	r1, [pc, #76]	; (80040b8 <HAL_RCC_ClockConfig+0x278>)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	4313      	orrs	r3, r2
 800406e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004070:	f7fd fd66 	bl	8001b40 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	e008      	b.n	800408a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004078:	f7fd fd62 	bl	8001b40 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e012      	b.n	80040b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_RCC_ClockConfig+0x278>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d1ef      	bne.n	8004078 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004098:	f000 f87e 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 800409c:	4603      	mov	r3, r0
 800409e:	4a07      	ldr	r2, [pc, #28]	; (80040bc <HAL_RCC_ClockConfig+0x27c>)
 80040a0:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80040a2:	f7fd fd59 	bl	8001b58 <HAL_GetTickPrio>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fd fcfb 	bl	8001aa4 <HAL_InitTick>
 80040ae:	4603      	mov	r3, r0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	58004000 	.word	0x58004000
 80040bc:	20000010 	.word	0x20000010

080040c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c6:	f7ff f9ca 	bl	800345e <LL_RCC_GetSysClkSource>
 80040ca:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80040d2:	f7ff f986 	bl	80033e2 <LL_RCC_MSI_GetRange>
 80040d6:	4603      	mov	r3, r0
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	4a2b      	ldr	r2, [pc, #172]	; (800418c <HAL_RCC_GetSysClockFreq+0xcc>)
 80040e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e04b      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d102      	bne.n	80040f4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040ee:	4b28      	ldr	r3, [pc, #160]	; (8004190 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e045      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d10a      	bne.n	8004110 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80040fa:	f7fe ff9f 	bl	800303c <LL_RCC_HSE_IsEnabledDiv2>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b01      	cmp	r3, #1
 8004102:	d102      	bne.n	800410a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004104:	4b22      	ldr	r3, [pc, #136]	; (8004190 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e03a      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800410a:	4b22      	ldr	r3, [pc, #136]	; (8004194 <HAL_RCC_GetSysClockFreq+0xd4>)
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	e037      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004110:	f7ff faa1 	bl	8003656 <LL_RCC_PLL_GetMainSource>
 8004114:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d003      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x64>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b03      	cmp	r3, #3
 8004120:	d003      	beq.n	800412a <HAL_RCC_GetSysClockFreq+0x6a>
 8004122:	e00d      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004124:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004126:	60bb      	str	r3, [r7, #8]
        break;
 8004128:	e015      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800412a:	f7fe ff87 	bl	800303c <LL_RCC_HSE_IsEnabledDiv2>
 800412e:	4603      	mov	r3, r0
 8004130:	2b01      	cmp	r3, #1
 8004132:	d102      	bne.n	800413a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004134:	4b16      	ldr	r3, [pc, #88]	; (8004190 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004136:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004138:	e00d      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800413a:	4b16      	ldr	r3, [pc, #88]	; (8004194 <HAL_RCC_GetSysClockFreq+0xd4>)
 800413c:	60bb      	str	r3, [r7, #8]
        break;
 800413e:	e00a      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004140:	f7ff f94f 	bl	80033e2 <LL_RCC_MSI_GetRange>
 8004144:	4603      	mov	r3, r0
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	4a0f      	ldr	r2, [pc, #60]	; (800418c <HAL_RCC_GetSysClockFreq+0xcc>)
 800414e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004152:	60bb      	str	r3, [r7, #8]
        break;
 8004154:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004156:	f7ff fa59 	bl	800360c <LL_RCC_PLL_GetN>
 800415a:	4602      	mov	r2, r0
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	fb03 f402 	mul.w	r4, r3, r2
 8004162:	f7ff fa6c 	bl	800363e <LL_RCC_PLL_GetDivider>
 8004166:	4603      	mov	r3, r0
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	3301      	adds	r3, #1
 800416c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004170:	f7ff fa59 	bl	8003626 <LL_RCC_PLL_GetR>
 8004174:	4603      	mov	r3, r0
 8004176:	0f5b      	lsrs	r3, r3, #29
 8004178:	3301      	adds	r3, #1
 800417a:	fbb4 f3f3 	udiv	r3, r4, r3
 800417e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004180:	68fb      	ldr	r3, [r7, #12]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	bd90      	pop	{r4, r7, pc}
 800418a:	bf00      	nop
 800418c:	080068b0 	.word	0x080068b0
 8004190:	00f42400 	.word	0x00f42400
 8004194:	01e84800 	.word	0x01e84800

08004198 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004198:	b598      	push	{r3, r4, r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800419c:	f7ff ff90 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 80041a0:	4604      	mov	r4, r0
 80041a2:	f7ff f9d1 	bl	8003548 <LL_RCC_GetAHBPrescaler>
 80041a6:	4603      	mov	r3, r0
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	4a03      	ldr	r2, [pc, #12]	; (80041bc <HAL_RCC_GetHCLKFreq+0x24>)
 80041b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd98      	pop	{r3, r4, r7, pc}
 80041bc:	08006850 	.word	0x08006850

080041c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c0:	b598      	push	{r3, r4, r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80041c4:	f7ff ffe8 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041c8:	4604      	mov	r4, r0
 80041ca:	f7ff f9d7 	bl	800357c <LL_RCC_GetAPB1Prescaler>
 80041ce:	4603      	mov	r3, r0
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd98      	pop	{r3, r4, r7, pc}
 80041e8:	08006890 	.word	0x08006890

080041ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041ec:	b598      	push	{r3, r4, r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80041f0:	f7ff ffd2 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041f4:	4604      	mov	r4, r0
 80041f6:	f7ff f9cd 	bl	8003594 <LL_RCC_GetAPB2Prescaler>
 80041fa:	4603      	mov	r3, r0
 80041fc:	0adb      	lsrs	r3, r3, #11
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	4a04      	ldr	r2, [pc, #16]	; (8004214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd98      	pop	{r3, r4, r7, pc}
 8004214:	08006890 	.word	0x08006890

08004218 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2bb0      	cmp	r3, #176	; 0xb0
 8004224:	d903      	bls.n	800422e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e007      	b.n	800423e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	4a11      	ldr	r2, [pc, #68]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800423e:	f7ff f98f 	bl	8003560 <LL_RCC_GetAHB4Prescaler>
 8004242:	4603      	mov	r3, r0
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	4a0d      	ldr	r2, [pc, #52]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800424c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	0c9c      	lsrs	r4, r3, #18
 8004262:	f7fe fedd 	bl	8003020 <HAL_PWREx_GetVoltageRange>
 8004266:	4603      	mov	r3, r0
 8004268:	4619      	mov	r1, r3
 800426a:	4620      	mov	r0, r4
 800426c:	f000 f80c 	bl	8004288 <RCC_SetFlashLatency>
 8004270:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop
 800427c:	080068b0 	.word	0x080068b0
 8004280:	08006850 	.word	0x08006850
 8004284:	431bde83 	.word	0x431bde83

08004288 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b093      	sub	sp, #76	; 0x4c
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004292:	4b39      	ldr	r3, [pc, #228]	; (8004378 <RCC_SetFlashLatency+0xf0>)
 8004294:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004298:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800429a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800429e:	4a37      	ldr	r2, [pc, #220]	; (800437c <RCC_SetFlashLatency+0xf4>)
 80042a0:	f107 031c 	add.w	r3, r7, #28
 80042a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80042a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80042aa:	4b35      	ldr	r3, [pc, #212]	; (8004380 <RCC_SetFlashLatency+0xf8>)
 80042ac:	f107 040c 	add.w	r4, r7, #12
 80042b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80042b6:	2300      	movs	r3, #0
 80042b8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c0:	d11c      	bne.n	80042fc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	643b      	str	r3, [r7, #64]	; 0x40
 80042c6:	e015      	b.n	80042f4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80042c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042d0:	4413      	add	r3, r2
 80042d2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d808      	bhi.n	80042ee <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80042dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042e4:	4413      	add	r3, r2
 80042e6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80042ea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80042ec:	e022      	b.n	8004334 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80042ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f0:	3301      	adds	r3, #1
 80042f2:	643b      	str	r3, [r7, #64]	; 0x40
 80042f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d9e6      	bls.n	80042c8 <RCC_SetFlashLatency+0x40>
 80042fa:	e01b      	b.n	8004334 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80042fc:	2300      	movs	r3, #0
 80042fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004300:	e015      	b.n	800432e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800430a:	4413      	add	r3, r2
 800430c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d808      	bhi.n	8004328 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800431e:	4413      	add	r3, r2
 8004320:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004324:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004326:	e005      	b.n	8004334 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432a:	3301      	adds	r3, #1
 800432c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800432e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004330:	2b02      	cmp	r3, #2
 8004332:	d9e6      	bls.n	8004302 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004334:	4b13      	ldr	r3, [pc, #76]	; (8004384 <RCC_SetFlashLatency+0xfc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 0207 	bic.w	r2, r3, #7
 800433c:	4911      	ldr	r1, [pc, #68]	; (8004384 <RCC_SetFlashLatency+0xfc>)
 800433e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004340:	4313      	orrs	r3, r2
 8004342:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004344:	f7fd fbfc 	bl	8001b40 <HAL_GetTick>
 8004348:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800434a:	e008      	b.n	800435e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800434c:	f7fd fbf8 	bl	8001b40 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e007      	b.n	800436e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <RCC_SetFlashLatency+0xfc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004368:	429a      	cmp	r2, r3
 800436a:	d1ef      	bne.n	800434c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	374c      	adds	r7, #76	; 0x4c
 8004372:	46bd      	mov	sp, r7
 8004374:	bd90      	pop	{r4, r7, pc}
 8004376:	bf00      	nop
 8004378:	08005cb8 	.word	0x08005cb8
 800437c:	08005cc8 	.word	0x08005cc8
 8004380:	08005cd4 	.word	0x08005cd4
 8004384:	58004000 	.word	0x58004000

08004388 <LL_RCC_LSE_IsEnabled>:
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <LL_RCC_LSE_IsEnabled+0x18>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <LL_RCC_LSE_IsEnabled+0x1a>
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <LL_RCC_LSE_IsReady>:
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80043b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d101      	bne.n	80043c4 <LL_RCC_LSE_IsReady+0x18>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <LL_RCC_LSE_IsReady+0x1a>
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_RCC_MSI_EnablePLLMode>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043de:	f043 0304 	orr.w	r3, r3, #4
 80043e2:	6013      	str	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <LL_RCC_SetRFWKPClockSource>:
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <LL_RCC_SetSMPSClockSource>:
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	f023 0203 	bic.w	r2, r3, #3
 800442c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4313      	orrs	r3, r2
 8004434:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <LL_RCC_SetSMPSPrescaler>:
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800444a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4313      	orrs	r3, r2
 800445c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <LL_RCC_SetUSARTClockSource>:
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f023 0203 	bic.w	r2, r3, #3
 800447e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <LL_RCC_SetLPUARTClockSource>:
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800449e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <LL_RCC_SetI2CClockSource>:
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80044ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80044da:	43db      	mvns	r3, r3
 80044dc:	401a      	ands	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80044e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_RCC_SetLPTIMClockSource>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004508:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0c1b      	lsrs	r3, r3, #16
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	43db      	mvns	r3, r3
 8004514:	401a      	ands	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <LL_RCC_SetSAIClockSource>:
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_RCC_SetRNGClockSource>:
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_RCC_SetCLK48ClockSource>:
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800459c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <LL_RCC_SetUSBClockSource>:
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ffe3 	bl	8004588 <LL_RCC_SetCLK48ClockSource>
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <LL_RCC_SetADCClockSource>:
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <LL_RCC_SetRTCClockSource>:
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80045fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800460a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_RCC_GetRTCClockSource>:
{
 8004622:	b480      	push	{r7}
 8004624:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004632:	4618      	mov	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <LL_RCC_ForceBackupDomainReset>:
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800464c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <LL_RCC_ReleaseBackupDomainReset>:
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800466e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004676:	bf00      	nop
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_RCC_PLLSAI1_Enable>:
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004692:	6013      	str	r3, [r2, #0]
}
 8004694:	bf00      	nop
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <LL_RCC_PLLSAI1_Disable>:
{
 800469e:	b480      	push	{r7}
 80046a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046b0:	6013      	str	r3, [r2, #0]
}
 80046b2:	bf00      	nop
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_RCC_PLLSAI1_IsReady>:
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80046c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ce:	d101      	bne.n	80046d4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80046e8:	2300      	movs	r3, #0
 80046ea:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80046ec:	2300      	movs	r3, #0
 80046ee:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d034      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004704:	d021      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004706:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800470a:	d81b      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800470c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004710:	d01d      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004712:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004716:	d815      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800471c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004720:	d110      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004730:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004732:	e00d      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f94d 	bl	80049d8 <RCCEx_PLLSAI1_ConfigNP>
 800473e:	4603      	mov	r3, r0
 8004740:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004742:	e005      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	77fb      	strb	r3, [r7, #31]
        break;
 8004748:	e002      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800474a:	bf00      	nop
 800474c:	e000      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800474e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004750:	7ffb      	ldrb	r3, [r7, #31]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d105      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fee8 	bl	8004530 <LL_RCC_SetSAIClockSource>
 8004760:	e001      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004762:	7ffb      	ldrb	r3, [r7, #31]
 8004764:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476e:	2b00      	cmp	r3, #0
 8004770:	d046      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004772:	f7ff ff56 	bl	8004622 <LL_RCC_GetRTCClockSource>
 8004776:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	429a      	cmp	r2, r3
 8004780:	d03c      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004782:	f7fe fc3d 	bl	8003000 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff ff30 	bl	80045f6 <LL_RCC_SetRTCClockSource>
 8004796:	e02e      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80047a2:	f7ff ff4b 	bl	800463c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80047a6:	f7ff ff5a 	bl	800465e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80047b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80047c2:	f7ff fde1 	bl	8004388 <LL_RCC_LSE_IsEnabled>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d114      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047cc:	f7fd f9b8 	bl	8001b40 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80047d2:	e00b      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fd f9b4 	bl	8001b40 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d902      	bls.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	77fb      	strb	r3, [r7, #31]
              break;
 80047ea:	e004      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80047ec:	f7ff fdde 	bl	80043ac <LL_RCC_LSE_IsReady>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d1ee      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80047f6:	7ffb      	ldrb	r3, [r7, #31]
 80047f8:	77bb      	strb	r3, [r7, #30]
 80047fa:	e001      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	7ffb      	ldrb	r3, [r7, #31]
 80047fe:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d004      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fe2a 	bl	800446a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d004      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fe35 	bl	8004496 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fe5d 	bl	80044fc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d004      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff fe52 	bl	80044fc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fe2a 	bl	80044c2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d004      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fe1f 	bl	80044c2 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d022      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fe8d 	bl	80045b4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a2:	d107      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80048a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048b2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048bc:	d10b      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f8e3 	bl	8004a8e <RCCEx_PLLSAI1_ConfigNQ>
 80048c8:	4603      	mov	r3, r0
 80048ca:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80048cc:	7ffb      	ldrb	r3, [r7, #31]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80048d2:	7ffb      	ldrb	r3, [r7, #31]
 80048d4:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d02b      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d008      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048f4:	d003      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d105      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fe2a 	bl	800455c <LL_RCC_SetRNGClockSource>
 8004908:	e00a      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	2000      	movs	r0, #0
 8004916:	f7ff fe21 	bl	800455c <LL_RCC_SetRNGClockSource>
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7ff fe34 	bl	8004588 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004928:	d107      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800492a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004934:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004938:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004942:	2b00      	cmp	r3, #0
 8004944:	d022      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fe3d 	bl	80045ca <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004958:	d107      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800495a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004968:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004972:	d10b      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	4618      	mov	r0, r3
 800497a:	f000 f8e3 	bl	8004b44 <RCCEx_PLLSAI1_ConfigNR>
 800497e:	4603      	mov	r3, r0
 8004980:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004982:	7ffb      	ldrb	r3, [r7, #31]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004988:	7ffb      	ldrb	r3, [r7, #31]
 800498a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fd26 	bl	80043ee <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fd45 	bl	8004442 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fd2c 	bl	800441a <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80049c2:	7fbb      	ldrb	r3, [r7, #30]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3720      	adds	r7, #32
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80049d0:	f7ff fcfe 	bl	80043d0 <LL_RCC_MSI_EnablePLLMode>
}
 80049d4:	bf00      	nop
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80049e4:	f7ff fe5b 	bl	800469e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049e8:	f7fd f8aa 	bl	8001b40 <HAL_GetTick>
 80049ec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049ee:	e009      	b.n	8004a04 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049f0:	f7fd f8a6 	bl	8001b40 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d902      	bls.n	8004a04 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	73fb      	strb	r3, [r7, #15]
      break;
 8004a02:	e004      	b.n	8004a0e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a04:	f7ff fe5a 	bl	80046bc <LL_RCC_PLLSAI1_IsReady>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d137      	bne.n	8004a84 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004a42:	f7ff fe1d 	bl	8004680 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a46:	f7fd f87b 	bl	8001b40 <HAL_GetTick>
 8004a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a4c:	e009      	b.n	8004a62 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a4e:	f7fd f877 	bl	8001b40 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d902      	bls.n	8004a62 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	73fb      	strb	r3, [r7, #15]
        break;
 8004a60:	e004      	b.n	8004a6c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a62:	f7ff fe2b 	bl	80046bc <LL_RCC_PLLSAI1_IsReady>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d1f0      	bne.n	8004a4e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d108      	bne.n	8004a84 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a80:	4313      	orrs	r3, r2
 8004a82:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004a9a:	f7ff fe00 	bl	800469e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a9e:	f7fd f84f 	bl	8001b40 <HAL_GetTick>
 8004aa2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004aa4:	e009      	b.n	8004aba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aa6:	f7fd f84b 	bl	8001b40 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d902      	bls.n	8004aba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab8:	e004      	b.n	8004ac4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004aba:	f7ff fdff 	bl	80046bc <LL_RCC_PLLSAI1_IsReady>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f0      	bne.n	8004aa6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d137      	bne.n	8004b3a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af4:	4313      	orrs	r3, r2
 8004af6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004af8:	f7ff fdc2 	bl	8004680 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afc:	f7fd f820 	bl	8001b40 <HAL_GetTick>
 8004b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b02:	e009      	b.n	8004b18 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b04:	f7fd f81c 	bl	8001b40 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d902      	bls.n	8004b18 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	73fb      	strb	r3, [r7, #15]
        break;
 8004b16:	e004      	b.n	8004b22 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b18:	f7ff fdd0 	bl	80046bc <LL_RCC_PLLSAI1_IsReady>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d1f0      	bne.n	8004b04 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d108      	bne.n	8004b3a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b36:	4313      	orrs	r3, r2
 8004b38:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004b50:	f7ff fda5 	bl	800469e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b54:	f7fc fff4 	bl	8001b40 <HAL_GetTick>
 8004b58:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004b5a:	e009      	b.n	8004b70 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b5c:	f7fc fff0 	bl	8001b40 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d902      	bls.n	8004b70 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6e:	e004      	b.n	8004b7a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004b70:	f7ff fda4 	bl	80046bc <LL_RCC_PLLSAI1_IsReady>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d137      	bne.n	8004bf0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b94:	4313      	orrs	r3, r2
 8004b96:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004baa:	4313      	orrs	r3, r2
 8004bac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004bae:	f7ff fd67 	bl	8004680 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb2:	f7fc ffc5 	bl	8001b40 <HAL_GetTick>
 8004bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004bb8:	e009      	b.n	8004bce <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bba:	f7fc ffc1 	bl	8001b40 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d902      	bls.n	8004bce <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	73fb      	strb	r3, [r7, #15]
        break;
 8004bcc:	e004      	b.n	8004bd8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004bce:	f7ff fd75 	bl	80046bc <LL_RCC_PLLSAI1_IsReady>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d1f0      	bne.n	8004bba <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d108      	bne.n	8004bf0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bec:	4313      	orrs	r3, r2
 8004bee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e049      	b.n	8004ca0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fc fdef 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f000 f8fb 	bl	8004e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIM_ConfigClockSource+0x18>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e0b5      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x184>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004cde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfc:	d03e      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0xd4>
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d02:	f200 8087 	bhi.w	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0a:	f000 8085 	beq.w	8004e18 <HAL_TIM_ConfigClockSource+0x170>
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d12:	d87f      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b70      	cmp	r3, #112	; 0x70
 8004d16:	d01a      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0xa6>
 8004d18:	2b70      	cmp	r3, #112	; 0x70
 8004d1a:	d87b      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b60      	cmp	r3, #96	; 0x60
 8004d1e:	d050      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d20:	2b60      	cmp	r3, #96	; 0x60
 8004d22:	d877      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b50      	cmp	r3, #80	; 0x50
 8004d26:	d03c      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0xfa>
 8004d28:	2b50      	cmp	r3, #80	; 0x50
 8004d2a:	d873      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d058      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x13a>
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d86f      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b30      	cmp	r3, #48	; 0x30
 8004d36:	d064      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d38:	2b30      	cmp	r3, #48	; 0x30
 8004d3a:	d86b      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d060      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d867      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d05c      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d05a      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d4c:	e062      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6899      	ldr	r1, [r3, #8]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f000 f949 	bl	8004ff4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	609a      	str	r2, [r3, #8]
      break;
 8004d7a:	e04e      	b.n	8004e1a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	6899      	ldr	r1, [r3, #8]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f000 f932 	bl	8004ff4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d9e:	609a      	str	r2, [r3, #8]
      break;
 8004da0:	e03b      	b.n	8004e1a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f000 f8a4 	bl	8004efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2150      	movs	r1, #80	; 0x50
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f8fd 	bl	8004fba <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e02b      	b.n	8004e1a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f000 f8c3 	bl	8004f5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2160      	movs	r1, #96	; 0x60
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f8ed 	bl	8004fba <TIM_ITRx_SetConfig>
      break;
 8004de0:	e01b      	b.n	8004e1a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	461a      	mov	r2, r3
 8004df0:	f000 f884 	bl	8004efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2140      	movs	r1, #64	; 0x40
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f8dd 	bl	8004fba <TIM_ITRx_SetConfig>
      break;
 8004e00:	e00b      	b.n	8004e1a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	f000 f8d4 	bl	8004fba <TIM_ITRx_SetConfig>
        break;
 8004e12:	e002      	b.n	8004e1a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004e14:	bf00      	nop
 8004e16:	e000      	b.n	8004e1a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004e18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a2a      	ldr	r2, [pc, #168]	; (8004ef0 <TIM_Base_SetConfig+0xbc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_Base_SetConfig+0x20>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d108      	bne.n	8004e66 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a21      	ldr	r2, [pc, #132]	; (8004ef0 <TIM_Base_SetConfig+0xbc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00b      	beq.n	8004e86 <TIM_Base_SetConfig+0x52>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e74:	d007      	beq.n	8004e86 <TIM_Base_SetConfig+0x52>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a1e      	ldr	r2, [pc, #120]	; (8004ef4 <TIM_Base_SetConfig+0xc0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <TIM_Base_SetConfig+0x52>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <TIM_Base_SetConfig+0xc4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a0c      	ldr	r2, [pc, #48]	; (8004ef0 <TIM_Base_SetConfig+0xbc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_Base_SetConfig+0xa0>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a0b      	ldr	r2, [pc, #44]	; (8004ef4 <TIM_Base_SetConfig+0xc0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_Base_SetConfig+0xa0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <TIM_Base_SetConfig+0xc4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d103      	bne.n	8004edc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	615a      	str	r2, [r3, #20]
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40012c00 	.word	0x40012c00
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800

08004efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f023 0201 	bic.w	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f023 030a 	bic.w	r3, r3, #10
 8004f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	621a      	str	r2, [r3, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b087      	sub	sp, #28
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0210 	bic.w	r2, r3, #16
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	031b      	lsls	r3, r3, #12
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f043 0307 	orr.w	r3, r3, #7
 8004fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	609a      	str	r2, [r3, #8]
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800500e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	021a      	lsls	r2, r3, #8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	431a      	orrs	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4313      	orrs	r3, r2
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	609a      	str	r2, [r3, #8]
}
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005048:	2302      	movs	r3, #2
 800504a:	e04a      	b.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1f      	ldr	r2, [pc, #124]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d108      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800507c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b4:	d10c      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40012c00 	.word	0x40012c00

080050f4 <LL_RCC_GetUSARTClockSource>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80050fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005100:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4013      	ands	r3, r2
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <LL_RCC_GetLPUARTClockSource>:
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800511c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005120:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4013      	ands	r3, r2
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e042      	b.n	80051cc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fc fb67 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2224      	movs	r2, #36	; 0x24
 8005162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f82c 	bl	80051d4 <UART_SetConfig>
 800517c:	4603      	mov	r3, r0
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e022      	b.n	80051cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fa26 	bl	80055e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 faad 	bl	8005724 <UART_CheckIdleState>
 80051ca:	4603      	mov	r3, r0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d4:	b5b0      	push	{r4, r5, r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4ba3      	ldr	r3, [pc, #652]	; (800548c <UART_SetConfig+0x2b8>)
 8005200:	4013      	ands	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	69f9      	ldr	r1, [r7, #28]
 8005208:	430b      	orrs	r3, r1
 800520a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a98      	ldr	r2, [pc, #608]	; (8005490 <UART_SetConfig+0x2bc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	4313      	orrs	r3, r2
 800523a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005246:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	69f9      	ldr	r1, [r7, #28]
 8005250:	430b      	orrs	r3, r1
 8005252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	f023 010f 	bic.w	r1, r3, #15
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a89      	ldr	r2, [pc, #548]	; (8005494 <UART_SetConfig+0x2c0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d120      	bne.n	80052b6 <UART_SetConfig+0xe2>
 8005274:	2003      	movs	r0, #3
 8005276:	f7ff ff3d 	bl	80050f4 <LL_RCC_GetUSARTClockSource>
 800527a:	4603      	mov	r3, r0
 800527c:	2b03      	cmp	r3, #3
 800527e:	d817      	bhi.n	80052b0 <UART_SetConfig+0xdc>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <UART_SetConfig+0xb4>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	08005299 	.word	0x08005299
 800528c:	080052a5 	.word	0x080052a5
 8005290:	0800529f 	.word	0x0800529f
 8005294:	080052ab 	.word	0x080052ab
 8005298:	2301      	movs	r3, #1
 800529a:	76fb      	strb	r3, [r7, #27]
 800529c:	e038      	b.n	8005310 <UART_SetConfig+0x13c>
 800529e:	2302      	movs	r3, #2
 80052a0:	76fb      	strb	r3, [r7, #27]
 80052a2:	e035      	b.n	8005310 <UART_SetConfig+0x13c>
 80052a4:	2304      	movs	r3, #4
 80052a6:	76fb      	strb	r3, [r7, #27]
 80052a8:	e032      	b.n	8005310 <UART_SetConfig+0x13c>
 80052aa:	2308      	movs	r3, #8
 80052ac:	76fb      	strb	r3, [r7, #27]
 80052ae:	e02f      	b.n	8005310 <UART_SetConfig+0x13c>
 80052b0:	2310      	movs	r3, #16
 80052b2:	76fb      	strb	r3, [r7, #27]
 80052b4:	e02c      	b.n	8005310 <UART_SetConfig+0x13c>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a75      	ldr	r2, [pc, #468]	; (8005490 <UART_SetConfig+0x2bc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d125      	bne.n	800530c <UART_SetConfig+0x138>
 80052c0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80052c4:	f7ff ff26 	bl	8005114 <LL_RCC_GetLPUARTClockSource>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ce:	d017      	beq.n	8005300 <UART_SetConfig+0x12c>
 80052d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052d4:	d817      	bhi.n	8005306 <UART_SetConfig+0x132>
 80052d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052da:	d00b      	beq.n	80052f4 <UART_SetConfig+0x120>
 80052dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e0:	d811      	bhi.n	8005306 <UART_SetConfig+0x132>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <UART_SetConfig+0x11a>
 80052e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ea:	d006      	beq.n	80052fa <UART_SetConfig+0x126>
 80052ec:	e00b      	b.n	8005306 <UART_SetConfig+0x132>
 80052ee:	2300      	movs	r3, #0
 80052f0:	76fb      	strb	r3, [r7, #27]
 80052f2:	e00d      	b.n	8005310 <UART_SetConfig+0x13c>
 80052f4:	2302      	movs	r3, #2
 80052f6:	76fb      	strb	r3, [r7, #27]
 80052f8:	e00a      	b.n	8005310 <UART_SetConfig+0x13c>
 80052fa:	2304      	movs	r3, #4
 80052fc:	76fb      	strb	r3, [r7, #27]
 80052fe:	e007      	b.n	8005310 <UART_SetConfig+0x13c>
 8005300:	2308      	movs	r3, #8
 8005302:	76fb      	strb	r3, [r7, #27]
 8005304:	e004      	b.n	8005310 <UART_SetConfig+0x13c>
 8005306:	2310      	movs	r3, #16
 8005308:	76fb      	strb	r3, [r7, #27]
 800530a:	e001      	b.n	8005310 <UART_SetConfig+0x13c>
 800530c:	2310      	movs	r3, #16
 800530e:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a5e      	ldr	r2, [pc, #376]	; (8005490 <UART_SetConfig+0x2bc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	f040 808b 	bne.w	8005432 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800531c:	7efb      	ldrb	r3, [r7, #27]
 800531e:	2b08      	cmp	r3, #8
 8005320:	d823      	bhi.n	800536a <UART_SetConfig+0x196>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <UART_SetConfig+0x154>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	0800534d 	.word	0x0800534d
 800532c:	0800536b 	.word	0x0800536b
 8005330:	08005355 	.word	0x08005355
 8005334:	0800536b 	.word	0x0800536b
 8005338:	0800535b 	.word	0x0800535b
 800533c:	0800536b 	.word	0x0800536b
 8005340:	0800536b 	.word	0x0800536b
 8005344:	0800536b 	.word	0x0800536b
 8005348:	08005363 	.word	0x08005363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800534c:	f7fe ff38 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 8005350:	6178      	str	r0, [r7, #20]
        break;
 8005352:	e00f      	b.n	8005374 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005354:	4b50      	ldr	r3, [pc, #320]	; (8005498 <UART_SetConfig+0x2c4>)
 8005356:	617b      	str	r3, [r7, #20]
        break;
 8005358:	e00c      	b.n	8005374 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535a:	f7fe feb1 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 800535e:	6178      	str	r0, [r7, #20]
        break;
 8005360:	e008      	b.n	8005374 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005366:	617b      	str	r3, [r7, #20]
        break;
 8005368:	e004      	b.n	8005374 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	76bb      	strb	r3, [r7, #26]
        break;
 8005372:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 811a 	beq.w	80055b0 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	4a46      	ldr	r2, [pc, #280]	; (800549c <UART_SetConfig+0x2c8>)
 8005382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005386:	461a      	mov	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	fbb3 f3f2 	udiv	r3, r3, r2
 800538e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	4413      	add	r3, r2
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	429a      	cmp	r2, r3
 800539e:	d305      	bcc.n	80053ac <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d902      	bls.n	80053b2 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	76bb      	strb	r3, [r7, #26]
 80053b0:	e0fe      	b.n	80055b0 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f04f 0100 	mov.w	r1, #0
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	4a37      	ldr	r2, [pc, #220]	; (800549c <UART_SetConfig+0x2c8>)
 80053c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	f7fa fed7 	bl	800017c <__aeabi_uldivmod>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	020b      	lsls	r3, r1, #8
 80053e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053e4:	0202      	lsls	r2, r0, #8
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	6849      	ldr	r1, [r1, #4]
 80053ea:	0849      	lsrs	r1, r1, #1
 80053ec:	4608      	mov	r0, r1
 80053ee:	f04f 0100 	mov.w	r1, #0
 80053f2:	1814      	adds	r4, r2, r0
 80053f4:	eb43 0501 	adc.w	r5, r3, r1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	461a      	mov	r2, r3
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	4620      	mov	r0, r4
 8005404:	4629      	mov	r1, r5
 8005406:	f7fa feb9 	bl	800017c <__aeabi_uldivmod>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4613      	mov	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005418:	d308      	bcc.n	800542c <UART_SetConfig+0x258>
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005420:	d204      	bcs.n	800542c <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	e0c1      	b.n	80055b0 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	76bb      	strb	r3, [r7, #26]
 8005430:	e0be      	b.n	80055b0 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543a:	d16a      	bne.n	8005512 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800543c:	7efb      	ldrb	r3, [r7, #27]
 800543e:	3b01      	subs	r3, #1
 8005440:	2b07      	cmp	r3, #7
 8005442:	d82d      	bhi.n	80054a0 <UART_SetConfig+0x2cc>
 8005444:	a201      	add	r2, pc, #4	; (adr r2, 800544c <UART_SetConfig+0x278>)
 8005446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544a:	bf00      	nop
 800544c:	0800546d 	.word	0x0800546d
 8005450:	08005475 	.word	0x08005475
 8005454:	080054a1 	.word	0x080054a1
 8005458:	0800547b 	.word	0x0800547b
 800545c:	080054a1 	.word	0x080054a1
 8005460:	080054a1 	.word	0x080054a1
 8005464:	080054a1 	.word	0x080054a1
 8005468:	08005483 	.word	0x08005483
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800546c:	f7fe febe 	bl	80041ec <HAL_RCC_GetPCLK2Freq>
 8005470:	6178      	str	r0, [r7, #20]
        break;
 8005472:	e01a      	b.n	80054aa <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005474:	4b08      	ldr	r3, [pc, #32]	; (8005498 <UART_SetConfig+0x2c4>)
 8005476:	617b      	str	r3, [r7, #20]
        break;
 8005478:	e017      	b.n	80054aa <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800547a:	f7fe fe21 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 800547e:	6178      	str	r0, [r7, #20]
        break;
 8005480:	e013      	b.n	80054aa <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005486:	617b      	str	r3, [r7, #20]
        break;
 8005488:	e00f      	b.n	80054aa <UART_SetConfig+0x2d6>
 800548a:	bf00      	nop
 800548c:	cfff69f3 	.word	0xcfff69f3
 8005490:	40008000 	.word	0x40008000
 8005494:	40013800 	.word	0x40013800
 8005498:	00f42400 	.word	0x00f42400
 800549c:	080068f0 	.word	0x080068f0
      default:
        pclk = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	76bb      	strb	r3, [r7, #26]
        break;
 80054a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d07f      	beq.n	80055b0 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	4a48      	ldr	r2, [pc, #288]	; (80055d8 <UART_SetConfig+0x404>)
 80054b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ba:	461a      	mov	r2, r3
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	fbb3 f3f2 	udiv	r3, r3, r2
 80054c2:	005a      	lsls	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	441a      	add	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b0f      	cmp	r3, #15
 80054dc:	d916      	bls.n	800550c <UART_SetConfig+0x338>
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e4:	d212      	bcs.n	800550c <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f023 030f 	bic.w	r3, r3, #15
 80054ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	89fb      	ldrh	r3, [r7, #14]
 80054fe:	4313      	orrs	r3, r2
 8005500:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	89fa      	ldrh	r2, [r7, #14]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	e051      	b.n	80055b0 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	76bb      	strb	r3, [r7, #26]
 8005510:	e04e      	b.n	80055b0 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005512:	7efb      	ldrb	r3, [r7, #27]
 8005514:	3b01      	subs	r3, #1
 8005516:	2b07      	cmp	r3, #7
 8005518:	d821      	bhi.n	800555e <UART_SetConfig+0x38a>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0x34c>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005541 	.word	0x08005541
 8005524:	08005549 	.word	0x08005549
 8005528:	0800555f 	.word	0x0800555f
 800552c:	0800554f 	.word	0x0800554f
 8005530:	0800555f 	.word	0x0800555f
 8005534:	0800555f 	.word	0x0800555f
 8005538:	0800555f 	.word	0x0800555f
 800553c:	08005557 	.word	0x08005557
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005540:	f7fe fe54 	bl	80041ec <HAL_RCC_GetPCLK2Freq>
 8005544:	6178      	str	r0, [r7, #20]
        break;
 8005546:	e00f      	b.n	8005568 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005548:	4b24      	ldr	r3, [pc, #144]	; (80055dc <UART_SetConfig+0x408>)
 800554a:	617b      	str	r3, [r7, #20]
        break;
 800554c:	e00c      	b.n	8005568 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554e:	f7fe fdb7 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 8005552:	6178      	str	r0, [r7, #20]
        break;
 8005554:	e008      	b.n	8005568 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800555a:	617b      	str	r3, [r7, #20]
        break;
 800555c:	e004      	b.n	8005568 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	76bb      	strb	r3, [r7, #26]
        break;
 8005566:	bf00      	nop
    }

    if (pclk != 0U)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d020      	beq.n	80055b0 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <UART_SetConfig+0x404>)
 8005574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005578:	461a      	mov	r2, r3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	441a      	add	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	b29b      	uxth	r3, r3
 8005592:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b0f      	cmp	r3, #15
 8005598:	d908      	bls.n	80055ac <UART_SetConfig+0x3d8>
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a0:	d204      	bcs.n	80055ac <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	60da      	str	r2, [r3, #12]
 80055aa:	e001      	b.n	80055b0 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80055cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bdb0      	pop	{r4, r5, r7, pc}
 80055d6:	bf00      	nop
 80055d8:	080068f0 	.word	0x080068f0
 80055dc:	00f42400 	.word	0x00f42400

080055e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01a      	beq.n	80056f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056de:	d10a      	bne.n	80056f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	605a      	str	r2, [r3, #4]
  }
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af02      	add	r7, sp, #8
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005734:	f7fc fa04 	bl	8001b40 <HAL_GetTick>
 8005738:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b08      	cmp	r3, #8
 8005746:	d10e      	bne.n	8005766 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f82f 	bl	80057ba <UART_WaitOnFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e025      	b.n	80057b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b04      	cmp	r3, #4
 8005772:	d10e      	bne.n	8005792 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f819 	bl	80057ba <UART_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e00f      	b.n	80057b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	603b      	str	r3, [r7, #0]
 80057c6:	4613      	mov	r3, r2
 80057c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ca:	e062      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d2:	d05e      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d4:	f7fc f9b4 	bl	8001b40 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d302      	bcc.n	80057ea <UART_WaitOnFlagUntilTimeout+0x30>
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d11d      	bne.n	8005826 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0201 	bic.w	r2, r2, #1
 8005808:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e045      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d02e      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800583e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005842:	d126      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800584c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800585c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e00f      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4013      	ands	r3, r2
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	429a      	cmp	r2, r3
 80058a0:	bf0c      	ite	eq
 80058a2:	2301      	moveq	r3, #1
 80058a4:	2300      	movne	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d08d      	beq.n	80057cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b085      	sub	sp, #20
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e027      	b.n	8005920 <HAL_UARTEx_DisableFifoMode+0x66>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2224      	movs	r2, #36	; 0x24
 80058dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0201 	bic.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005940:	2302      	movs	r3, #2
 8005942:	e02d      	b.n	80059a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2224      	movs	r2, #36	; 0x24
 8005950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f84f 	bl	8005a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059bc:	2302      	movs	r3, #2
 80059be:	e02d      	b.n	8005a1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2224      	movs	r2, #36	; 0x24
 80059cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0201 	bic.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f811 	bl	8005a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d108      	bne.n	8005a46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a44:	e031      	b.n	8005aaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a46:	2308      	movs	r3, #8
 8005a48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	0e5b      	lsrs	r3, r3, #25
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	0f5b      	lsrs	r3, r3, #29
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	7b3a      	ldrb	r2, [r7, #12]
 8005a72:	4911      	ldr	r1, [pc, #68]	; (8005ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8005a74:	5c8a      	ldrb	r2, [r1, r2]
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a7a:	7b3a      	ldrb	r2, [r7, #12]
 8005a7c:	490f      	ldr	r1, [pc, #60]	; (8005abc <UARTEx_SetNbDataToProcess+0x98>)
 8005a7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a80:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	7b7a      	ldrb	r2, [r7, #13]
 8005a90:	4909      	ldr	r1, [pc, #36]	; (8005ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8005a92:	5c8a      	ldrb	r2, [r1, r2]
 8005a94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a98:	7b7a      	ldrb	r2, [r7, #13]
 8005a9a:	4908      	ldr	r1, [pc, #32]	; (8005abc <UARTEx_SetNbDataToProcess+0x98>)
 8005a9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	08006908 	.word	0x08006908
 8005abc:	08006910 	.word	0x08006910

08005ac0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ac8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005acc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005af6:	b084      	sub	sp, #16
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	f107 0014 	add.w	r0, r7, #20
 8005b04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	b004      	add	sp, #16
 8005b36:	4770      	bx	lr

08005b38 <__libc_init_array>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	4d0d      	ldr	r5, [pc, #52]	; (8005b70 <__libc_init_array+0x38>)
 8005b3c:	4c0d      	ldr	r4, [pc, #52]	; (8005b74 <__libc_init_array+0x3c>)
 8005b3e:	1b64      	subs	r4, r4, r5
 8005b40:	10a4      	asrs	r4, r4, #2
 8005b42:	2600      	movs	r6, #0
 8005b44:	42a6      	cmp	r6, r4
 8005b46:	d109      	bne.n	8005b5c <__libc_init_array+0x24>
 8005b48:	4d0b      	ldr	r5, [pc, #44]	; (8005b78 <__libc_init_array+0x40>)
 8005b4a:	4c0c      	ldr	r4, [pc, #48]	; (8005b7c <__libc_init_array+0x44>)
 8005b4c:	f000 f820 	bl	8005b90 <_init>
 8005b50:	1b64      	subs	r4, r4, r5
 8005b52:	10a4      	asrs	r4, r4, #2
 8005b54:	2600      	movs	r6, #0
 8005b56:	42a6      	cmp	r6, r4
 8005b58:	d105      	bne.n	8005b66 <__libc_init_array+0x2e>
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b60:	4798      	blx	r3
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7ee      	b.n	8005b44 <__libc_init_array+0xc>
 8005b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6a:	4798      	blx	r3
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	e7f2      	b.n	8005b56 <__libc_init_array+0x1e>
 8005b70:	08006920 	.word	0x08006920
 8005b74:	08006920 	.word	0x08006920
 8005b78:	08006920 	.word	0x08006920
 8005b7c:	08006924 	.word	0x08006924

08005b80 <memset>:
 8005b80:	4402      	add	r2, r0
 8005b82:	4603      	mov	r3, r0
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d100      	bne.n	8005b8a <memset+0xa>
 8005b88:	4770      	bx	lr
 8005b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8e:	e7f9      	b.n	8005b84 <memset+0x4>

08005b90 <_init>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr

08005b9c <_fini>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr
