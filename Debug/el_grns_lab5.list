
el_grns_lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006230  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08006370  08006370  00016370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006b80  08006b80  00016b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006b8c  08006b8c  00016b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000004  08006b90  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000898  20000080  08006c0c  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000918  08006c0c  00020918  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fa7a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a51  00000000  00000000  0003fb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e58  00000000  00000000  00043580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ce8  00000000  00000000  000453d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00027d5b  00000000  00000000  000470c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c531  00000000  00000000  0006ee1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e708a  00000000  00000000  0008b34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001723d6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008518  00000000  00000000  0017242c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08006358 	.word	0x08006358

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08006358 	.word	0x08006358

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <TextLCD_Strobe>:
  {
  }
}

void TextLCD_Strobe(TextLCDType *lcd) // anropas för att kunnna sktriva till LCD
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af02      	add	r7, sp, #8
 800051e:	6078      	str	r0, [r7, #4]
	// Set bit 2 which corresponds to E (strobe) and send data
	lcd->data |= 0x04;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	795b      	ldrb	r3, [r3, #5]
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	b2da      	uxtb	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6818      	ldr	r0, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	b299      	uxth	r1, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	1d5a      	adds	r2, r3, #5
 800053c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2301      	movs	r3, #1
 8000544:	f001 fe28 	bl	8002198 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000548:	2001      	movs	r0, #1
 800054a:	f001 fb05 	bl	8001b58 <HAL_Delay>
	// Clear bit 2 which corresponds to E (strobe) and send data
	lcd->data &= 0xFB;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	795b      	ldrb	r3, [r3, #5]
 8000552:	f023 0304 	bic.w	r3, r3, #4
 8000556:	b2da      	uxtb	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6818      	ldr	r0, [r3, #0]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	b299      	uxth	r1, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	1d5a      	adds	r2, r3, #5
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2301      	movs	r3, #1
 8000572:	f001 fe11 	bl	8002198 <HAL_I2C_Master_Transmit>
//	min_Delay(40);
	HAL_Delay(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f001 faee 	bl	8001b58 <HAL_Delay>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <TextLCD_Cmd>:

void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd) // skickar cmd till LCD, anrop: TextLCD_Cmd(&lcd, 0x02); där 02 är kommandot
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	70fb      	strb	r3, [r7, #3]
	// for command RS is set to 0
	lcd->data = (lcd->data & 0x0C) | (cmd & 0xF0);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	795b      	ldrb	r3, [r3, #5]
 8000594:	b25b      	sxtb	r3, r3
 8000596:	f003 030c 	and.w	r3, r3, #12
 800059a:	b25a      	sxtb	r2, r3
 800059c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005a0:	f023 030f 	bic.w	r3, r3, #15
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	b299      	uxth	r1, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	1d5a      	adds	r2, r3, #5
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	f001 fde7 	bl	8002198 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff ffa4 	bl	8000518 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0C) | (cmd << 4);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	795b      	ldrb	r3, [r3, #5]
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	f003 030c 	and.w	r3, r3, #12
 80005da:	b25a      	sxtb	r2, r3
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	011b      	lsls	r3, r3, #4
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	b299      	uxth	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	1d5a      	adds	r2, r3, #5
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2301      	movs	r3, #1
 8000602:	f001 fdc9 	bl	8002198 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff ff86 	bl	8000518 <TextLCD_Strobe>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <TextLCD_Data>:

void TextLCD_Data(TextLCDType *lcd, uint8_t data) // anrop: TextLCD_Data(&lcd, 0x55); skickar komando 55 till LCD
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	// for data RS is set to 1
	lcd->data = (lcd->data & 0x0D) | (data & 0xF0) | 0x01;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	b25b      	sxtb	r3, r3
 8000626:	f003 030d 	and.w	r3, r3, #13
 800062a:	b25a      	sxtb	r2, r3
 800062c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000630:	f023 030f 	bic.w	r3, r3, #15
 8000634:	b25b      	sxtb	r3, r3
 8000636:	4313      	orrs	r3, r2
 8000638:	b25b      	sxtb	r3, r3
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	b25b      	sxtb	r3, r3
 8000640:	b2da      	uxtb	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	b299      	uxth	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	1d5a      	adds	r2, r3, #5
 8000654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2301      	movs	r3, #1
 800065c:	f001 fd9c 	bl	8002198 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff59 	bl	8000518 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0D) | (data << 4) | 0x01;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	795b      	ldrb	r3, [r3, #5]
 800066a:	b25b      	sxtb	r3, r3
 800066c:	f003 030d 	and.w	r3, r3, #13
 8000670:	b25a      	sxtb	r2, r3
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	b25b      	sxtb	r3, r3
 8000678:	4313      	orrs	r3, r2
 800067a:	b25b      	sxtb	r3, r3
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	b25b      	sxtb	r3, r3
 8000682:	b2da      	uxtb	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	b299      	uxth	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	1d5a      	adds	r2, r3, #5
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	f001 fd7b 	bl	8002198 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ff38 	bl	8000518 <TextLCD_Strobe>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <TextLCD_Init>:

void TextLCD_Init(TextLCDType *lcd, I2C_HandleTypeDef *hi2c, uint8_t DevAddress)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	4613      	mov	r3, r2
 80006bc:	71fb      	strb	r3, [r7, #7]
	lcd->hi2c = hi2c;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	68ba      	ldr	r2, [r7, #8]
 80006c2:	601a      	str	r2, [r3, #0]
	lcd->DevAddress = DevAddress;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	711a      	strb	r2, [r3, #4]
	lcd->data = 0x38;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2238      	movs	r2, #56	; 0x38
 80006ce:	715a      	strb	r2, [r3, #5]

	// Do init setting LCD controller into 4-bit mode

	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	b299      	uxth	r1, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	1d5a      	adds	r2, r3, #5
 80006de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2301      	movs	r3, #1
 80006e6:	f001 fd57 	bl	8002198 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff ff14 	bl	8000518 <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	b299      	uxth	r1, r3
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	1d5a      	adds	r2, r3, #5
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2301      	movs	r3, #1
 8000706:	f001 fd47 	bl	8002198 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f7ff ff04 	bl	8000518 <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	791b      	ldrb	r3, [r3, #4]
 8000718:	b299      	uxth	r1, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	1d5a      	adds	r2, r3, #5
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2301      	movs	r3, #1
 8000726:	f001 fd37 	bl	8002198 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	f7ff fef4 	bl	8000518 <TextLCD_Strobe>
	lcd->data = 0x28;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2228      	movs	r2, #40	; 0x28
 8000734:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	b299      	uxth	r1, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	1d5a      	adds	r2, r3, #5
 8000744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	f001 fd24 	bl	8002198 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f7ff fee1 	bl	8000518 <TextLCD_Strobe>

	// Finished setting up 4-bit mode. Let's configure display

	TextLCD_Cmd(lcd, 0x28); //N=1 (2 line), F=0 (5x8)
 8000756:	2128      	movs	r1, #40	; 0x28
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f7ff ff13 	bl	8000584 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x08); //Display off, Cursor Off, Blink off
 800075e:	2108      	movs	r1, #8
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff ff0f 	bl	8000584 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x01); //Clear
 8000766:	2101      	movs	r1, #1
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f7ff ff0b 	bl	8000584 <TextLCD_Cmd>
	HAL_Delay(5);
 800076e:	2005      	movs	r0, #5
 8000770:	f001 f9f2 	bl	8001b58 <HAL_Delay>
	TextLCD_Cmd(lcd, 0x06); //ID=1(increment), S=0 (no shift)
 8000774:	2106      	movs	r1, #6
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff ff04 	bl	8000584 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x0C); //Display on, Cursor Off, Blink off
 800077c:	210c      	movs	r1, #12
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff ff00 	bl	8000584 <TextLCD_Cmd>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <TextLCD_Home>:

void TextLCD_Home(TextLCDType *lcd){ // skall flytta cursor till första positionen
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

	TextLCD_Cmd(lcd, 0x02); // 02 = home
 8000794:	2102      	movs	r1, #2
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fef4 	bl	8000584 <TextLCD_Cmd>
//	TextLCD_Strobe(lcd); // läs in-pin
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <TextLCD_Position>:
	TextLCD_Cmd(lcd, 0x01); // skickar 01 till LCD, 01 = clear. Rensar en pixel?
//	TextLCD_Strobe(lcd); // anropar för att LCD skall uppdateras och läsa in-pinnen.
}

void TextLCD_Position(TextLCDType *lcd, int x, int y) // Stulen.
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
	uint8_t cmd_bit = 0x80;
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	75fb      	strb	r3, [r7, #23]
	uint8_t adr     = x + (0x40 * y);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	019b      	lsls	r3, r3, #6
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4413      	add	r3, r2
 80007c2:	75bb      	strb	r3, [r7, #22]
	uint8_t cmd     = cmd_bit | adr;
 80007c4:	7dfa      	ldrb	r2, [r7, #23]
 80007c6:	7dbb      	ldrb	r3, [r7, #22]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	757b      	strb	r3, [r7, #21]
	TextLCD_Cmd(lcd, cmd);
 80007cc:	7d7b      	ldrb	r3, [r7, #21]
 80007ce:	4619      	mov	r1, r3
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f7ff fed7 	bl	8000584 <TextLCD_Cmd>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <TextLCD_Putchar>:

void TextLCD_Putchar(TextLCDType *lcd, uint8_t data){ // anrop: TextLCD_Putchar(&lcd, 'K'); ref till lcd och vilken char.
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	460b      	mov	r3, r1
 80007e8:	70fb      	strb	r3, [r7, #3]

	TextLCD_Data(lcd, data);// + data);
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff10 	bl	8000614 <TextLCD_Data>
//	TextLCD_Strobe(lcd);
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <TextLCD_Puts>:

	TextLCD_Data(lcd, 0x30 + data);// + data);
//	TextLCD_Strobe(lcd);
}

void TextLCD_Puts(TextLCDType *lcd, char *string){ // anrop: liknande putchar, men en string "texttext" som andra argument.
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]

	for(int i = 0; string[i] != 0; i++)
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	e00a      	b.n	8000822 <TextLCD_Puts+0x26>
		TextLCD_Putchar(lcd, string[i]);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	683a      	ldr	r2, [r7, #0]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff ffe1 	bl	80007de <TextLCD_Putchar>
	for(int i = 0; string[i] != 0; i++)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1ee      	bne.n	800080c <TextLCD_Puts+0x10>
//	TextLCD_Strobe(lcd);
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000848:	f023 0218 	bic.w	r2, r3, #24
 800084c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4313      	orrs	r3, r2
 8000854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800086c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000870:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4313      	orrs	r3, r2
 800087a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800087c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4013      	ands	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000888:	68fb      	ldr	r3, [r7, #12]
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <checkLevel>:
	HAL_Delay(200); // 5 Hz

	TextLCD_Clear(&lcd); // Remove indicator.
}

void checkLevel(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

	HAL_Delay(MPU_UPDATE_FREQ); // 5 Hz update frequency.
 800089c:	20c8      	movs	r0, #200	; 0xc8
 800089e:	f001 f95b 	bl	8001b58 <HAL_Delay>

	ret = MPU6050_ReadRegisters(&mpu, ACCEL_XOUT_H, 6);
 80008a2:	2206      	movs	r2, #6
 80008a4:	213b      	movs	r1, #59	; 0x3b
 80008a6:	482b      	ldr	r0, [pc, #172]	; (8000954 <checkLevel+0xbc>)
 80008a8:	f000 fc84 	bl	80011b4 <MPU6050_ReadRegisters>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b29      	ldr	r3, [pc, #164]	; (8000958 <checkLevel+0xc0>)
 80008b2:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <checkLevel+0xc0>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d003      	beq.n	80008c4 <checkLevel+0x2c>
		LCD_Debug("Read error:", "ACCEL_XOUT_H");
 80008bc:	4927      	ldr	r1, [pc, #156]	; (800095c <checkLevel+0xc4>)
 80008be:	4828      	ldr	r0, [pc, #160]	; (8000960 <checkLevel+0xc8>)
 80008c0:	f000 fbd0 	bl	8001064 <LCD_Debug>

	Accel_X_RAW = (int16_t)(mpu.data[0] << 8 | mpu.data[1]); // Combine both registers into one value.
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <checkLevel+0xbc>)
 80008c6:	795b      	ldrb	r3, [r3, #5]
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <checkLevel+0xbc>)
 80008ce:	799b      	ldrb	r3, [r3, #6]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <checkLevel+0xcc>)
 80008d8:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(mpu.data[2] << 8 | mpu.data[3]); // Combine both registers into one value.
 80008da:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <checkLevel+0xbc>)
 80008dc:	79db      	ldrb	r3, [r3, #7]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b21a      	sxth	r2, r3
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <checkLevel+0xbc>)
 80008e4:	7a1b      	ldrb	r3, [r3, #8]
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	4313      	orrs	r3, r2
 80008ea:	b21a      	sxth	r2, r3
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <checkLevel+0xd0>)
 80008ee:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(mpu.data[4] << 8 | mpu.data[5]); // Combine both registers into one value.
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <checkLevel+0xbc>)
 80008f2:	7a5b      	ldrb	r3, [r3, #9]
 80008f4:	021b      	lsls	r3, r3, #8
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <checkLevel+0xbc>)
 80008fa:	7a9b      	ldrb	r3, [r3, #10]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <checkLevel+0xd4>)
 8000904:	801a      	strh	r2, [r3, #0]

	accelXValue = Accel_X_RAW / x_offset;  // get the float g 16384
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <checkLevel+0xcc>)
 8000908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800090c:	461a      	mov	r2, r3
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <checkLevel+0xd8>)
 8000910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000914:	fb92 f3f3 	sdiv	r3, r2, r3
 8000918:	b21a      	sxth	r2, r3
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <checkLevel+0xdc>)
 800091c:	801a      	strh	r2, [r3, #0]
	accelYValue = Accel_Y_RAW / y_offset;
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <checkLevel+0xd0>)
 8000920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000924:	461a      	mov	r2, r3
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <checkLevel+0xe0>)
 8000928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000930:	b21a      	sxth	r2, r3
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <checkLevel+0xe4>)
 8000934:	801a      	strh	r2, [r3, #0]
	accelZValue = Accel_Z_RAW / z_offset;
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <checkLevel+0xd4>)
 8000938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093c:	461a      	mov	r2, r3
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <checkLevel+0xe8>)
 8000940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000944:	fb92 f3f3 	sdiv	r3, r2, r3
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <checkLevel+0xec>)
 800094c:	801a      	strh	r2, [r3, #0]
//		accelYValue |= 0xF000;
//	}
//	if(accelZValue > 0x8000){ // 2's complement.
//		accelZValue |= 0xF000;
//	}
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200005a8 	.word	0x200005a8
 8000958:	200008fc 	.word	0x200008fc
 800095c:	08006370 	.word	0x08006370
 8000960:	08006380 	.word	0x08006380
 8000964:	200004b0 	.word	0x200004b0
 8000968:	20000512 	.word	0x20000512
 800096c:	20000514 	.word	0x20000514
 8000970:	200008fe 	.word	0x200008fe
 8000974:	20000604 	.word	0x20000604
 8000978:	20000606 	.word	0x20000606
 800097c:	20000600 	.word	0x20000600
 8000980:	20000508 	.word	0x20000508
 8000984:	20000602 	.word	0x20000602

08000988 <displayResultsOLED>:
	accelXValue = Accel_X_RAW/16384.0;  // get the float g
	accelYValue = Accel_Y_RAW/16384.0;
	accelZValue = Accel_Z_RAW/16384.0;
}

void displayResultsOLED(int16_t x_val, int16_t y_val, int16_t z_val){
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	460b      	mov	r3, r1
 8000994:	80bb      	strh	r3, [r7, #4]
 8000996:	4613      	mov	r3, r2
 8000998:	807b      	strh	r3, [r7, #2]

	char strX[10];
	char strY[10];
	char strZ[10];

	sprintf(strX, "%d", x_val);// / x_offset_calibrated));
 800099a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4930      	ldr	r1, [pc, #192]	; (8000a64 <displayResultsOLED+0xdc>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f005 f8d1 	bl	8005b4c <siprintf>
	sprintf(strY, "%d", y_val);// / y_offset_calibrated));
 80009aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	492c      	ldr	r1, [pc, #176]	; (8000a64 <displayResultsOLED+0xdc>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f005 f8c9 	bl	8005b4c <siprintf>
	sprintf(strZ, "%d", z_val);// / z_offset_calibrated));
 80009ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4928      	ldr	r1, [pc, #160]	; (8000a64 <displayResultsOLED+0xdc>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f005 f8c1 	bl	8005b4c <siprintf>

	ssd1306_SetDisplayOn(1);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f000 fe3e 	bl	800164c <ssd1306_SetDisplayOn>
	ssd1306_SetCursor(0, 0);
 80009d0:	2100      	movs	r1, #0
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 fe0e 	bl	80015f4 <ssd1306_SetCursor>
	ssd1306_WriteString("Accel X:", Font_6x8, White);
 80009d8:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <displayResultsOLED+0xe0>)
 80009da:	2301      	movs	r3, #1
 80009dc:	ca06      	ldmia	r2, {r1, r2}
 80009de:	4823      	ldr	r0, [pc, #140]	; (8000a6c <displayResultsOLED+0xe4>)
 80009e0:	f000 fde2 	bl	80015a8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 9);
 80009e4:	2109      	movs	r1, #9
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fe04 	bl	80015f4 <ssd1306_SetCursor>
	ssd1306_WriteString(strX, Font_6x8, White);
 80009ec:	4a1e      	ldr	r2, [pc, #120]	; (8000a68 <displayResultsOLED+0xe0>)
 80009ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80009f2:	2301      	movs	r3, #1
 80009f4:	ca06      	ldmia	r2, {r1, r2}
 80009f6:	f000 fdd7 	bl	80015a8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 80009fa:	2112      	movs	r1, #18
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 fdf9 	bl	80015f4 <ssd1306_SetCursor>
	ssd1306_WriteString("Accel Y:", Font_6x8, White);
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <displayResultsOLED+0xe0>)
 8000a04:	2301      	movs	r3, #1
 8000a06:	ca06      	ldmia	r2, {r1, r2}
 8000a08:	4819      	ldr	r0, [pc, #100]	; (8000a70 <displayResultsOLED+0xe8>)
 8000a0a:	f000 fdcd 	bl	80015a8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 27);
 8000a0e:	211b      	movs	r1, #27
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 fdef 	bl	80015f4 <ssd1306_SetCursor>
	ssd1306_WriteString(strY, Font_6x8, White);
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <displayResultsOLED+0xe0>)
 8000a18:	f107 0018 	add.w	r0, r7, #24
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	ca06      	ldmia	r2, {r1, r2}
 8000a20:	f000 fdc2 	bl	80015a8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 8000a24:	2124      	movs	r1, #36	; 0x24
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 fde4 	bl	80015f4 <ssd1306_SetCursor>
	ssd1306_WriteString("Accel Z:", Font_6x8, White);
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <displayResultsOLED+0xe0>)
 8000a2e:	2301      	movs	r3, #1
 8000a30:	ca06      	ldmia	r2, {r1, r2}
 8000a32:	4810      	ldr	r0, [pc, #64]	; (8000a74 <displayResultsOLED+0xec>)
 8000a34:	f000 fdb8 	bl	80015a8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 45);
 8000a38:	212d      	movs	r1, #45	; 0x2d
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 fdda 	bl	80015f4 <ssd1306_SetCursor>
	ssd1306_WriteString(strZ, Font_6x8, White);
 8000a40:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <displayResultsOLED+0xe0>)
 8000a42:	f107 000c 	add.w	r0, r7, #12
 8000a46:	2301      	movs	r3, #1
 8000a48:	ca06      	ldmia	r2, {r1, r2}
 8000a4a:	f000 fdad 	bl	80015a8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 54);
 8000a4e:	2136      	movs	r1, #54	; 0x36
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 fdcf 	bl	80015f4 <ssd1306_SetCursor>
	ssd1306_UpdateScreen();
 8000a56:	f000 fca3 	bl	80013a0 <ssd1306_UpdateScreen>
}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	0800638c 	.word	0x0800638c
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	08006390 	.word	0x08006390
 8000a70:	0800639c 	.word	0x0800639c
 8000a74:	080063a8 	.word	0x080063a8

08000a78 <calibrateMPU>:

void calibrateMPU(MPU6050_Type mpu6050){
 8000a78:	b480      	push	{r7}
 8000a7a:	b099      	sub	sp, #100	; 0x64
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	int16_t x_calibration;
	int16_t y_calibration;
	int16_t z_calibration;

	for(int i = 0; i < NUMBER_OF_CALIBRATION_ITERATIONS; i++){
 8000a84:	2300      	movs	r3, #0
 8000a86:	657b      	str	r3, [r7, #84]	; 0x54
 8000a88:	e020      	b.n	8000acc <calibrateMPU+0x54>
		x_values[i] = Accel_X_RAW;
 8000a8a:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <calibrateMPU+0x140>)
 8000a8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000a98:	440b      	add	r3, r1
 8000a9a:	f823 2c24 	strh.w	r2, [r3, #-36]
		y_values[i] = Accel_Y_RAW;
 8000a9e:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <calibrateMPU+0x144>)
 8000aa0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aac:	440b      	add	r3, r1
 8000aae:	f823 2c38 	strh.w	r2, [r3, #-56]
		z_values[i] = Accel_Z_RAW;
 8000ab2:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <calibrateMPU+0x148>)
 8000ab4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ac0:	440b      	add	r3, r1
 8000ac2:	f823 2c4c 	strh.w	r2, [r3, #-76]
	for(int i = 0; i < NUMBER_OF_CALIBRATION_ITERATIONS; i++){
 8000ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ac8:	3301      	adds	r3, #1
 8000aca:	657b      	str	r3, [r7, #84]	; 0x54
 8000acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ace:	2b09      	cmp	r3, #9
 8000ad0:	dddb      	ble.n	8000a8a <calibrateMPU+0x12>
	}

	for(int i = 0; i < NUMBER_OF_CALIBRATION_ITERATIONS; i++){
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8000ad6:	e02c      	b.n	8000b32 <calibrateMPU+0xba>

		x_calibration += x_values[i];
 8000ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ae0:	4413      	add	r3, r2
 8000ae2:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000aec:	4413      	add	r3, r2
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		y_calibration += y_values[i];
 8000af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000afc:	4413      	add	r3, r2
 8000afe:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000b08:	4413      	add	r3, r2
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		z_calibration += z_values[i];
 8000b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000b18:	4413      	add	r3, r2
 8000b1a:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000b24:	4413      	add	r3, r2
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	for(int i = 0; i < NUMBER_OF_CALIBRATION_ITERATIONS; i++){
 8000b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b2e:	3301      	adds	r3, #1
 8000b30:	653b      	str	r3, [r7, #80]	; 0x50
 8000b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b34:	2b09      	cmp	r3, #9
 8000b36:	ddcf      	ble.n	8000ad8 <calibrateMPU+0x60>
	}

	x_offset = x_calibration / NUMBER_OF_CALIBRATION_ITERATIONS;
 8000b38:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000b3c:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <calibrateMPU+0x14c>)
 8000b3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b42:	1092      	asrs	r2, r2, #2
 8000b44:	17db      	asrs	r3, r3, #31
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	b21a      	sxth	r2, r3
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <calibrateMPU+0x150>)
 8000b4c:	801a      	strh	r2, [r3, #0]
	y_offset = y_calibration / NUMBER_OF_CALIBRATION_ITERATIONS;
 8000b4e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <calibrateMPU+0x14c>)
 8000b54:	fb82 1203 	smull	r1, r2, r2, r3
 8000b58:	1092      	asrs	r2, r2, #2
 8000b5a:	17db      	asrs	r3, r3, #31
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	b21a      	sxth	r2, r3
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <calibrateMPU+0x154>)
 8000b62:	801a      	strh	r2, [r3, #0]
	z_offset = z_calibration / NUMBER_OF_CALIBRATION_ITERATIONS;
 8000b64:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8000b68:	4a16      	ldr	r2, [pc, #88]	; (8000bc4 <calibrateMPU+0x14c>)
 8000b6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b6e:	1092      	asrs	r2, r2, #2
 8000b70:	17db      	asrs	r3, r3, #31
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <calibrateMPU+0x158>)
 8000b78:	801a      	strh	r2, [r3, #0]

	if(x_offset == 0)
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <calibrateMPU+0x150>)
 8000b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <calibrateMPU+0x112>
		x_offset = 1;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <calibrateMPU+0x150>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	801a      	strh	r2, [r3, #0]
	if(y_offset == 0)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <calibrateMPU+0x154>)
 8000b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <calibrateMPU+0x122>
		y_offset = 1;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <calibrateMPU+0x154>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	801a      	strh	r2, [r3, #0]
	if(z_offset == 0)
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <calibrateMPU+0x158>)
 8000b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <calibrateMPU+0x132>
		z_offset = 1;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <calibrateMPU+0x158>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	801a      	strh	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	3764      	adds	r7, #100	; 0x64
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200004b0 	.word	0x200004b0
 8000bbc:	20000512 	.word	0x20000512
 8000bc0:	20000514 	.word	0x20000514
 8000bc4:	66666667 	.word	0x66666667
 8000bc8:	200008fe 	.word	0x200008fe
 8000bcc:	20000606 	.word	0x20000606
 8000bd0:	20000508 	.word	0x20000508

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f000 ff38 	bl	8001a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f840 	bl	8000c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 f9f2 	bl	8000fc8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000be4:	f000 f97a 	bl	8000edc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000be8:	f000 f9c6 	bl	8000f78 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8000bec:	f000 f8e2 	bl	8000db4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000bf0:	f000 f920 	bl	8000e34 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TextLCD_Init(&lcd, &hi2c1, 0x4E); // "startar" LCD
 8000bf4:	224e      	movs	r2, #78	; 0x4e
 8000bf6:	4913      	ldr	r1, [pc, #76]	; (8000c44 <main+0x70>)
 8000bf8:	4813      	ldr	r0, [pc, #76]	; (8000c48 <main+0x74>)
 8000bfa:	f7ff fd59 	bl	80006b0 <TextLCD_Init>
  MPU6050_Init(&mpu, &hi2c1); // Setup the mpu sensor.
 8000bfe:	4911      	ldr	r1, [pc, #68]	; (8000c44 <main+0x70>)
 8000c00:	4812      	ldr	r0, [pc, #72]	; (8000c4c <main+0x78>)
 8000c02:	f000 fa4b 	bl	800109c <MPU6050_Init>
  ssd1306_Init(); // OLED Init.
 8000c06:	f000 fb3d 	bl	8001284 <ssd1306_Init>

  */

  while (1)
  {
	  while(calibrate == 1){
 8000c0a:	e007      	b.n	8000c1c <main+0x48>
		  calibrateMPU(mpu);
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <main+0x78>)
 8000c0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c12:	f7ff ff31 	bl	8000a78 <calibrateMPU>
		  calibrate = 0;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <main+0x7c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
	  while(calibrate == 1){
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <main+0x7c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d0f3      	beq.n	8000c0c <main+0x38>
	  }
	  checkLevel();
 8000c24:	f7ff fe38 	bl	8000898 <checkLevel>
	  displayResultsOLED(accelXValue, accelYValue, accelZValue);
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <main+0x80>)
 8000c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <main+0x84>)
 8000c30:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000c34:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <main+0x88>)
 8000c36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fea4 	bl	8000988 <displayResultsOLED>
	  while(calibrate == 1){
 8000c40:	e7ec      	b.n	8000c1c <main+0x48>
 8000c42:	bf00      	nop
 8000c44:	200004bc 	.word	0x200004bc
 8000c48:	200004b4 	.word	0x200004b4
 8000c4c:	200005a8 	.word	0x200005a8
 8000c50:	20000004 	.word	0x20000004
 8000c54:	20000604 	.word	0x20000604
 8000c58:	20000600 	.word	0x20000600
 8000c5c:	20000602 	.word	0x20000602

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0ae      	sub	sp, #184	; 0xb8
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c6a:	2248      	movs	r2, #72	; 0x48
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 ff64 	bl	8005b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2250      	movs	r2, #80	; 0x50
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 ff54 	bl	8005b3c <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ca2:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	f023 0303 	bic.w	r3, r3, #3
 8000cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cb8:	f002 f952 	bl	8002f60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fdbb 	bl	8000838 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <SystemClock_Config+0x150>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cca:	4a39      	ldr	r2, [pc, #228]	; (8000db0 <SystemClock_Config+0x150>)
 8000ccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <SystemClock_Config+0x150>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000cde:	2327      	movs	r3, #39	; 0x27
 8000ce0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d04:	2360      	movs	r3, #96	; 0x60
 8000d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fcb7 	bl	8003688 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d20:	f000 f99a 	bl	8001058 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000d24:	236f      	movs	r3, #111	; 0x6f
 8000d26:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d44:	2101      	movs	r1, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 f82a 	bl	8003da0 <HAL_RCC_ClockConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000d52:	f000 f981 	bl	8001058 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000d56:	f242 1305 	movw	r3, #8453	; 0x2105
 8000d5a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000d5c:	2318      	movs	r3, #24
 8000d5e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d64:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d6a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000d6c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d70:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000d72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d76:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d7c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000d82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fc54 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x142>
  {
    Error_Handler();
 8000d9e:	f000 f95b 	bl	8001058 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000da2:	f003 fdc3 	bl	800492c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000da6:	bf00      	nop
 8000da8:	37b8      	adds	r7, #184	; 0xb8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	58000400 	.word	0x58000400

08000db4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000dba:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <MX_I2C1_Init+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <MX_I2C1_Init+0x7c>)
 8000dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dee:	480e      	ldr	r0, [pc, #56]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000df0:	f001 f942 	bl	8002078 <HAL_I2C_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dfa:	f000 f92d 	bl	8001058 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000e02:	f001 ff07 	bl	8002c14 <HAL_I2CEx_ConfigAnalogFilter>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e0c:	f000 f924 	bl	8001058 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e10:	2100      	movs	r1, #0
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_I2C1_Init+0x74>)
 8000e14:	f001 ff49 	bl	8002caa <HAL_I2CEx_ConfigDigitalFilter>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e1e:	f000 f91b 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200004bc 	.word	0x200004bc
 8000e2c:	40005400 	.word	0x40005400
 8000e30:	00707cbb 	.word	0x00707cbb

08000e34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <MX_TIM1_Init+0xa0>)
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <MX_TIM1_Init+0xa4>)
 8000e56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <MX_TIM1_Init+0xa0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_TIM1_Init+0xa0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_TIM1_Init+0xa0>)
 8000e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_TIM1_Init+0xa0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_TIM1_Init+0xa0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_TIM1_Init+0xa0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e7e:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <MX_TIM1_Init+0xa0>)
 8000e80:	f003 fe6b 	bl	8004b5a <HAL_TIM_Base_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e8a:	f000 f8e5 	bl	8001058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <MX_TIM1_Init+0xa0>)
 8000e9c:	f003 feb4 	bl	8004c08 <HAL_TIM_ConfigClockSource>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ea6:	f000 f8d7 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <MX_TIM1_Init+0xa0>)
 8000ebc:	f004 f86a 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ec6:	f000 f8c7 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200005b4 	.word	0x200005b4
 8000ed8:	40012c00 	.word	0x40012c00

08000edc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000ee2:	4a24      	ldr	r2, [pc, #144]	; (8000f74 <MX_USART1_UART_Init+0x98>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ee6:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ef4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000f04:	220c      	movs	r2, #12
 8000f06:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f26:	4812      	ldr	r0, [pc, #72]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000f28:	f004 f8b4 	bl	8005094 <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000f32:	f000 f891 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f36:	2100      	movs	r1, #0
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000f3a:	f004 fca7 	bl	800588c <HAL_UARTEx_SetTxFifoThreshold>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000f44:	f000 f888 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000f4c:	f004 fcdc 	bl	8005908 <HAL_UARTEx_SetRxFifoThreshold>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000f56:	f000 f87f 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000f5c:	f004 fc5d 	bl	800581a <HAL_UARTEx_DisableFifoMode>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000f66:	f000 f877 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000518 	.word	0x20000518
 8000f74:	40013800 	.word	0x40013800

08000f78 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_USB_PCD_Init+0x48>)
 8000f7e:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <MX_USB_PCD_Init+0x4c>)
 8000f80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_USB_PCD_Init+0x48>)
 8000f84:	2208      	movs	r2, #8
 8000f86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <MX_USB_PCD_Init+0x48>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USB_PCD_Init+0x48>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_USB_PCD_Init+0x48>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USB_PCD_Init+0x48>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_USB_PCD_Init+0x48>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USB_PCD_Init+0x48>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_USB_PCD_Init+0x48>)
 8000fae:	f001 fec8 	bl	8002d42 <HAL_PCD_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000fb8:	f000 f84e 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000608 	.word	0x20000608
 8000fc4:	40006800 	.word	0x40006800

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fdc:	2004      	movs	r0, #4
 8000fde:	f7ff fc41 	bl	8000864 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f7ff fc3e 	bl	8000864 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f7ff fc3b 	bl	8000864 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fee:	2008      	movs	r0, #8
 8000ff0:	f7ff fc38 	bl	8000864 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2123      	movs	r1, #35	; 0x23
 8000ff8:	4814      	ldr	r0, [pc, #80]	; (800104c <MX_GPIO_Init+0x84>)
 8000ffa:	f001 f825 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ffe:	2310      	movs	r3, #16
 8001000:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4619      	mov	r1, r3
 800100e:	4810      	ldr	r0, [pc, #64]	; (8001050 <MX_GPIO_Init+0x88>)
 8001010:	f000 feaa 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001014:	2323      	movs	r3, #35	; 0x23
 8001016:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4619      	mov	r1, r3
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <MX_GPIO_Init+0x84>)
 800102a:	f000 fe9d 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800102e:	2303      	movs	r3, #3
 8001030:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_GPIO_Init+0x8c>)
 8001040:	f000 fe92 	bl	8001d68 <HAL_GPIO_Init>

}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	48000400 	.word	0x48000400
 8001050:	48000800 	.word	0x48000800
 8001054:	48000c00 	.word	0x48000c00

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	e7fe      	b.n	8001060 <Error_Handler+0x8>
	...

08001064 <LCD_Debug>:
	ACCEL_ZOUT_L

	MPU6050 slave address: Binary: 1101001 / 1101000. Hex: 69 / 68. Pin AD0 hi / lo.
*/

void LCD_Debug(const char* first_row, const char* second_row){ // Used for debug purposes.
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]

	TextLCD_Puts(&lcd, first_row);
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <LCD_Debug+0x34>)
 8001072:	f7ff fbc3 	bl	80007fc <TextLCD_Puts>
	TextLCD_Position(&lcd, 0, 1);
 8001076:	2201      	movs	r2, #1
 8001078:	2100      	movs	r1, #0
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <LCD_Debug+0x34>)
 800107c:	f7ff fb92 	bl	80007a4 <TextLCD_Position>
	TextLCD_Puts(&lcd, second_row);
 8001080:	6839      	ldr	r1, [r7, #0]
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <LCD_Debug+0x34>)
 8001084:	f7ff fbba 	bl	80007fc <TextLCD_Puts>
	TextLCD_Home(&lcd);
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <LCD_Debug+0x34>)
 800108a:	f7ff fb7f 	bl	800078c <TextLCD_Home>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200004b4 	.word	0x200004b4

0800109c <MPU6050_Init>:

HAL_StatusTypeDef MPU6050_Init(MPU6050_Type *sensor, I2C_HandleTypeDef *hi2c) { // Setup. OK
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret; // Used for storing return value of the i2c functions.

	sensor->i2c = hi2c; // Set which i2c to use.
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	601a      	str	r2, [r3, #0]
	sensor->DevAddress = MPU6050_ADDR; // Device address
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	22d0      	movs	r2, #208	; 0xd0
 80010b0:	711a      	strb	r2, [r3, #4]

	uint8_t data = 0; // Stores values to be written into the selected register.
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]

	ret = MPU6050_WriteRegister(sensor, PWR_MGMT_1, data, 1);
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	461a      	mov	r2, r3
 80010ba:	2301      	movs	r3, #1
 80010bc:	216b      	movs	r1, #107	; 0x6b
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f84a 	bl	8001158 <MPU6050_WriteRegister>
 80010c4:	4603      	mov	r3, r0
 80010c6:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK) // Check return value.
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <MPU6050_Init+0x3a>
		LCD_Debug("MPU INIT PWR", "MGMT FAILED"); // Display an error if not ok.
 80010ce:	491a      	ldr	r1, [pc, #104]	; (8001138 <MPU6050_Init+0x9c>)
 80010d0:	481a      	ldr	r0, [pc, #104]	; (800113c <MPU6050_Init+0xa0>)
 80010d2:	f7ff ffc7 	bl	8001064 <LCD_Debug>

	data = 0x07; // Divide 8kHz by (1 + 0x07), 8 / 8 = 1. MPU will now update with the same frequency as its output.
 80010d6:	2307      	movs	r3, #7
 80010d8:	73fb      	strb	r3, [r7, #15]
	ret = MPU6050_WriteRegister(sensor, SMPLRT_DIV, data, 1);
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	461a      	mov	r2, r3
 80010de:	2301      	movs	r3, #1
 80010e0:	2119      	movs	r1, #25
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f838 	bl	8001158 <MPU6050_WriteRegister>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK) // Check return value.
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <MPU6050_Init+0x5e>
		LCD_Debug("MPU INIT SMPLRT", "_DIV FAILED");
 80010f2:	4913      	ldr	r1, [pc, #76]	; (8001140 <MPU6050_Init+0xa4>)
 80010f4:	4813      	ldr	r0, [pc, #76]	; (8001144 <MPU6050_Init+0xa8>)
 80010f6:	f7ff ffb5 	bl	8001064 <LCD_Debug>

	data = 0x00; // 0
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
	ret = MPU6050_WriteRegister(sensor, ACCEL_CONFIG, data, 1);
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	461a      	mov	r2, r3
 8001102:	2301      	movs	r3, #1
 8001104:	211c      	movs	r1, #28
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f826 	bl	8001158 <MPU6050_WriteRegister>
 800110c:	4603      	mov	r3, r0
 800110e:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK) // Check return value.
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <MPU6050_Init+0x82>
		LCD_Debug("MPU INIT ACCEL", "CONFIG FAILED");
 8001116:	490c      	ldr	r1, [pc, #48]	; (8001148 <MPU6050_Init+0xac>)
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <MPU6050_Init+0xb0>)
 800111a:	f7ff ffa3 	bl	8001064 <LCD_Debug>

	if(ret == HAL_OK)
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d103      	bne.n	800112c <MPU6050_Init+0x90>
		LCD_Debug("MPU INIT:", "SUCCESSFUL");
 8001124:	490a      	ldr	r1, [pc, #40]	; (8001150 <MPU6050_Init+0xb4>)
 8001126:	480b      	ldr	r0, [pc, #44]	; (8001154 <MPU6050_Init+0xb8>)
 8001128:	f7ff ff9c 	bl	8001064 <LCD_Debug>

	return ret;
 800112c:	7bbb      	ldrb	r3, [r7, #14]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	080063b4 	.word	0x080063b4
 800113c:	080063c0 	.word	0x080063c0
 8001140:	080063d0 	.word	0x080063d0
 8001144:	080063dc 	.word	0x080063dc
 8001148:	080063ec 	.word	0x080063ec
 800114c:	080063fc 	.word	0x080063fc
 8001150:	0800640c 	.word	0x0800640c
 8001154:	08006418 	.word	0x08006418

08001158 <MPU6050_WriteRegister>:

HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050_Type *sensor, uint8_t reg, uint8_t *data, uint8_t bytes){ // Write to the registers.
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b08b      	sub	sp, #44	; 0x2c
 800115c:	af04      	add	r7, sp, #16
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	461a      	mov	r2, r3
 8001164:	460b      	mov	r3, r1
 8001166:	72fb      	strb	r3, [r7, #11]
 8001168:	4613      	mov	r3, r2
 800116a:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Write(sensor->i2c, sensor->DevAddress, reg, 1, &data, bytes, HAL_MAX_DELAY); // Which register.
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	b299      	uxth	r1, r3
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	b29a      	uxth	r2, r3
 800117a:	7abb      	ldrb	r3, [r7, #10]
 800117c:	b29b      	uxth	r3, r3
 800117e:	f04f 34ff 	mov.w	r4, #4294967295
 8001182:	9402      	str	r4, [sp, #8]
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	f001 f8f8 	bl	8002380 <HAL_I2C_Mem_Write>
 8001190:	4603      	mov	r3, r0
 8001192:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK)
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <MPU6050_WriteRegister+0x4a>
		LCD_Debug("MPU WRITE", "REGISTER FAILED");
 800119a:	4904      	ldr	r1, [pc, #16]	; (80011ac <MPU6050_WriteRegister+0x54>)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MPU6050_WriteRegister+0x58>)
 800119e:	f7ff ff61 	bl	8001064 <LCD_Debug>

	return ret;
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}
 80011ac:	08006424 	.word	0x08006424
 80011b0:	08006434 	.word	0x08006434

080011b4 <MPU6050_ReadRegisters>:
		LCD_Debug("MPU MEM READ", "REG FAILED");

	return ret;
}

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050_Type *sensor, uint8_t address, uint8_t size){	// Read a specific register, size number of bytes.
 80011b4:	b5b0      	push	{r4, r5, r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af04      	add	r7, sp, #16
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
 80011c0:	4613      	mov	r3, r2
 80011c2:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(sensor->i2c, sensor->DevAddress, address, 1, &sensor->data, size, HAL_MAX_DELAY);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	b299      	uxth	r1, r3
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	b29c      	uxth	r4, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3305      	adds	r3, #5
 80011d6:	78ba      	ldrb	r2, [r7, #2]
 80011d8:	b292      	uxth	r2, r2
 80011da:	f04f 35ff 	mov.w	r5, #4294967295
 80011de:	9502      	str	r5, [sp, #8]
 80011e0:	9201      	str	r2, [sp, #4]
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	4622      	mov	r2, r4
 80011e8:	f001 f9de 	bl	80025a8 <HAL_I2C_Mem_Read>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <MPU6050_ReadRegisters+0x4a>
		LCD_Debug("MPU MEM READ", "REGS FAILED");
 80011f6:	4904      	ldr	r1, [pc, #16]	; (8001208 <MPU6050_ReadRegisters+0x54>)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MPU6050_ReadRegisters+0x58>)
 80011fa:	f7ff ff33 	bl	8001064 <LCD_Debug>

	return ret;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
} // Read the selected register, and any following registers.
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bdb0      	pop	{r4, r5, r7, pc}
 8001208:	0800645c 	.word	0x0800645c
 800120c:	0800644c 	.word	0x0800644c

08001210 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af04      	add	r7, sp, #16
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2301      	movs	r3, #1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	2200      	movs	r2, #0
 800123c:	2178      	movs	r1, #120	; 0x78
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <ssd1306_WriteCommand+0x2c>)
 8001240:	f001 f89e 	bl	8002380 <HAL_I2C_Mem_Write>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200004bc 	.word	0x200004bc

08001250 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af04      	add	r7, sp, #16
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	f04f 32ff 	mov.w	r2, #4294967295
 8001262:	9202      	str	r2, [sp, #8]
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2301      	movs	r3, #1
 800126c:	2240      	movs	r2, #64	; 0x40
 800126e:	2178      	movs	r1, #120	; 0x78
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <ssd1306_WriteData+0x30>)
 8001272:	f001 f885 	bl	8002380 <HAL_I2C_Mem_Write>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200004bc 	.word	0x200004bc

08001284 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001288:	f7ff ffc2 	bl	8001210 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800128c:	2064      	movs	r0, #100	; 0x64
 800128e:	f000 fc63 	bl	8001b58 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001292:	2000      	movs	r0, #0
 8001294:	f000 f9da 	bl	800164c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001298:	2020      	movs	r0, #32
 800129a:	f7ff ffc1 	bl	8001220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff ffbe 	bl	8001220 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012a4:	20b0      	movs	r0, #176	; 0xb0
 80012a6:	f7ff ffbb 	bl	8001220 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012aa:	20c8      	movs	r0, #200	; 0xc8
 80012ac:	f7ff ffb8 	bl	8001220 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff ffb5 	bl	8001220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012b6:	2010      	movs	r0, #16
 80012b8:	f7ff ffb2 	bl	8001220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012bc:	2040      	movs	r0, #64	; 0x40
 80012be:	f7ff ffaf 	bl	8001220 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012c2:	20ff      	movs	r0, #255	; 0xff
 80012c4:	f000 f9ae 	bl	8001624 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012c8:	20a1      	movs	r0, #161	; 0xa1
 80012ca:	f7ff ffa9 	bl	8001220 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012ce:	20a6      	movs	r0, #166	; 0xa6
 80012d0:	f7ff ffa6 	bl	8001220 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012d4:	20a8      	movs	r0, #168	; 0xa8
 80012d6:	f7ff ffa3 	bl	8001220 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80012da:	203f      	movs	r0, #63	; 0x3f
 80012dc:	f7ff ffa0 	bl	8001220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012e0:	20a4      	movs	r0, #164	; 0xa4
 80012e2:	f7ff ff9d 	bl	8001220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012e6:	20d3      	movs	r0, #211	; 0xd3
 80012e8:	f7ff ff9a 	bl	8001220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff ff97 	bl	8001220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012f2:	20d5      	movs	r0, #213	; 0xd5
 80012f4:	f7ff ff94 	bl	8001220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012f8:	20f0      	movs	r0, #240	; 0xf0
 80012fa:	f7ff ff91 	bl	8001220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012fe:	20d9      	movs	r0, #217	; 0xd9
 8001300:	f7ff ff8e 	bl	8001220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001304:	2022      	movs	r0, #34	; 0x22
 8001306:	f7ff ff8b 	bl	8001220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800130a:	20da      	movs	r0, #218	; 0xda
 800130c:	f7ff ff88 	bl	8001220 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001310:	2012      	movs	r0, #18
 8001312:	f7ff ff85 	bl	8001220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001316:	20db      	movs	r0, #219	; 0xdb
 8001318:	f7ff ff82 	bl	8001220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800131c:	2020      	movs	r0, #32
 800131e:	f7ff ff7f 	bl	8001220 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001322:	208d      	movs	r0, #141	; 0x8d
 8001324:	f7ff ff7c 	bl	8001220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001328:	2014      	movs	r0, #20
 800132a:	f7ff ff79 	bl	8001220 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800132e:	2001      	movs	r0, #1
 8001330:	f000 f98c 	bl	800164c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001334:	2000      	movs	r0, #0
 8001336:	f000 f80f 	bl	8001358 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800133a:	f000 f831 	bl	80013a0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <ssd1306_Init+0xd0>)
 8001340:	2200      	movs	r2, #0
 8001342:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <ssd1306_Init+0xd0>)
 8001346:	2200      	movs	r2, #0
 8001348:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800134a:	4b02      	ldr	r3, [pc, #8]	; (8001354 <ssd1306_Init+0xd0>)
 800134c:	2201      	movs	r2, #1
 800134e:	711a      	strb	r2, [r3, #4]
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000049c 	.word	0x2000049c

08001358 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	e00d      	b.n	8001384 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <ssd1306_Fill+0x1a>
 800136e:	2100      	movs	r1, #0
 8001370:	e000      	b.n	8001374 <ssd1306_Fill+0x1c>
 8001372:	21ff      	movs	r1, #255	; 0xff
 8001374:	4a09      	ldr	r2, [pc, #36]	; (800139c <ssd1306_Fill+0x44>)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	460a      	mov	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d3ed      	bcc.n	8001368 <ssd1306_Fill+0x10>
    }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	2000009c 	.word	0x2000009c

080013a0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	e016      	b.n	80013da <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	3b50      	subs	r3, #80	; 0x50
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff34 	bl	8001220 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff ff31 	bl	8001220 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80013be:	2010      	movs	r0, #16
 80013c0:	f7ff ff2e 	bl	8001220 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	01db      	lsls	r3, r3, #7
 80013c8:	4a08      	ldr	r2, [pc, #32]	; (80013ec <ssd1306_UpdateScreen+0x4c>)
 80013ca:	4413      	add	r3, r2
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff3e 	bl	8001250 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	3301      	adds	r3, #1
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b07      	cmp	r3, #7
 80013de:	d9e5      	bls.n	80013ac <ssd1306_UpdateScreen+0xc>
    }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000009c 	.word	0x2000009c

080013f0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	460b      	mov	r3, r1
 80013fc:	71bb      	strb	r3, [r7, #6]
 80013fe:	4613      	mov	r3, r2
 8001400:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db3d      	blt.n	8001486 <ssd1306_DrawPixel+0x96>
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	2b3f      	cmp	r3, #63	; 0x3f
 800140e:	d83a      	bhi.n	8001486 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001410:	797b      	ldrb	r3, [r7, #5]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d11a      	bne.n	800144c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	08db      	lsrs	r3, r3, #3
 800141c:	b2d8      	uxtb	r0, r3
 800141e:	4603      	mov	r3, r0
 8001420:	01db      	lsls	r3, r3, #7
 8001422:	4413      	add	r3, r2
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <ssd1306_DrawPixel+0xa4>)
 8001426:	5cd3      	ldrb	r3, [r2, r3]
 8001428:	b25a      	sxtb	r2, r3
 800142a:	79bb      	ldrb	r3, [r7, #6]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	2101      	movs	r1, #1
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	b25b      	sxtb	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b259      	sxtb	r1, r3
 800143c:	79fa      	ldrb	r2, [r7, #7]
 800143e:	4603      	mov	r3, r0
 8001440:	01db      	lsls	r3, r3, #7
 8001442:	4413      	add	r3, r2
 8001444:	b2c9      	uxtb	r1, r1
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <ssd1306_DrawPixel+0xa4>)
 8001448:	54d1      	strb	r1, [r2, r3]
 800144a:	e01d      	b.n	8001488 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	08db      	lsrs	r3, r3, #3
 8001452:	b2d8      	uxtb	r0, r3
 8001454:	4603      	mov	r3, r0
 8001456:	01db      	lsls	r3, r3, #7
 8001458:	4413      	add	r3, r2
 800145a:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <ssd1306_DrawPixel+0xa4>)
 800145c:	5cd3      	ldrb	r3, [r2, r3]
 800145e:	b25a      	sxtb	r2, r3
 8001460:	79bb      	ldrb	r3, [r7, #6]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	2101      	movs	r1, #1
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	b25b      	sxtb	r3, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	b25b      	sxtb	r3, r3
 8001472:	4013      	ands	r3, r2
 8001474:	b259      	sxtb	r1, r3
 8001476:	79fa      	ldrb	r2, [r7, #7]
 8001478:	4603      	mov	r3, r0
 800147a:	01db      	lsls	r3, r3, #7
 800147c:	4413      	add	r3, r2
 800147e:	b2c9      	uxtb	r1, r1
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <ssd1306_DrawPixel+0xa4>)
 8001482:	54d1      	strb	r1, [r2, r3]
 8001484:	e000      	b.n	8001488 <ssd1306_DrawPixel+0x98>
        return;
 8001486:	bf00      	nop
    }
}
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	2000009c 	.word	0x2000009c

08001498 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	4604      	mov	r4, r0
 80014a0:	1d38      	adds	r0, r7, #4
 80014a2:	e880 0006 	stmia.w	r0, {r1, r2}
 80014a6:	461a      	mov	r2, r3
 80014a8:	4623      	mov	r3, r4
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	4613      	mov	r3, r2
 80014ae:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	2b1f      	cmp	r3, #31
 80014b4:	d902      	bls.n	80014bc <ssd1306_WriteChar+0x24>
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2b7e      	cmp	r3, #126	; 0x7e
 80014ba:	d901      	bls.n	80014c0 <ssd1306_WriteChar+0x28>
        return 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	e06d      	b.n	800159c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <ssd1306_WriteChar+0x10c>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	793b      	ldrb	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	2b80      	cmp	r3, #128	; 0x80
 80014cc:	dc06      	bgt.n	80014dc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <ssd1306_WriteChar+0x10c>)
 80014d0:	885b      	ldrh	r3, [r3, #2]
 80014d2:	461a      	mov	r2, r3
 80014d4:	797b      	ldrb	r3, [r7, #5]
 80014d6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014d8:	2b40      	cmp	r3, #64	; 0x40
 80014da:	dd01      	ble.n	80014e0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	e05d      	b.n	800159c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	e04c      	b.n	8001580 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	3b20      	subs	r3, #32
 80014ec:	7979      	ldrb	r1, [r7, #5]
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	440b      	add	r3, r1
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	e034      	b.n	8001570 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d012      	beq.n	800153c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <ssd1306_WriteChar+0x10c>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4413      	add	r3, r2
 8001522:	b2d8      	uxtb	r0, r3
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <ssd1306_WriteChar+0x10c>)
 8001526:	885b      	ldrh	r3, [r3, #2]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4413      	add	r3, r2
 8001530:	b2db      	uxtb	r3, r3
 8001532:	7bba      	ldrb	r2, [r7, #14]
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff ff5b 	bl	80013f0 <ssd1306_DrawPixel>
 800153a:	e016      	b.n	800156a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <ssd1306_WriteChar+0x10c>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4413      	add	r3, r2
 8001548:	b2d8      	uxtb	r0, r3
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <ssd1306_WriteChar+0x10c>)
 800154c:	885b      	ldrh	r3, [r3, #2]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b2d9      	uxtb	r1, r3
 8001558:	7bbb      	ldrb	r3, [r7, #14]
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf0c      	ite	eq
 800155e:	2301      	moveq	r3, #1
 8001560:	2300      	movne	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	f7ff ff43 	bl	80013f0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	3301      	adds	r3, #1
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	793b      	ldrb	r3, [r7, #4]
 8001572:	461a      	mov	r2, r3
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	4293      	cmp	r3, r2
 8001578:	d3c5      	bcc.n	8001506 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	797b      	ldrb	r3, [r7, #5]
 8001582:	461a      	mov	r2, r3
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	4293      	cmp	r3, r2
 8001588:	d3ad      	bcc.n	80014e6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <ssd1306_WriteChar+0x10c>)
 800158c:	881a      	ldrh	r2, [r3, #0]
 800158e:	793b      	ldrb	r3, [r7, #4]
 8001590:	b29b      	uxth	r3, r3
 8001592:	4413      	add	r3, r2
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <ssd1306_WriteChar+0x10c>)
 8001598:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3724      	adds	r7, #36	; 0x24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	2000049c 	.word	0x2000049c

080015a8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	1d38      	adds	r0, r7, #4
 80015b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80015b6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80015b8:	e012      	b.n	80015e0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	7818      	ldrb	r0, [r3, #0]
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	1d3a      	adds	r2, r7, #4
 80015c2:	ca06      	ldmia	r2, {r1, r2}
 80015c4:	f7ff ff68 	bl	8001498 <ssd1306_WriteChar>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d002      	beq.n	80015da <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	e008      	b.n	80015ec <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3301      	adds	r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e8      	bne.n	80015ba <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	781b      	ldrb	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	460a      	mov	r2, r1
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	4613      	mov	r3, r2
 8001602:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <ssd1306_SetCursor+0x2c>)
 800160a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <ssd1306_SetCursor+0x2c>)
 8001612:	805a      	strh	r2, [r3, #2]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	2000049c 	.word	0x2000049c

08001624 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800162e:	2381      	movs	r3, #129	; 0x81
 8001630:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fdf3 	bl	8001220 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fdef 	bl	8001220 <ssd1306_WriteCommand>
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800165c:	23af      	movs	r3, #175	; 0xaf
 800165e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <ssd1306_SetDisplayOn+0x38>)
 8001662:	2201      	movs	r2, #1
 8001664:	715a      	strb	r2, [r3, #5]
 8001666:	e004      	b.n	8001672 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001668:	23ae      	movs	r3, #174	; 0xae
 800166a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <ssd1306_SetDisplayOn+0x38>)
 800166e:	2200      	movs	r2, #0
 8001670:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fdd3 	bl	8001220 <ssd1306_WriteCommand>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000049c 	.word	0x2000049c

08001688 <LL_AHB2_GRP1_EnableClock>:
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4313      	orrs	r3, r2
 800169e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ac:	68fb      	ldr	r3, [r7, #12]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4013      	ands	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4313      	orrs	r3, r2
 8001702:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001708:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001710:	68fb      	ldr	r3, [r7, #12]
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <HAL_I2C_MspInit+0x5c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d117      	bne.n	800177e <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2002      	movs	r0, #2
 8001750:	f7ff ff9a 	bl	8001688 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001754:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001758:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175a:	2312      	movs	r3, #18
 800175c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175e:	2301      	movs	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001766:	2304      	movs	r3, #4
 8001768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4619      	mov	r1, r3
 8001770:	4806      	ldr	r0, [pc, #24]	; (800178c <HAL_I2C_MspInit+0x60>)
 8001772:	f000 faf9 	bl	8001d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001776:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800177a:	f7ff ff9e 	bl	80016ba <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40005400 	.word	0x40005400
 800178c:	48000400 	.word	0x48000400

08001790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <HAL_TIM_Base_MspInit+0x24>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d103      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017a6:	f7ff ffa1 	bl	80016ec <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40012c00 	.word	0x40012c00

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_UART_MspInit+0x58>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d116      	bne.n	8001808 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017de:	f7ff ff85 	bl	80016ec <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2002      	movs	r0, #2
 80017e4:	f7ff ff50 	bl	8001688 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017e8:	23c0      	movs	r3, #192	; 0xc0
 80017ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017f8:	2307      	movs	r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	4619      	mov	r1, r3
 8001802:	4804      	ldr	r0, [pc, #16]	; (8001814 <HAL_UART_MspInit+0x5c>)
 8001804:	f000 fab0 	bl	8001d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001808:	bf00      	nop
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40013800 	.word	0x40013800
 8001814:	48000400 	.word	0x48000400

08001818 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <HAL_PCD_MspInit+0x5c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d118      	bne.n	800186c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2001      	movs	r0, #1
 800183c:	f7ff ff24 	bl	8001688 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001840:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001844:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001852:	230a      	movs	r3, #10
 8001854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f000 fa82 	bl	8001d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001864:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001868:	f7ff ff27 	bl	80016ba <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40006800 	.word	0x40006800

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c4:	f000 f91c 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f004 f8cc 	bl	8005a98 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20030000 	.word	0x20030000
 800192c:	00000400 	.word	0x00000400
 8001930:	200004a4 	.word	0x200004a4
 8001934:	20000918 	.word	0x20000918

08001938 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <SystemInit+0x98>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <SystemInit+0x98>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001964:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <SystemInit+0x9c>)
 8001972:	4013      	ands	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001982:	f023 0305 	bic.w	r3, r3, #5
 8001986:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a2:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <SystemInit+0xa0>)
 80019a4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <SystemInit+0xa0>)
 80019ac:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00
 80019d4:	faf6fefb 	.word	0xfaf6fefb
 80019d8:	22041000 	.word	0x22041000

080019dc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019dc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019de:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e0:	3304      	adds	r3, #4

080019e2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019e6:	d3f9      	bcc.n	80019dc <CopyDataInit>
  bx lr
 80019e8:	4770      	bx	lr

080019ea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019ea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019ec:	3004      	adds	r0, #4

080019ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019ee:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019f0:	d3fb      	bcc.n	80019ea <FillZerobss>
  bx lr
 80019f2:	4770      	bx	lr

080019f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80019f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019f8:	f7ff ff9e 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80019fc:	480b      	ldr	r0, [pc, #44]	; (8001a2c <LoopForever+0x8>)
 80019fe:	490c      	ldr	r1, [pc, #48]	; (8001a30 <LoopForever+0xc>)
 8001a00:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <LoopForever+0x10>)
 8001a02:	2300      	movs	r3, #0
 8001a04:	f7ff ffed 	bl	80019e2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <LoopForever+0x14>)
 8001a0a:	490c      	ldr	r1, [pc, #48]	; (8001a3c <LoopForever+0x18>)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f7ff ffee 	bl	80019ee <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a12:	480b      	ldr	r0, [pc, #44]	; (8001a40 <LoopForever+0x1c>)
 8001a14:	490b      	ldr	r1, [pc, #44]	; (8001a44 <LoopForever+0x20>)
 8001a16:	2300      	movs	r3, #0
 8001a18:	f7ff ffe9 	bl	80019ee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a1c:	f004 f842 	bl	8005aa4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001a20:	f7ff f8d8 	bl	8000bd4 <main>

08001a24 <LoopForever>:

LoopForever:
  b LoopForever
 8001a24:	e7fe      	b.n	8001a24 <LoopForever>
 8001a26:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001a28:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a2c:	20000004 	.word	0x20000004
 8001a30:	20000080 	.word	0x20000080
 8001a34:	08006b90 	.word	0x08006b90
  INIT_BSS _sbss, _ebss
 8001a38:	20000080 	.word	0x20000080
 8001a3c:	20000918 	.word	0x20000918
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a40:	20030000 	.word	0x20030000
 8001a44:	20030000 	.word	0x20030000

08001a48 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_IRQHandler>
	...

08001a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_Init+0x3c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <HAL_Init+0x3c>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a62:	2003      	movs	r0, #3
 8001a64:	f000 f94e 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f000 f80f 	bl	8001a8c <HAL_InitTick>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	71fb      	strb	r3, [r7, #7]
 8001a78:	e001      	b.n	8001a7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a7a:	f7ff fe50 	bl	800171e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	58004000 	.word	0x58004000

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_InitTick+0x6c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d024      	beq.n	8001aea <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001aa0:	f002 fb2a 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_InitTick+0x6c>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 f948 	bl	8001d4e <HAL_SYSTICK_Config>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10f      	bne.n	8001ae4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	d809      	bhi.n	8001ade <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aca:	2200      	movs	r2, #0
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad2:	f000 f922 	bl	8001d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_InitTick+0x70>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e007      	b.n	8001aee <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
 8001ae2:	e004      	b.n	8001aee <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e001      	b.n	8001aee <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000018 	.word	0x20000018
 8001afc:	20000014 	.word	0x20000014

08001b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x20>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_IncTick+0x24>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000018 	.word	0x20000018
 8001b24:	20000904 	.word	0x20000904

08001b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_GetTick+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000904 	.word	0x20000904

08001b40 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTickPrio+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000014 	.word	0x20000014

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffe2 	bl	8001b28 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffd2 	bl	8001b28 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
    {
    }
  }
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000018 	.word	0x20000018

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	; (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	; (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f7ff ff8e 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff47 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d28:	f7ff ff5e 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f7ff ff90 	bl	8001c58 <NVIC_EncodePriority>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff5f 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffb2 	bl	8001cc0 <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d76:	e14c      	b.n	8002012 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 813e 	beq.w	800200c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d00b      	beq.n	8001db0 <HAL_GPIO_Init+0x48>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d007      	beq.n	8001db0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001da4:	2b11      	cmp	r3, #17
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b12      	cmp	r3, #18
 8001dae:	d130      	bne.n	8001e12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de6:	2201      	movs	r2, #1
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	091b      	lsrs	r3, r3, #4
 8001dfc:	f003 0201 	and.w	r2, r3, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0xea>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b12      	cmp	r3, #18
 8001e50:	d123      	bne.n	8001e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	08da      	lsrs	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3208      	adds	r2, #8
 8001e94:	6939      	ldr	r1, [r7, #16]
 8001e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0203 	and.w	r2, r3, #3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8098 	beq.w	800200c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001edc:	4a54      	ldr	r2, [pc, #336]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f06:	d019      	beq.n	8001f3c <HAL_GPIO_Init+0x1d4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a4a      	ldr	r2, [pc, #296]	; (8002034 <HAL_GPIO_Init+0x2cc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <HAL_GPIO_Init+0x1d0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a49      	ldr	r2, [pc, #292]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00d      	beq.n	8001f34 <HAL_GPIO_Init+0x1cc>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a48      	ldr	r2, [pc, #288]	; (800203c <HAL_GPIO_Init+0x2d4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d007      	beq.n	8001f30 <HAL_GPIO_Init+0x1c8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a47      	ldr	r2, [pc, #284]	; (8002040 <HAL_GPIO_Init+0x2d8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_GPIO_Init+0x1c4>
 8001f28:	2304      	movs	r3, #4
 8001f2a:	e008      	b.n	8001f3e <HAL_GPIO_Init+0x1d6>
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	e006      	b.n	8001f3e <HAL_GPIO_Init+0x1d6>
 8001f30:	2303      	movs	r3, #3
 8001f32:	e004      	b.n	8001f3e <HAL_GPIO_Init+0x1d6>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e002      	b.n	8001f3e <HAL_GPIO_Init+0x1d6>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_GPIO_Init+0x1d6>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	f002 0203 	and.w	r2, r2, #3
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	4093      	lsls	r3, r2
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f4e:	4938      	ldr	r1, [pc, #224]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f5c:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_GPIO_Init+0x2dc>)
 8001f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f82:	4a30      	ldr	r2, [pc, #192]	; (8002044 <HAL_GPIO_Init+0x2dc>)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001f8a:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <HAL_GPIO_Init+0x2dc>)
 8001f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fb0:	4a24      	ldr	r2, [pc, #144]	; (8002044 <HAL_GPIO_Init+0x2dc>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <HAL_GPIO_Init+0x2dc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_GPIO_Init+0x2dc>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_GPIO_Init+0x2dc>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002006:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <HAL_GPIO_Init+0x2dc>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	f47f aeab 	bne.w	8001d78 <HAL_GPIO_Init+0x10>
  }
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40010000 	.word	0x40010000
 8002034:	48000400 	.word	0x48000400
 8002038:	48000800 	.word	0x48000800
 800203c:	48000c00 	.word	0x48000c00
 8002040:	48001000 	.word	0x48001000
 8002044:	58000800 	.word	0x58000800

08002048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
 8002054:	4613      	mov	r3, r2
 8002056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002058:	787b      	ldrb	r3, [r7, #1]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002064:	e002      	b.n	800206c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e081      	b.n	800218e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fb44 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2224      	movs	r2, #36	; 0x24
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	e006      	b.n	8002100 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d104      	bne.n	8002112 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002110:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	ea42 0103 	orr.w	r1, r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	021a      	lsls	r2, r3, #8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69d9      	ldr	r1, [r3, #28]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	461a      	mov	r2, r3
 80021a4:	460b      	mov	r3, r1
 80021a6:	817b      	strh	r3, [r7, #10]
 80021a8:	4613      	mov	r3, r2
 80021aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	f040 80da 	bne.w	800236e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_I2C_Master_Transmit+0x30>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e0d3      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021d0:	f7ff fcaa 	bl	8001b28 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2319      	movs	r3, #25
 80021dc:	2201      	movs	r2, #1
 80021de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 fbc6 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0be      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2221      	movs	r2, #33	; 0x21
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2210      	movs	r2, #16
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	893a      	ldrh	r2, [r7, #8]
 8002212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	2bff      	cmp	r3, #255	; 0xff
 8002222:	d90e      	bls.n	8002242 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	22ff      	movs	r2, #255	; 0xff
 8002228:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	b2da      	uxtb	r2, r3
 8002230:	8979      	ldrh	r1, [r7, #10]
 8002232:	4b51      	ldr	r3, [pc, #324]	; (8002378 <HAL_I2C_Master_Transmit+0x1e0>)
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fcbc 	bl	8002bb8 <I2C_TransferConfig>
 8002240:	e06c      	b.n	800231c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	b2da      	uxtb	r2, r3
 8002252:	8979      	ldrh	r1, [r7, #10]
 8002254:	4b48      	ldr	r3, [pc, #288]	; (8002378 <HAL_I2C_Master_Transmit+0x1e0>)
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fcab 	bl	8002bb8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002262:	e05b      	b.n	800231c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	6a39      	ldr	r1, [r7, #32]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 fbc3 	bl	80029f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e07b      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d034      	beq.n	800231c <HAL_I2C_Master_Transmit+0x184>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d130      	bne.n	800231c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fb55 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e04d      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d90e      	bls.n	80022fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	22ff      	movs	r2, #255	; 0xff
 80022e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	2300      	movs	r3, #0
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fc5f 	bl	8002bb8 <I2C_TransferConfig>
 80022fa:	e00f      	b.n	800231c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	b2da      	uxtb	r2, r3
 800230c:	8979      	ldrh	r1, [r7, #10]
 800230e:	2300      	movs	r3, #0
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fc4e 	bl	8002bb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d19e      	bne.n	8002264 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	6a39      	ldr	r1, [r7, #32]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fba2 	bl	8002a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e01a      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2220      	movs	r2, #32
 8002340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_I2C_Master_Transmit+0x1e4>)
 800234e:	400b      	ands	r3, r1
 8002350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	80002000 	.word	0x80002000
 800237c:	fe00e800 	.word	0xfe00e800

08002380 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	4608      	mov	r0, r1
 800238a:	4611      	mov	r1, r2
 800238c:	461a      	mov	r2, r3
 800238e:	4603      	mov	r3, r0
 8002390:	817b      	strh	r3, [r7, #10]
 8002392:	460b      	mov	r3, r1
 8002394:	813b      	strh	r3, [r7, #8]
 8002396:	4613      	mov	r3, r2
 8002398:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	f040 80f9 	bne.w	800259a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_I2C_Mem_Write+0x34>
 80023ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d105      	bne.n	80023c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0ed      	b.n	800259c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_I2C_Mem_Write+0x4e>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e0e6      	b.n	800259c <HAL_I2C_Mem_Write+0x21c>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023d6:	f7ff fba7 	bl	8001b28 <HAL_GetTick>
 80023da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2319      	movs	r3, #25
 80023e2:	2201      	movs	r2, #1
 80023e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fac3 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0d1      	b.n	800259c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2221      	movs	r2, #33	; 0x21
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2240      	movs	r2, #64	; 0x40
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a3a      	ldr	r2, [r7, #32]
 8002412:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002418:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002420:	88f8      	ldrh	r0, [r7, #6]
 8002422:	893a      	ldrh	r2, [r7, #8]
 8002424:	8979      	ldrh	r1, [r7, #10]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	4603      	mov	r3, r0
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f9d3 	bl	80027dc <I2C_RequestMemoryWrite>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0a9      	b.n	800259c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	2bff      	cmp	r3, #255	; 0xff
 8002450:	d90e      	bls.n	8002470 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	22ff      	movs	r2, #255	; 0xff
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	b2da      	uxtb	r2, r3
 800245e:	8979      	ldrh	r1, [r7, #10]
 8002460:	2300      	movs	r3, #0
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fba5 	bl	8002bb8 <I2C_TransferConfig>
 800246e:	e00f      	b.n	8002490 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	b2da      	uxtb	r2, r3
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	2300      	movs	r3, #0
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fb94 	bl	8002bb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 faad 	bl	80029f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e07b      	b.n	800259c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d034      	beq.n	8002548 <HAL_I2C_Mem_Write+0x1c8>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d130      	bne.n	8002548 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	2200      	movs	r2, #0
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fa3f 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e04d      	b.n	800259c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	2bff      	cmp	r3, #255	; 0xff
 8002508:	d90e      	bls.n	8002528 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	22ff      	movs	r2, #255	; 0xff
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	b2da      	uxtb	r2, r3
 8002516:	8979      	ldrh	r1, [r7, #10]
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fb49 	bl	8002bb8 <I2C_TransferConfig>
 8002526:	e00f      	b.n	8002548 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	b2da      	uxtb	r2, r3
 8002538:	8979      	ldrh	r1, [r7, #10]
 800253a:	2300      	movs	r3, #0
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fb38 	bl	8002bb8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d19e      	bne.n	8002490 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fa8c 	bl	8002a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e01a      	b.n	800259c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2220      	movs	r2, #32
 800256c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_I2C_Mem_Write+0x224>)
 800257a:	400b      	ands	r3, r1
 800257c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
  }
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	fe00e800 	.word	0xfe00e800

080025a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	817b      	strh	r3, [r7, #10]
 80025ba:	460b      	mov	r3, r1
 80025bc:	813b      	strh	r3, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	f040 80fd 	bne.w	80027ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_I2C_Mem_Read+0x34>
 80025d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d105      	bne.n	80025e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0f1      	b.n	80027cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_I2C_Mem_Read+0x4e>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e0ea      	b.n	80027cc <HAL_I2C_Mem_Read+0x224>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025fe:	f7ff fa93 	bl	8001b28 <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2319      	movs	r3, #25
 800260a:	2201      	movs	r2, #1
 800260c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f9af 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0d5      	b.n	80027cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2222      	movs	r2, #34	; 0x22
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2240      	movs	r2, #64	; 0x40
 800262c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002648:	88f8      	ldrh	r0, [r7, #6]
 800264a:	893a      	ldrh	r2, [r7, #8]
 800264c:	8979      	ldrh	r1, [r7, #10]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4603      	mov	r3, r0
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f913 	bl	8002884 <I2C_RequestMemoryRead>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0ad      	b.n	80027cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2bff      	cmp	r3, #255	; 0xff
 8002678:	d90e      	bls.n	8002698 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	22ff      	movs	r2, #255	; 0xff
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	b2da      	uxtb	r2, r3
 8002686:	8979      	ldrh	r1, [r7, #10]
 8002688:	4b52      	ldr	r3, [pc, #328]	; (80027d4 <HAL_I2C_Mem_Read+0x22c>)
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fa91 	bl	8002bb8 <I2C_TransferConfig>
 8002696:	e00f      	b.n	80026b8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	8979      	ldrh	r1, [r7, #10]
 80026aa:	4b4a      	ldr	r3, [pc, #296]	; (80027d4 <HAL_I2C_Mem_Read+0x22c>)
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa80 	bl	8002bb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	2200      	movs	r2, #0
 80026c0:	2104      	movs	r1, #4
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f956 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07c      	b.n	80027cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d034      	beq.n	8002778 <HAL_I2C_Mem_Read+0x1d0>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	2b00      	cmp	r3, #0
 8002714:	d130      	bne.n	8002778 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	2200      	movs	r2, #0
 800271e:	2180      	movs	r1, #128	; 0x80
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f927 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e04d      	b.n	80027cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	2bff      	cmp	r3, #255	; 0xff
 8002738:	d90e      	bls.n	8002758 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	22ff      	movs	r2, #255	; 0xff
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	b2da      	uxtb	r2, r3
 8002746:	8979      	ldrh	r1, [r7, #10]
 8002748:	2300      	movs	r3, #0
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fa31 	bl	8002bb8 <I2C_TransferConfig>
 8002756:	e00f      	b.n	8002778 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	b2da      	uxtb	r2, r3
 8002768:	8979      	ldrh	r1, [r7, #10]
 800276a:	2300      	movs	r3, #0
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fa20 	bl	8002bb8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d19a      	bne.n	80026b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f974 	bl	8002a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e01a      	b.n	80027cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2220      	movs	r2, #32
 800279c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_I2C_Mem_Read+0x230>)
 80027aa:	400b      	ands	r3, r1
 80027ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e000      	b.n	80027cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
  }
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	80002400 	.word	0x80002400
 80027d8:	fe00e800 	.word	0xfe00e800

080027dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	817b      	strh	r3, [r7, #10]
 80027ee:	460b      	mov	r3, r1
 80027f0:	813b      	strh	r3, [r7, #8]
 80027f2:	4613      	mov	r3, r2
 80027f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	8979      	ldrh	r1, [r7, #10]
 80027fc:	4b20      	ldr	r3, [pc, #128]	; (8002880 <I2C_RequestMemoryWrite+0xa4>)
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f9d7 	bl	8002bb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	69b9      	ldr	r1, [r7, #24]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f8f0 	bl	80029f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e02c      	b.n	8002878 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002824:	893b      	ldrh	r3, [r7, #8]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	629a      	str	r2, [r3, #40]	; 0x28
 800282e:	e015      	b.n	800285c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002830:	893b      	ldrh	r3, [r7, #8]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	b29b      	uxth	r3, r3
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	69b9      	ldr	r1, [r7, #24]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f8d6 	bl	80029f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e012      	b.n	8002878 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002852:	893b      	ldrh	r3, [r7, #8]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2200      	movs	r2, #0
 8002864:	2180      	movs	r1, #128	; 0x80
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f884 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	80002000 	.word	0x80002000

08002884 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	4603      	mov	r3, r0
 8002894:	817b      	strh	r3, [r7, #10]
 8002896:	460b      	mov	r3, r1
 8002898:	813b      	strh	r3, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <I2C_RequestMemoryRead+0xa4>)
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2300      	movs	r3, #0
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f984 	bl	8002bb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	69b9      	ldr	r1, [r7, #24]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f89d 	bl	80029f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e02c      	b.n	800291e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d105      	bne.n	80028d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028ca:	893b      	ldrh	r3, [r7, #8]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28
 80028d4:	e015      	b.n	8002902 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028d6:	893b      	ldrh	r3, [r7, #8]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	b29b      	uxth	r3, r3
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	69b9      	ldr	r1, [r7, #24]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f883 	bl	80029f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e012      	b.n	800291e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028f8:	893b      	ldrh	r3, [r7, #8]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2200      	movs	r2, #0
 800290a:	2140      	movs	r1, #64	; 0x40
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f831 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	80002000 	.word	0x80002000

0800292c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b02      	cmp	r3, #2
 8002940:	d103      	bne.n	800294a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d007      	beq.n	8002968 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	619a      	str	r2, [r3, #24]
  }
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002984:	e022      	b.n	80029cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d01e      	beq.n	80029cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298e:	f7ff f8cb 	bl	8001b28 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d113      	bne.n	80029cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e00f      	b.n	80029ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4013      	ands	r3, r2
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d0cd      	beq.n	8002986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a00:	e02c      	b.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f870 	bl	8002aec <I2C_IsAcknowledgeFailed>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e02a      	b.n	8002a6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d01e      	beq.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7ff f883 	bl	8001b28 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d113      	bne.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e007      	b.n	8002a6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d1cb      	bne.n	8002a02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a80:	e028      	b.n	8002ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f830 	bl	8002aec <I2C_IsAcknowledgeFailed>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e026      	b.n	8002ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a96:	f7ff f847 	bl	8001b28 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d113      	bne.n	8002ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e007      	b.n	8002ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d1cf      	bne.n	8002a82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b10      	cmp	r3, #16
 8002b04:	d151      	bne.n	8002baa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b06:	e022      	b.n	8002b4e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0e:	d01e      	beq.n	8002b4e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7ff f80a 	bl	8001b28 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <I2C_IsAcknowledgeFailed+0x3a>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d113      	bne.n	8002b4e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e02e      	b.n	8002bac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d1d5      	bne.n	8002b08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2210      	movs	r2, #16
 8002b62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff fedd 	bl	800292c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <I2C_IsAcknowledgeFailed+0xc8>)
 8002b7e:	400b      	ands	r3, r1
 8002b80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f043 0204 	orr.w	r2, r3, #4
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	fe00e800 	.word	0xfe00e800

08002bb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	0d5b      	lsrs	r3, r3, #21
 8002bd4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <I2C_TransferConfig+0x58>)
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	ea02 0103 	and.w	r1, r2, r3
 8002be2:	897b      	ldrh	r3, [r7, #10]
 8002be4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002be8:	7a7b      	ldrb	r3, [r7, #9]
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	03ff63ff 	.word	0x03ff63ff

08002c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d138      	bne.n	8002c9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e032      	b.n	8002c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
  }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b085      	sub	sp, #20
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d139      	bne.n	8002d34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e033      	b.n	8002d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2224      	movs	r2, #36	; 0x24
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d44:	b08b      	sub	sp, #44	; 0x2c
 8002d46:	af06      	add	r7, sp, #24
 8002d48:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0d7      	b.n	8002f04 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d106      	bne.n	8002d6e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7fe fd55 	bl	8001818 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2203      	movs	r2, #3
 8002d72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fe50 	bl	8005a20 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e04c      	b.n	8002e20 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	3301      	adds	r3, #1
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	440b      	add	r3, r1
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	b298      	uxth	r0, r3
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3336      	adds	r3, #54	; 0x36
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3303      	adds	r3, #3
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	3338      	adds	r3, #56	; 0x38
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002df2:	7bfa      	ldrb	r2, [r7, #15]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	440b      	add	r3, r1
 8002e00:	333c      	adds	r3, #60	; 0x3c
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	3340      	adds	r3, #64	; 0x40
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d3ad      	bcc.n	8002d86 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
 8002e2e:	e044      	b.n	8002eba <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	440b      	add	r3, r1
 8002e96:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	440b      	add	r3, r1
 8002eac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d3b5      	bcc.n	8002e30 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	603b      	str	r3, [r7, #0]
 8002eca:	687e      	ldr	r6, [r7, #4]
 8002ecc:	466d      	mov	r5, sp
 8002ece:	f106 0410 	add.w	r4, r6, #16
 8002ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	602b      	str	r3, [r5, #0]
 8002eda:	1d33      	adds	r3, r6, #4
 8002edc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ede:	6838      	ldr	r0, [r7, #0]
 8002ee0:	f002 fdb9 	bl	8005a56 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d102      	bne.n	8002f02 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f805 	bl	8002f0c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	f043 0302 	orr.w	r3, r3, #2
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	58000400 	.word	0x58000400

08002f80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	58000400 	.word	0x58000400

08002f9c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fae:	d101      	bne.n	8002fb4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_RCC_HSE_Enable>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_RCC_HSE_Disable>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_RCC_HSE_IsReady>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800300e:	d101      	bne.n	8003014 <LL_RCC_HSE_IsReady+0x18>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <LL_RCC_HSE_IsReady+0x1a>
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_RCC_HSI_Enable>:
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	6013      	str	r3, [r2, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_RCC_HSI_Disable>:
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800304c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003050:	6013      	str	r3, [r2, #0]
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_RCC_HSI_IsReady>:
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d101      	bne.n	8003074 <LL_RCC_HSI_IsReady+0x18>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <LL_RCC_HSI_IsReady+0x1a>
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_RCC_HSI48_Enable>:
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80030ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_RCC_HSI48_Disable>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80030d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_RCC_HSI48_IsReady>:
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d101      	bne.n	8003106 <LL_RCC_HSI48_IsReady+0x18>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <LL_RCC_HSI48_IsReady+0x1a>
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_RCC_LSE_Enable>:
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_RCC_LSE_Disable>:
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_RCC_LSE_EnableBypass>:
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003166:	f043 0304 	orr.w	r3, r3, #4
 800316a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_RCC_LSE_DisableBypass>:
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003188:	f023 0304 	bic.w	r3, r3, #4
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800319e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d101      	bne.n	80031b2 <LL_RCC_LSE_IsReady+0x18>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <LL_RCC_LSE_IsReady+0x1a>
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031d6:	bf00      	nop
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d101      	bne.n	800321a <LL_RCC_LSI1_IsReady+0x18>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <LL_RCC_LSI1_IsReady+0x1a>
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800322a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800324c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b08      	cmp	r3, #8
 800327c:	d101      	bne.n	8003282 <LL_RCC_LSI2_IsReady+0x18>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <LL_RCC_LSI2_IsReady+0x1a>
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80032c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	6013      	str	r3, [r2, #0]
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	d101      	bne.n	800330e <LL_RCC_MSI_IsReady+0x16>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <LL_RCC_MSI_IsReady+0x18>
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003352:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2bb0      	cmp	r3, #176	; 0xb0
 8003358:	d901      	bls.n	800335e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800335a:	23b0      	movs	r3, #176	; 0xb0
 800335c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800335e:	687b      	ldr	r3, [r7, #4]
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800339e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 0203 	bic.w	r2, r3, #3
 80033a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80033c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80033de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800340e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003436:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800343a:	f023 020f 	bic.w	r2, r3, #15
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800346a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4313      	orrs	r3, r2
 8003472:	608b      	str	r3, [r1, #8]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4313      	orrs	r3, r2
 800349a:	608b      	str	r3, [r1, #8]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80034ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80034c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80034e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80034f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800351a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351e:	6013      	str	r3, [r2, #0]
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800352e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353c:	6013      	str	r3, [r2, #0]
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800355a:	d101      	bne.n	8003560 <LL_RCC_PLL_IsReady+0x18>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <LL_RCC_PLL_IsReady+0x1a>
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800358a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003594:	4618      	mov	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80035a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80035b6:	b480      	push	{r7}
 80035b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80035ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0303 	and.w	r3, r3, #3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80035d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e0:	d101      	bne.n	80035e6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003606:	d101      	bne.n	800360c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800361c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003620:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362c:	d101      	bne.n	8003632 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003650:	d101      	bne.n	8003656 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003662:	b480      	push	{r7}
 8003664:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003670:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003674:	d101      	bne.n	800367a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b08d      	sub	sp, #52	; 0x34
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e37e      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 8092 	beq.w	80037cc <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a8:	f7ff fe89 	bl	80033be <LL_RCC_GetSysClkSource>
 80036ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036ae:	f7ff ff82 	bl	80035b6 <LL_RCC_PLL_GetMainSource>
 80036b2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_RCC_OscConfig+0x3e>
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	2b0c      	cmp	r3, #12
 80036be:	d14c      	bne.n	800375a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d149      	bne.n	800375a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036c6:	f7ff fe17 	bl	80032f8 <LL_RCC_MSI_IsReady>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_OscConfig+0x54>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e35d      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80036e0:	f7ff fe2f 	bl	8003342 <LL_RCC_MSI_GetRange>
 80036e4:	4603      	mov	r3, r0
 80036e6:	429c      	cmp	r4, r3
 80036e8:	d914      	bls.n	8003714 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fd42 	bl	8004178 <RCC_SetFlashLatencyFromMSIRange>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e34c      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fe09 	bl	800331a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fe2d 	bl	800336c <LL_RCC_MSI_SetCalibTrimming>
 8003712:	e013      	b.n	800373c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fdfe 	bl	800331a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fe22 	bl	800336c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fd23 	bl	8004178 <RCC_SetFlashLatencyFromMSIRange>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e32d      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800373c:	f000 fcdc 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 8003740:	4603      	mov	r3, r0
 8003742:	4ab3      	ldr	r2, [pc, #716]	; (8003a10 <HAL_RCC_OscConfig+0x388>)
 8003744:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003746:	4bb3      	ldr	r3, [pc, #716]	; (8003a14 <HAL_RCC_OscConfig+0x38c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe f99e 	bl	8001a8c <HAL_InitTick>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d039      	beq.n	80037ca <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e31e      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01e      	beq.n	80037a0 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003762:	f7ff fdab 	bl	80032bc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003766:	f7fe f9df 	bl	8001b28 <HAL_GetTick>
 800376a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800376e:	f7fe f9db 	bl	8001b28 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e30b      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003780:	f7ff fdba 	bl	80032f8 <LL_RCC_MSI_IsReady>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f1      	beq.n	800376e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fdc3 	bl	800331a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fde7 	bl	800336c <LL_RCC_MSI_SetCalibTrimming>
 800379e:	e015      	b.n	80037cc <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037a0:	f7ff fd9b 	bl	80032da <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037a4:	f7fe f9c0 	bl	8001b28 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037ac:	f7fe f9bc 	bl	8001b28 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e2ec      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80037be:	f7ff fd9b 	bl	80032f8 <LL_RCC_MSI_IsReady>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f1      	bne.n	80037ac <HAL_RCC_OscConfig+0x124>
 80037c8:	e000      	b.n	80037cc <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d04e      	beq.n	8003876 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d8:	f7ff fdf1 	bl	80033be <LL_RCC_GetSysClkSource>
 80037dc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037de:	f7ff feea 	bl	80035b6 <LL_RCC_PLL_GetMainSource>
 80037e2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d005      	beq.n	80037f6 <HAL_RCC_OscConfig+0x16e>
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2b0c      	cmp	r3, #12
 80037ee:	d10d      	bne.n	800380c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d10a      	bne.n	800380c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f6:	f7ff fc01 	bl	8002ffc <LL_RCC_HSE_IsReady>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d039      	beq.n	8003874 <HAL_RCC_OscConfig+0x1ec>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d135      	bne.n	8003874 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e2c5      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003814:	d102      	bne.n	800381c <HAL_RCC_OscConfig+0x194>
 8003816:	f7ff fbd3 	bl	8002fc0 <LL_RCC_HSE_Enable>
 800381a:	e001      	b.n	8003820 <HAL_RCC_OscConfig+0x198>
 800381c:	f7ff fbdf 	bl	8002fde <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe f97e 	bl	8001b28 <HAL_GetTick>
 800382c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7fe f97a 	bl	8001b28 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e2aa      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003842:	f7ff fbdb 	bl	8002ffc <LL_RCC_HSE_IsReady>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f1      	beq.n	8003830 <HAL_RCC_OscConfig+0x1a8>
 800384c:	e013      	b.n	8003876 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384e:	f7fe f96b 	bl	8001b28 <HAL_GetTick>
 8003852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003856:	f7fe f967 	bl	8001b28 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b64      	cmp	r3, #100	; 0x64
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e297      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003868:	f7ff fbc8 	bl	8002ffc <LL_RCC_HSE_IsReady>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f1      	bne.n	8003856 <HAL_RCC_OscConfig+0x1ce>
 8003872:	e000      	b.n	8003876 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d051      	beq.n	8003926 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003882:	f7ff fd9c 	bl	80033be <LL_RCC_GetSysClkSource>
 8003886:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003888:	f7ff fe95 	bl	80035b6 <LL_RCC_PLL_GetMainSource>
 800388c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_OscConfig+0x218>
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d113      	bne.n	80038c2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d110      	bne.n	80038c2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a0:	f7ff fbdc 	bl	800305c <LL_RCC_HSI_IsReady>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_RCC_OscConfig+0x22e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e270      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fbe0 	bl	8003080 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c0:	e031      	b.n	8003926 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d019      	beq.n	80038fe <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ca:	f7ff fba9 	bl	8003020 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fe f92b 	bl	8001b28 <HAL_GetTick>
 80038d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d6:	f7fe f927 	bl	8001b28 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e257      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80038e8:	f7ff fbb8 	bl	800305c <LL_RCC_HSI_IsReady>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f1      	beq.n	80038d6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fbc2 	bl	8003080 <LL_RCC_HSI_SetCalibTrimming>
 80038fc:	e013      	b.n	8003926 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fe:	f7ff fb9e 	bl	800303e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fe f911 	bl	8001b28 <HAL_GetTick>
 8003906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390a:	f7fe f90d 	bl	8001b28 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e23d      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 800391c:	f7ff fb9e 	bl	800305c <LL_RCC_HSI_IsReady>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f1      	bne.n	800390a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80a3 	beq.w	8003a86 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d076      	beq.n	8003a36 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d046      	beq.n	80039e2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003954:	f7ff fc55 	bl	8003202 <LL_RCC_LSI1_IsReady>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d113      	bne.n	8003986 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800395e:	f7ff fc2e 	bl	80031be <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003962:	f7fe f8e1 	bl	8001b28 <HAL_GetTick>
 8003966:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800396a:	f7fe f8dd 	bl	8001b28 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e20d      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800397c:	f7ff fc41 	bl	8003202 <LL_RCC_LSI1_IsReady>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f1      	beq.n	800396a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003986:	f7ff fc4e 	bl	8003226 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe f8cd 	bl	8001b28 <HAL_GetTick>
 800398e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003992:	f7fe f8c9 	bl	8001b28 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b03      	cmp	r3, #3
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e1f9      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80039a4:	f7ff fc61 	bl	800326a <LL_RCC_LSI2_IsReady>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f1      	beq.n	8003992 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fc6b 	bl	800328e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80039b8:	f7ff fc12 	bl	80031e0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fe f8b4 	bl	8001b28 <HAL_GetTick>
 80039c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80039c4:	f7fe f8b0 	bl	8001b28 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1e0      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80039d6:	f7ff fc14 	bl	8003202 <LL_RCC_LSI1_IsReady>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1f1      	bne.n	80039c4 <HAL_RCC_OscConfig+0x33c>
 80039e0:	e051      	b.n	8003a86 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80039e2:	f7ff fbec 	bl	80031be <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fe f89f 	bl	8001b28 <HAL_GetTick>
 80039ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80039ee:	f7fe f89b 	bl	8001b28 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e1cb      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003a00:	f7ff fbff 	bl	8003202 <LL_RCC_LSI1_IsReady>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f1      	beq.n	80039ee <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003a0a:	f7ff fc1d 	bl	8003248 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003a0e:	e00c      	b.n	8003a2a <HAL_RCC_OscConfig+0x3a2>
 8003a10:	20000010 	.word	0x20000010
 8003a14:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003a18:	f7fe f886 	bl	8001b28 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e1b6      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003a2a:	f7ff fc1e 	bl	800326a <LL_RCC_LSI2_IsReady>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f1      	bne.n	8003a18 <HAL_RCC_OscConfig+0x390>
 8003a34:	e027      	b.n	8003a86 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003a36:	f7ff fc07 	bl	8003248 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3a:	f7fe f875 	bl	8001b28 <HAL_GetTick>
 8003a3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003a42:	f7fe f871 	bl	8001b28 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1a1      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003a54:	f7ff fc09 	bl	800326a <LL_RCC_LSI2_IsReady>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f1      	bne.n	8003a42 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003a5e:	f7ff fbbf 	bl	80031e0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a62:	f7fe f861 	bl	8001b28 <HAL_GetTick>
 8003a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a6a:	f7fe f85d 	bl	8001b28 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e18d      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003a7c:	f7ff fbc1 	bl	8003202 <LL_RCC_LSI1_IsReady>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f1      	bne.n	8003a6a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d05b      	beq.n	8003b4a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a92:	4bb5      	ldr	r3, [pc, #724]	; (8003d68 <HAL_RCC_OscConfig+0x6e0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d114      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003a9e:	f7ff fa5f 	bl	8002f60 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa2:	f7fe f841 	bl	8001b28 <HAL_GetTick>
 8003aa6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aaa:	f7fe f83d 	bl	8001b28 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e16d      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abc:	4baa      	ldr	r3, [pc, #680]	; (8003d68 <HAL_RCC_OscConfig+0x6e0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x44e>
 8003ad0:	f7ff fb1f 	bl	8003112 <LL_RCC_LSE_Enable>
 8003ad4:	e00c      	b.n	8003af0 <HAL_RCC_OscConfig+0x468>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b05      	cmp	r3, #5
 8003adc:	d104      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x460>
 8003ade:	f7ff fb3a 	bl	8003156 <LL_RCC_LSE_EnableBypass>
 8003ae2:	f7ff fb16 	bl	8003112 <LL_RCC_LSE_Enable>
 8003ae6:	e003      	b.n	8003af0 <HAL_RCC_OscConfig+0x468>
 8003ae8:	f7ff fb24 	bl	8003134 <LL_RCC_LSE_Disable>
 8003aec:	f7ff fb44 	bl	8003178 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d014      	beq.n	8003b22 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fe f816 	bl	8001b28 <HAL_GetTick>
 8003afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b00:	f7fe f812 	bl	8001b28 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e140      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003b16:	f7ff fb40 	bl	800319a <LL_RCC_LSE_IsReady>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ef      	beq.n	8003b00 <HAL_RCC_OscConfig+0x478>
 8003b20:	e013      	b.n	8003b4a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b22:	f7fe f801 	bl	8001b28 <HAL_GetTick>
 8003b26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b28:	e00a      	b.n	8003b40 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f7fd fffd 	bl	8001b28 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e12b      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b40:	f7ff fb2b 	bl	800319a <LL_RCC_LSE_IsReady>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ef      	bne.n	8003b2a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d02c      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d014      	beq.n	8003b88 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b5e:	f7ff faa4 	bl	80030aa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fd ffe1 	bl	8001b28 <HAL_GetTick>
 8003b66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b6a:	f7fd ffdd 	bl	8001b28 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e10d      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003b7c:	f7ff fab7 	bl	80030ee <LL_RCC_HSI48_IsReady>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f1      	beq.n	8003b6a <HAL_RCC_OscConfig+0x4e2>
 8003b86:	e013      	b.n	8003bb0 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b88:	f7ff faa0 	bl	80030cc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd ffcc 	bl	8001b28 <HAL_GetTick>
 8003b90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b94:	f7fd ffc8 	bl	8001b28 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0f8      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003ba6:	f7ff faa2 	bl	80030ee <LL_RCC_HSI48_IsReady>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f1      	bne.n	8003b94 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80ee 	beq.w	8003d96 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bba:	f7ff fc00 	bl	80033be <LL_RCC_GetSysClkSource>
 8003bbe:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	f040 80af 	bne.w	8003d30 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0203 	and.w	r2, r3, #3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d123      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d11c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d114      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d10d      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d106      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d05d      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	2b0c      	cmp	r3, #12
 8003c2c:	d058      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0ab      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c40:	f7ff fc73 	bl	800352a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c44:	f7fd ff70 	bl	8001b28 <HAL_GetTick>
 8003c48:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fd ff6c 	bl	8001b28 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e09c      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ef      	bne.n	8003c4c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <HAL_RCC_OscConfig+0x6e4>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c7e:	4311      	orrs	r1, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c84:	0212      	lsls	r2, r2, #8
 8003c86:	4311      	orrs	r1, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c8c:	4311      	orrs	r1, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ca2:	f7ff fc33 	bl	800350c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cb6:	f7fd ff37 	bl	8001b28 <HAL_GetTick>
 8003cba:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fd ff33 	bl	8001b28 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e063      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0ef      	beq.n	8003cbe <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cde:	e05a      	b.n	8003d96 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e059      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d151      	bne.n	8003d96 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cf2:	f7ff fc0b 	bl	800350c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d06:	f7fd ff0f 	bl	8001b28 <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fd ff0b 	bl	8001b28 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e03b      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ef      	beq.n	8003d0e <HAL_RCC_OscConfig+0x686>
 8003d2e:	e032      	b.n	8003d96 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d02d      	beq.n	8003d92 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d36:	f7ff fbf8 	bl	800352a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d44:	f023 0303 	bic.w	r3, r3, #3
 8003d48:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d54:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fd fee3 	bl	8001b28 <HAL_GetTick>
 8003d62:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d64:	e00d      	b.n	8003d82 <HAL_RCC_OscConfig+0x6fa>
 8003d66:	bf00      	nop
 8003d68:	58000400 	.word	0x58000400
 8003d6c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fd feda 	bl	8001b28 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ef      	bne.n	8003d70 <HAL_RCC_OscConfig+0x6e8>
 8003d90:	e001      	b.n	8003d96 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3734      	adds	r7, #52	; 0x34
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd90      	pop	{r4, r7, pc}

08003da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e12d      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db4:	4b98      	ldr	r3, [pc, #608]	; (8004018 <HAL_RCC_ClockConfig+0x278>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d91b      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc2:	4b95      	ldr	r3, [pc, #596]	; (8004018 <HAL_RCC_ClockConfig+0x278>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 0207 	bic.w	r2, r3, #7
 8003dca:	4993      	ldr	r1, [pc, #588]	; (8004018 <HAL_RCC_ClockConfig+0x278>)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd2:	f7fd fea9 	bl	8001b28 <HAL_GetTick>
 8003dd6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003dda:	f7fd fea5 	bl	8001b28 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e111      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dec:	4b8a      	ldr	r3, [pc, #552]	; (8004018 <HAL_RCC_ClockConfig+0x278>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d1ef      	bne.n	8003dda <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fae3 	bl	80033d6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e10:	f7fd fe8a 	bl	8001b28 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e18:	f7fd fe86 	bl	8001b28 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0f2      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003e2a:	f7ff fbd0 	bl	80035ce <LL_RCC_IsActiveFlag_HPRE>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f1      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d016      	beq.n	8003e6e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fada 	bl	80033fe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e4a:	f7fd fe6d 	bl	8001b28 <HAL_GetTick>
 8003e4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e52:	f7fd fe69 	bl	8001b28 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e0d5      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003e64:	f7ff fbc5 	bl	80035f2 <LL_RCC_IsActiveFlag_C2HPRE>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f1      	beq.n	8003e52 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d016      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fad3 	bl	800342a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e84:	f7fd fe50 	bl	8001b28 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e8c:	f7fd fe4c 	bl	8001b28 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0b8      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003e9e:	f7ff fbbb 	bl	8003618 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f1      	beq.n	8003e8c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d016      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff facd 	bl	8003458 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ebe:	f7fd fe33 	bl	8001b28 <HAL_GetTick>
 8003ec2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ec6:	f7fd fe2f 	bl	8001b28 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e09b      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003ed8:	f7ff fbb1 	bl	800363e <LL_RCC_IsActiveFlag_PPRE1>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f1      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d017      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fac3 	bl	8003480 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003efa:	f7fd fe15 	bl	8001b28 <HAL_GetTick>
 8003efe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f02:	f7fd fe11 	bl	8001b28 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e07d      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003f14:	f7ff fba5 	bl	8003662 <LL_RCC_IsActiveFlag_PPRE2>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f1      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d043      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d106      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003f32:	f7ff f863 	bl	8002ffc <LL_RCC_HSE_IsReady>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d11e      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e067      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d106      	bne.n	8003f56 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003f48:	f7ff fafe 	bl	8003548 <LL_RCC_PLL_IsReady>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d113      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e05c      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003f5e:	f7ff f9cb 	bl	80032f8 <LL_RCC_MSI_IsReady>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d108      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e051      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003f6c:	f7ff f876 	bl	800305c <LL_RCC_HSI_IsReady>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e04a      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fa09 	bl	8003396 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f84:	f7fd fdd0 	bl	8001b28 <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8c:	f7fd fdcc 	bl	8001b28 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e036      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	f7ff fa0c 	bl	80033be <LL_RCC_GetSysClkSource>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d1ec      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb2:	4b19      	ldr	r3, [pc, #100]	; (8004018 <HAL_RCC_ClockConfig+0x278>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d21b      	bcs.n	8003ff8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc0:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_RCC_ClockConfig+0x278>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f023 0207 	bic.w	r2, r3, #7
 8003fc8:	4913      	ldr	r1, [pc, #76]	; (8004018 <HAL_RCC_ClockConfig+0x278>)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd0:	f7fd fdaa 	bl	8001b28 <HAL_GetTick>
 8003fd4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003fd8:	f7fd fda6 	bl	8001b28 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e012      	b.n	8004010 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_ClockConfig+0x278>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d1ef      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ff8:	f000 f87e 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4a07      	ldr	r2, [pc, #28]	; (800401c <HAL_RCC_ClockConfig+0x27c>)
 8004000:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004002:	f7fd fd9d 	bl	8001b40 <HAL_GetTickPrio>
 8004006:	4603      	mov	r3, r0
 8004008:	4618      	mov	r0, r3
 800400a:	f7fd fd3f 	bl	8001a8c <HAL_InitTick>
 800400e:	4603      	mov	r3, r0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	58004000 	.word	0x58004000
 800401c:	20000010 	.word	0x20000010

08004020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004026:	f7ff f9ca 	bl	80033be <LL_RCC_GetSysClkSource>
 800402a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004032:	f7ff f986 	bl	8003342 <LL_RCC_MSI_GetRange>
 8004036:	4603      	mov	r3, r0
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8004040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	e04b      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b04      	cmp	r3, #4
 800404c:	d102      	bne.n	8004054 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800404e:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	e045      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b08      	cmp	r3, #8
 8004058:	d10a      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800405a:	f7fe ff9f 	bl	8002f9c <LL_RCC_HSE_IsEnabledDiv2>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d102      	bne.n	800406a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004064:	4b22      	ldr	r3, [pc, #136]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e03a      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800406a:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e037      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004070:	f7ff faa1 	bl	80035b6 <LL_RCC_PLL_GetMainSource>
 8004074:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d003      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x64>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d003      	beq.n	800408a <HAL_RCC_GetSysClockFreq+0x6a>
 8004082:	e00d      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004086:	60bb      	str	r3, [r7, #8]
        break;
 8004088:	e015      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800408a:	f7fe ff87 	bl	8002f9c <LL_RCC_HSE_IsEnabledDiv2>
 800408e:	4603      	mov	r3, r0
 8004090:	2b01      	cmp	r3, #1
 8004092:	d102      	bne.n	800409a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004094:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004096:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004098:	e00d      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800409c:	60bb      	str	r3, [r7, #8]
        break;
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80040a0:	f7ff f94f 	bl	8003342 <LL_RCC_MSI_GetRange>
 80040a4:	4603      	mov	r3, r0
 80040a6:	091b      	lsrs	r3, r3, #4
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	4a0f      	ldr	r2, [pc, #60]	; (80040ec <HAL_RCC_GetSysClockFreq+0xcc>)
 80040ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b2:	60bb      	str	r3, [r7, #8]
        break;
 80040b4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80040b6:	f7ff fa59 	bl	800356c <LL_RCC_PLL_GetN>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	fb03 f402 	mul.w	r4, r3, r2
 80040c2:	f7ff fa6c 	bl	800359e <LL_RCC_PLL_GetDivider>
 80040c6:	4603      	mov	r3, r0
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	3301      	adds	r3, #1
 80040cc:	fbb4 f4f3 	udiv	r4, r4, r3
 80040d0:	f7ff fa59 	bl	8003586 <LL_RCC_PLL_GetR>
 80040d4:	4603      	mov	r3, r0
 80040d6:	0f5b      	lsrs	r3, r3, #29
 80040d8:	3301      	adds	r3, #1
 80040da:	fbb4 f3f3 	udiv	r3, r4, r3
 80040de:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80040e0:	68fb      	ldr	r3, [r7, #12]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd90      	pop	{r4, r7, pc}
 80040ea:	bf00      	nop
 80040ec:	08006ae4 	.word	0x08006ae4
 80040f0:	00f42400 	.word	0x00f42400
 80040f4:	01e84800 	.word	0x01e84800

080040f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f8:	b598      	push	{r3, r4, r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80040fc:	f7ff ff90 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8004100:	4604      	mov	r4, r0
 8004102:	f7ff f9d1 	bl	80034a8 <LL_RCC_GetAHBPrescaler>
 8004106:	4603      	mov	r3, r0
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	4a03      	ldr	r2, [pc, #12]	; (800411c <HAL_RCC_GetHCLKFreq+0x24>)
 8004110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004114:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd98      	pop	{r3, r4, r7, pc}
 800411c:	08006a84 	.word	0x08006a84

08004120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004120:	b598      	push	{r3, r4, r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004124:	f7ff ffe8 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 8004128:	4604      	mov	r4, r0
 800412a:	f7ff f9d7 	bl	80034dc <LL_RCC_GetAPB1Prescaler>
 800412e:	4603      	mov	r3, r0
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	4a04      	ldr	r2, [pc, #16]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd98      	pop	{r3, r4, r7, pc}
 8004148:	08006ac4 	.word	0x08006ac4

0800414c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800414c:	b598      	push	{r3, r4, r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004150:	f7ff ffd2 	bl	80040f8 <HAL_RCC_GetHCLKFreq>
 8004154:	4604      	mov	r4, r0
 8004156:	f7ff f9cd 	bl	80034f4 <LL_RCC_GetAPB2Prescaler>
 800415a:	4603      	mov	r3, r0
 800415c:	0adb      	lsrs	r3, r3, #11
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	4a04      	ldr	r2, [pc, #16]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd98      	pop	{r3, r4, r7, pc}
 8004174:	08006ac4 	.word	0x08006ac4

08004178 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2bb0      	cmp	r3, #176	; 0xb0
 8004184:	d903      	bls.n	800418e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e007      	b.n	800419e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	4a11      	ldr	r2, [pc, #68]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800419e:	f7ff f98f 	bl	80034c0 <LL_RCC_GetAHB4Prescaler>
 80041a2:	4603      	mov	r3, r0
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	4a0d      	ldr	r2, [pc, #52]	; (80041e0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80041ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4a0a      	ldr	r2, [pc, #40]	; (80041e4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	0c9c      	lsrs	r4, r3, #18
 80041c2:	f7fe fedd 	bl	8002f80 <HAL_PWREx_GetVoltageRange>
 80041c6:	4603      	mov	r3, r0
 80041c8:	4619      	mov	r1, r3
 80041ca:	4620      	mov	r0, r4
 80041cc:	f000 f80c 	bl	80041e8 <RCC_SetFlashLatency>
 80041d0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd90      	pop	{r4, r7, pc}
 80041da:	bf00      	nop
 80041dc:	08006ae4 	.word	0x08006ae4
 80041e0:	08006a84 	.word	0x08006a84
 80041e4:	431bde83 	.word	0x431bde83

080041e8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b093      	sub	sp, #76	; 0x4c
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80041f2:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <RCC_SetFlashLatency+0xf0>)
 80041f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80041f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80041fe:	4a37      	ldr	r2, [pc, #220]	; (80042dc <RCC_SetFlashLatency+0xf4>)
 8004200:	f107 031c 	add.w	r3, r7, #28
 8004204:	ca07      	ldmia	r2, {r0, r1, r2}
 8004206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800420a:	4b35      	ldr	r3, [pc, #212]	; (80042e0 <RCC_SetFlashLatency+0xf8>)
 800420c:	f107 040c 	add.w	r4, r7, #12
 8004210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004216:	2300      	movs	r3, #0
 8004218:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004220:	d11c      	bne.n	800425c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004222:	2300      	movs	r3, #0
 8004224:	643b      	str	r3, [r7, #64]	; 0x40
 8004226:	e015      	b.n	8004254 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004230:	4413      	add	r3, r2
 8004232:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d808      	bhi.n	800424e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800423c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004244:	4413      	add	r3, r2
 8004246:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800424a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800424c:	e022      	b.n	8004294 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800424e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004250:	3301      	adds	r3, #1
 8004252:	643b      	str	r3, [r7, #64]	; 0x40
 8004254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004256:	2b03      	cmp	r3, #3
 8004258:	d9e6      	bls.n	8004228 <RCC_SetFlashLatency+0x40>
 800425a:	e01b      	b.n	8004294 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800425c:	2300      	movs	r3, #0
 800425e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004260:	e015      	b.n	800428e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800426a:	4413      	add	r3, r2
 800426c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	429a      	cmp	r2, r3
 8004274:	d808      	bhi.n	8004288 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800427e:	4413      	add	r3, r2
 8004280:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004284:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004286:	e005      	b.n	8004294 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428a:	3301      	adds	r3, #1
 800428c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004290:	2b02      	cmp	r3, #2
 8004292:	d9e6      	bls.n	8004262 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <RCC_SetFlashLatency+0xfc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f023 0207 	bic.w	r2, r3, #7
 800429c:	4911      	ldr	r1, [pc, #68]	; (80042e4 <RCC_SetFlashLatency+0xfc>)
 800429e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042a4:	f7fd fc40 	bl	8001b28 <HAL_GetTick>
 80042a8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80042aa:	e008      	b.n	80042be <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80042ac:	f7fd fc3c 	bl	8001b28 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e007      	b.n	80042ce <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80042be:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <RCC_SetFlashLatency+0xfc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d1ef      	bne.n	80042ac <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	374c      	adds	r7, #76	; 0x4c
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd90      	pop	{r4, r7, pc}
 80042d6:	bf00      	nop
 80042d8:	08006468 	.word	0x08006468
 80042dc:	08006478 	.word	0x08006478
 80042e0:	08006484 	.word	0x08006484
 80042e4:	58004000 	.word	0x58004000

080042e8 <LL_RCC_LSE_IsEnabled>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80042ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <LL_RCC_LSE_IsEnabled+0x18>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <LL_RCC_LSE_IsEnabled+0x1a>
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <LL_RCC_LSE_IsReady>:
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b02      	cmp	r3, #2
 800431e:	d101      	bne.n	8004324 <LL_RCC_LSE_IsReady+0x18>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <LL_RCC_LSE_IsReady+0x1a>
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <LL_RCC_MSI_EnablePLLMode>:
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800433e:	f043 0304 	orr.w	r3, r3, #4
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <LL_RCC_SetRFWKPClockSource>:
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_RCC_SetSMPSClockSource>:
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f023 0203 	bic.w	r2, r3, #3
 800438c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4313      	orrs	r3, r2
 8004394:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <LL_RCC_SetSMPSPrescaler>:
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80043aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <LL_RCC_SetUSARTClockSource>:
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80043d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <LL_RCC_SetLPUARTClockSource>:
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80043fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800440a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_RCC_SetI2CClockSource>:
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800442a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800443a:	43db      	mvns	r3, r3
 800443c:	401a      	ands	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <LL_RCC_SetLPTIMClockSource>:
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004468:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	43db      	mvns	r3, r3
 8004474:	401a      	ands	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_RCC_SetSAIClockSource>:
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <LL_RCC_SetRNGClockSource>:
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80044c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044cc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80044d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_RCC_SetCLK48ClockSource>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80044f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <LL_RCC_SetUSBClockSource>:
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ffe3 	bl	80044e8 <LL_RCC_SetCLK48ClockSource>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <LL_RCC_SetADCClockSource>:
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800453e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <LL_RCC_SetRTCClockSource>:
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800455e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800456a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <LL_RCC_GetRTCClockSource>:
{
 8004582:	b480      	push	{r7}
 8004584:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004592:	4618      	mov	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <LL_RCC_ForceBackupDomainReset>:
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80045a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <LL_RCC_ReleaseBackupDomainReset>:
{
 80045be:	b480      	push	{r7}
 80045c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80045c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045d6:	bf00      	nop
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <LL_RCC_PLLSAI1_Enable>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80045e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045f2:	6013      	str	r3, [r2, #0]
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <LL_RCC_PLLSAI1_Disable>:
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004610:	6013      	str	r3, [r2, #0]
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_RCC_PLLSAI1_IsReady>:
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800462e:	d101      	bne.n	8004634 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004648:	2300      	movs	r3, #0
 800464a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800464c:	2300      	movs	r3, #0
 800464e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d034      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004664:	d021      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004666:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800466a:	d81b      	bhi.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800466c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004670:	d01d      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004676:	d815      	bhi.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800467c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004680:	d110      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004690:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004692:	e00d      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	4618      	mov	r0, r3
 800469a:	f000 f94d 	bl	8004938 <RCCEx_PLLSAI1_ConfigNP>
 800469e:	4603      	mov	r3, r0
 80046a0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80046a2:	e005      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	77fb      	strb	r3, [r7, #31]
        break;
 80046a8:	e002      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80046ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b0:	7ffb      	ldrb	r3, [r7, #31]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d105      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fee8 	bl	8004490 <LL_RCC_SetSAIClockSource>
 80046c0:	e001      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c2:	7ffb      	ldrb	r3, [r7, #31]
 80046c4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d046      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80046d2:	f7ff ff56 	bl	8004582 <LL_RCC_GetRTCClockSource>
 80046d6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d03c      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80046e2:	f7fe fc3d 	bl	8002f60 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff30 	bl	8004556 <LL_RCC_SetRTCClockSource>
 80046f6:	e02e      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80046f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004700:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004702:	f7ff ff4b 	bl	800459c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004706:	f7ff ff5a 	bl	80045be <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004722:	f7ff fde1 	bl	80042e8 <LL_RCC_LSE_IsEnabled>
 8004726:	4603      	mov	r3, r0
 8004728:	2b01      	cmp	r3, #1
 800472a:	d114      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800472c:	f7fd f9fc 	bl	8001b28 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004732:	e00b      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004734:	f7fd f9f8 	bl	8001b28 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d902      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	77fb      	strb	r3, [r7, #31]
              break;
 800474a:	e004      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800474c:	f7ff fdde 	bl	800430c <LL_RCC_LSE_IsReady>
 8004750:	4603      	mov	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d1ee      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004756:	7ffb      	ldrb	r3, [r7, #31]
 8004758:	77bb      	strb	r3, [r7, #30]
 800475a:	e001      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	7ffb      	ldrb	r3, [r7, #31]
 800475e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fe2a 	bl	80043ca <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fe35 	bl	80043f6 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fe5d 	bl	800445c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fe52 	bl	800445c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fe2a 	bl	8004422 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d004      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fe1f 	bl	8004422 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d022      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fe8d 	bl	8004514 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004802:	d107      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800480e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004812:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800481c:	d10b      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f8e3 	bl	80049ee <RCCEx_PLLSAI1_ConfigNQ>
 8004828:	4603      	mov	r3, r0
 800482a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800482c:	7ffb      	ldrb	r3, [r7, #31]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004832:	7ffb      	ldrb	r3, [r7, #31]
 8004834:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02b      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484a:	d008      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004854:	d003      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	2b00      	cmp	r3, #0
 800485c:	d105      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fe2a 	bl	80044bc <LL_RCC_SetRNGClockSource>
 8004868:	e00a      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	2000      	movs	r0, #0
 8004876:	f7ff fe21 	bl	80044bc <LL_RCC_SetRNGClockSource>
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7ff fe34 	bl	80044e8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004888:	d107      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004898:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d022      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fe3d 	bl	800452a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048b8:	d107      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048d2:	d10b      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f8e3 	bl	8004aa4 <RCCEx_PLLSAI1_ConfigNR>
 80048de:	4603      	mov	r3, r0
 80048e0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80048e2:	7ffb      	ldrb	r3, [r7, #31]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80048e8:	7ffb      	ldrb	r3, [r7, #31]
 80048ea:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff fd26 	bl	800434e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fd45 	bl	80043a2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fd2c 	bl	800437a <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004922:	7fbb      	ldrb	r3, [r7, #30]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004930:	f7ff fcfe 	bl	8004330 <LL_RCC_MSI_EnablePLLMode>
}
 8004934:	bf00      	nop
 8004936:	bd80      	pop	{r7, pc}

08004938 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004944:	f7ff fe5b 	bl	80045fe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004948:	f7fd f8ee 	bl	8001b28 <HAL_GetTick>
 800494c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800494e:	e009      	b.n	8004964 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004950:	f7fd f8ea 	bl	8001b28 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d902      	bls.n	8004964 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	73fb      	strb	r3, [r7, #15]
      break;
 8004962:	e004      	b.n	800496e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004964:	f7ff fe5a 	bl	800461c <LL_RCC_PLLSAI1_IsReady>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d137      	bne.n	80049e4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004988:	4313      	orrs	r3, r2
 800498a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800498c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800499e:	4313      	orrs	r3, r2
 80049a0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80049a2:	f7ff fe1d 	bl	80045e0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a6:	f7fd f8bf 	bl	8001b28 <HAL_GetTick>
 80049aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049ac:	e009      	b.n	80049c2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049ae:	f7fd f8bb 	bl	8001b28 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d902      	bls.n	80049c2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	73fb      	strb	r3, [r7, #15]
        break;
 80049c0:	e004      	b.n	80049cc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049c2:	f7ff fe2b 	bl	800461c <LL_RCC_PLLSAI1_IsReady>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d1f0      	bne.n	80049ae <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d108      	bne.n	80049e4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80049d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e0:	4313      	orrs	r3, r2
 80049e2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80049fa:	f7ff fe00 	bl	80045fe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049fe:	f7fd f893 	bl	8001b28 <HAL_GetTick>
 8004a02:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a04:	e009      	b.n	8004a1a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a06:	f7fd f88f 	bl	8001b28 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d902      	bls.n	8004a1a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	73fb      	strb	r3, [r7, #15]
      break;
 8004a18:	e004      	b.n	8004a24 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a1a:	f7ff fdff 	bl	800461c <LL_RCC_PLLSAI1_IsReady>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f0      	bne.n	8004a06 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d137      	bne.n	8004a9a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a54:	4313      	orrs	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004a58:	f7ff fdc2 	bl	80045e0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5c:	f7fd f864 	bl	8001b28 <HAL_GetTick>
 8004a60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a62:	e009      	b.n	8004a78 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a64:	f7fd f860 	bl	8001b28 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d902      	bls.n	8004a78 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	73fb      	strb	r3, [r7, #15]
        break;
 8004a76:	e004      	b.n	8004a82 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a78:	f7ff fdd0 	bl	800461c <LL_RCC_PLLSAI1_IsReady>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d1f0      	bne.n	8004a64 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d108      	bne.n	8004a9a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a96:	4313      	orrs	r3, r2
 8004a98:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004ab0:	f7ff fda5 	bl	80045fe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ab4:	f7fd f838 	bl	8001b28 <HAL_GetTick>
 8004ab8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004aba:	e009      	b.n	8004ad0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004abc:	f7fd f834 	bl	8001b28 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d902      	bls.n	8004ad0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ace:	e004      	b.n	8004ada <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004ad0:	f7ff fda4 	bl	800461c <LL_RCC_PLLSAI1_IsReady>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d137      	bne.n	8004b50 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af4:	4313      	orrs	r3, r2
 8004af6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004b0e:	f7ff fd67 	bl	80045e0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b12:	f7fd f809 	bl	8001b28 <HAL_GetTick>
 8004b16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b18:	e009      	b.n	8004b2e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b1a:	f7fd f805 	bl	8001b28 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d902      	bls.n	8004b2e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	73fb      	strb	r3, [r7, #15]
        break;
 8004b2c:	e004      	b.n	8004b38 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b2e:	f7ff fd75 	bl	800461c <LL_RCC_PLLSAI1_IsReady>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d1f0      	bne.n	8004b1a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d108      	bne.n	8004b50 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e049      	b.n	8004c00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fc fe05 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3304      	adds	r3, #4
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f000 f8fb 	bl	8004d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIM_ConfigClockSource+0x18>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e0b5      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x184>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5c:	d03e      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0xd4>
 8004c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c62:	f200 8087 	bhi.w	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6a:	f000 8085 	beq.w	8004d78 <HAL_TIM_ConfigClockSource+0x170>
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c72:	d87f      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b70      	cmp	r3, #112	; 0x70
 8004c76:	d01a      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0xa6>
 8004c78:	2b70      	cmp	r3, #112	; 0x70
 8004c7a:	d87b      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b60      	cmp	r3, #96	; 0x60
 8004c7e:	d050      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x11a>
 8004c80:	2b60      	cmp	r3, #96	; 0x60
 8004c82:	d877      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b50      	cmp	r3, #80	; 0x50
 8004c86:	d03c      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0xfa>
 8004c88:	2b50      	cmp	r3, #80	; 0x50
 8004c8a:	d873      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d058      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x13a>
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d86f      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b30      	cmp	r3, #48	; 0x30
 8004c96:	d064      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	2b30      	cmp	r3, #48	; 0x30
 8004c9a:	d86b      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d060      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d867      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d05c      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d05a      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004cac:	e062      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6899      	ldr	r1, [r3, #8]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f000 f949 	bl	8004f54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	609a      	str	r2, [r3, #8]
      break;
 8004cda:	e04e      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6899      	ldr	r1, [r3, #8]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f000 f932 	bl	8004f54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cfe:	609a      	str	r2, [r3, #8]
      break;
 8004d00:	e03b      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 f8a4 	bl	8004e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2150      	movs	r1, #80	; 0x50
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f8fd 	bl	8004f1a <TIM_ITRx_SetConfig>
      break;
 8004d20:	e02b      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 f8c3 	bl	8004eba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2160      	movs	r1, #96	; 0x60
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f8ed 	bl	8004f1a <TIM_ITRx_SetConfig>
      break;
 8004d40:	e01b      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f000 f884 	bl	8004e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2140      	movs	r1, #64	; 0x40
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 f8dd 	bl	8004f1a <TIM_ITRx_SetConfig>
      break;
 8004d60:	e00b      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f000 f8d4 	bl	8004f1a <TIM_ITRx_SetConfig>
        break;
 8004d72:	e002      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004d74:	bf00      	nop
 8004d76:	e000      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004d78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a2a      	ldr	r2, [pc, #168]	; (8004e50 <TIM_Base_SetConfig+0xbc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_Base_SetConfig+0x20>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d108      	bne.n	8004dc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a21      	ldr	r2, [pc, #132]	; (8004e50 <TIM_Base_SetConfig+0xbc>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00b      	beq.n	8004de6 <TIM_Base_SetConfig+0x52>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd4:	d007      	beq.n	8004de6 <TIM_Base_SetConfig+0x52>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <TIM_Base_SetConfig+0xc0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d003      	beq.n	8004de6 <TIM_Base_SetConfig+0x52>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <TIM_Base_SetConfig+0xc4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d108      	bne.n	8004df8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <TIM_Base_SetConfig+0xbc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_Base_SetConfig+0xa0>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a0b      	ldr	r2, [pc, #44]	; (8004e54 <TIM_Base_SetConfig+0xc0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0xa0>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a0a      	ldr	r2, [pc, #40]	; (8004e58 <TIM_Base_SetConfig+0xc4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d103      	bne.n	8004e3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	615a      	str	r2, [r3, #20]
}
 8004e42:	bf00      	nop
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40014400 	.word	0x40014400
 8004e58:	40014800 	.word	0x40014800

08004e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f023 030a 	bic.w	r3, r3, #10
 8004e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b087      	sub	sp, #28
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f023 0210 	bic.w	r2, r3, #16
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	031b      	lsls	r3, r3, #12
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f043 0307 	orr.w	r3, r3, #7
 8004f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	609a      	str	r2, [r3, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	021a      	lsls	r2, r3, #8
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	609a      	str	r2, [r3, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e04a      	b.n	8005042 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1f      	ldr	r2, [pc, #124]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d108      	bne.n	8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a12      	ldr	r2, [pc, #72]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005014:	d10c      	bne.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4313      	orrs	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40012c00 	.word	0x40012c00

08005054 <LL_RCC_GetUSARTClockSource>:
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005060:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4013      	ands	r3, r2
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_RCC_GetLPUARTClockSource>:
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005080:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4013      	ands	r3, r2
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e042      	b.n	800512c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fc fb7d 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2224      	movs	r2, #36	; 0x24
 80050c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f82c 	bl	8005134 <UART_SetConfig>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e022      	b.n	800512c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa26 	bl	8005540 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 faad 	bl	8005684 <UART_CheckIdleState>
 800512a:	4603      	mov	r3, r0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005134:	b5b0      	push	{r4, r5, r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	4313      	orrs	r3, r2
 8005156:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4ba3      	ldr	r3, [pc, #652]	; (80053ec <UART_SetConfig+0x2b8>)
 8005160:	4013      	ands	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	69f9      	ldr	r1, [r7, #28]
 8005168:	430b      	orrs	r3, r1
 800516a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a98      	ldr	r2, [pc, #608]	; (80053f0 <UART_SetConfig+0x2bc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	4313      	orrs	r3, r2
 800519a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	69f9      	ldr	r1, [r7, #28]
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	f023 010f 	bic.w	r1, r3, #15
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a89      	ldr	r2, [pc, #548]	; (80053f4 <UART_SetConfig+0x2c0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d120      	bne.n	8005216 <UART_SetConfig+0xe2>
 80051d4:	2003      	movs	r0, #3
 80051d6:	f7ff ff3d 	bl	8005054 <LL_RCC_GetUSARTClockSource>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d817      	bhi.n	8005210 <UART_SetConfig+0xdc>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <UART_SetConfig+0xb4>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	08005205 	.word	0x08005205
 80051f0:	080051ff 	.word	0x080051ff
 80051f4:	0800520b 	.word	0x0800520b
 80051f8:	2301      	movs	r3, #1
 80051fa:	76fb      	strb	r3, [r7, #27]
 80051fc:	e038      	b.n	8005270 <UART_SetConfig+0x13c>
 80051fe:	2302      	movs	r3, #2
 8005200:	76fb      	strb	r3, [r7, #27]
 8005202:	e035      	b.n	8005270 <UART_SetConfig+0x13c>
 8005204:	2304      	movs	r3, #4
 8005206:	76fb      	strb	r3, [r7, #27]
 8005208:	e032      	b.n	8005270 <UART_SetConfig+0x13c>
 800520a:	2308      	movs	r3, #8
 800520c:	76fb      	strb	r3, [r7, #27]
 800520e:	e02f      	b.n	8005270 <UART_SetConfig+0x13c>
 8005210:	2310      	movs	r3, #16
 8005212:	76fb      	strb	r3, [r7, #27]
 8005214:	e02c      	b.n	8005270 <UART_SetConfig+0x13c>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a75      	ldr	r2, [pc, #468]	; (80053f0 <UART_SetConfig+0x2bc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d125      	bne.n	800526c <UART_SetConfig+0x138>
 8005220:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005224:	f7ff ff26 	bl	8005074 <LL_RCC_GetLPUARTClockSource>
 8005228:	4603      	mov	r3, r0
 800522a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800522e:	d017      	beq.n	8005260 <UART_SetConfig+0x12c>
 8005230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005234:	d817      	bhi.n	8005266 <UART_SetConfig+0x132>
 8005236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523a:	d00b      	beq.n	8005254 <UART_SetConfig+0x120>
 800523c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005240:	d811      	bhi.n	8005266 <UART_SetConfig+0x132>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <UART_SetConfig+0x11a>
 8005246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524a:	d006      	beq.n	800525a <UART_SetConfig+0x126>
 800524c:	e00b      	b.n	8005266 <UART_SetConfig+0x132>
 800524e:	2300      	movs	r3, #0
 8005250:	76fb      	strb	r3, [r7, #27]
 8005252:	e00d      	b.n	8005270 <UART_SetConfig+0x13c>
 8005254:	2302      	movs	r3, #2
 8005256:	76fb      	strb	r3, [r7, #27]
 8005258:	e00a      	b.n	8005270 <UART_SetConfig+0x13c>
 800525a:	2304      	movs	r3, #4
 800525c:	76fb      	strb	r3, [r7, #27]
 800525e:	e007      	b.n	8005270 <UART_SetConfig+0x13c>
 8005260:	2308      	movs	r3, #8
 8005262:	76fb      	strb	r3, [r7, #27]
 8005264:	e004      	b.n	8005270 <UART_SetConfig+0x13c>
 8005266:	2310      	movs	r3, #16
 8005268:	76fb      	strb	r3, [r7, #27]
 800526a:	e001      	b.n	8005270 <UART_SetConfig+0x13c>
 800526c:	2310      	movs	r3, #16
 800526e:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a5e      	ldr	r2, [pc, #376]	; (80053f0 <UART_SetConfig+0x2bc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	f040 808b 	bne.w	8005392 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800527c:	7efb      	ldrb	r3, [r7, #27]
 800527e:	2b08      	cmp	r3, #8
 8005280:	d823      	bhi.n	80052ca <UART_SetConfig+0x196>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <UART_SetConfig+0x154>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052cb 	.word	0x080052cb
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052cb 	.word	0x080052cb
 8005298:	080052bb 	.word	0x080052bb
 800529c:	080052cb 	.word	0x080052cb
 80052a0:	080052cb 	.word	0x080052cb
 80052a4:	080052cb 	.word	0x080052cb
 80052a8:	080052c3 	.word	0x080052c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ac:	f7fe ff38 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 80052b0:	6178      	str	r0, [r7, #20]
        break;
 80052b2:	e00f      	b.n	80052d4 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b4:	4b50      	ldr	r3, [pc, #320]	; (80053f8 <UART_SetConfig+0x2c4>)
 80052b6:	617b      	str	r3, [r7, #20]
        break;
 80052b8:	e00c      	b.n	80052d4 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ba:	f7fe feb1 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 80052be:	6178      	str	r0, [r7, #20]
        break;
 80052c0:	e008      	b.n	80052d4 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c6:	617b      	str	r3, [r7, #20]
        break;
 80052c8:	e004      	b.n	80052d4 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	76bb      	strb	r3, [r7, #26]
        break;
 80052d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 811a 	beq.w	8005510 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	4a46      	ldr	r2, [pc, #280]	; (80053fc <UART_SetConfig+0x2c8>)
 80052e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e6:	461a      	mov	r2, r3
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80052ee:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	4413      	add	r3, r2
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d305      	bcc.n	800530c <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	d902      	bls.n	8005312 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	76bb      	strb	r3, [r7, #26]
 8005310:	e0fe      	b.n	8005510 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4618      	mov	r0, r3
 8005316:	f04f 0100 	mov.w	r1, #0
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	4a37      	ldr	r2, [pc, #220]	; (80053fc <UART_SetConfig+0x2c8>)
 8005320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005324:	b29a      	uxth	r2, r3
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	f7fa ff79 	bl	8000220 <__aeabi_uldivmod>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	020b      	lsls	r3, r1, #8
 8005340:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005344:	0202      	lsls	r2, r0, #8
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	6849      	ldr	r1, [r1, #4]
 800534a:	0849      	lsrs	r1, r1, #1
 800534c:	4608      	mov	r0, r1
 800534e:	f04f 0100 	mov.w	r1, #0
 8005352:	1814      	adds	r4, r2, r0
 8005354:	eb43 0501 	adc.w	r5, r3, r1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	461a      	mov	r2, r3
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	4620      	mov	r0, r4
 8005364:	4629      	mov	r1, r5
 8005366:	f7fa ff5b 	bl	8000220 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4613      	mov	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005378:	d308      	bcc.n	800538c <UART_SetConfig+0x258>
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005380:	d204      	bcs.n	800538c <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	e0c1      	b.n	8005510 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	76bb      	strb	r3, [r7, #26]
 8005390:	e0be      	b.n	8005510 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800539a:	d16a      	bne.n	8005472 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800539c:	7efb      	ldrb	r3, [r7, #27]
 800539e:	3b01      	subs	r3, #1
 80053a0:	2b07      	cmp	r3, #7
 80053a2:	d82d      	bhi.n	8005400 <UART_SetConfig+0x2cc>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <UART_SetConfig+0x278>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053cd 	.word	0x080053cd
 80053b0:	080053d5 	.word	0x080053d5
 80053b4:	08005401 	.word	0x08005401
 80053b8:	080053db 	.word	0x080053db
 80053bc:	08005401 	.word	0x08005401
 80053c0:	08005401 	.word	0x08005401
 80053c4:	08005401 	.word	0x08005401
 80053c8:	080053e3 	.word	0x080053e3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053cc:	f7fe febe 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 80053d0:	6178      	str	r0, [r7, #20]
        break;
 80053d2:	e01a      	b.n	800540a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <UART_SetConfig+0x2c4>)
 80053d6:	617b      	str	r3, [r7, #20]
        break;
 80053d8:	e017      	b.n	800540a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053da:	f7fe fe21 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 80053de:	6178      	str	r0, [r7, #20]
        break;
 80053e0:	e013      	b.n	800540a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e6:	617b      	str	r3, [r7, #20]
        break;
 80053e8:	e00f      	b.n	800540a <UART_SetConfig+0x2d6>
 80053ea:	bf00      	nop
 80053ec:	cfff69f3 	.word	0xcfff69f3
 80053f0:	40008000 	.word	0x40008000
 80053f4:	40013800 	.word	0x40013800
 80053f8:	00f42400 	.word	0x00f42400
 80053fc:	08006b24 	.word	0x08006b24
      default:
        pclk = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	76bb      	strb	r3, [r7, #26]
        break;
 8005408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d07f      	beq.n	8005510 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	4a48      	ldr	r2, [pc, #288]	; (8005538 <UART_SetConfig+0x404>)
 8005416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800541a:	461a      	mov	r2, r3
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005422:	005a      	lsls	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	085b      	lsrs	r3, r3, #1
 800542a:	441a      	add	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	b29b      	uxth	r3, r3
 8005436:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b0f      	cmp	r3, #15
 800543c:	d916      	bls.n	800546c <UART_SetConfig+0x338>
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d212      	bcs.n	800546c <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f023 030f 	bic.w	r3, r3, #15
 800544e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	085b      	lsrs	r3, r3, #1
 8005454:	b29b      	uxth	r3, r3
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	b29a      	uxth	r2, r3
 800545c:	89fb      	ldrh	r3, [r7, #14]
 800545e:	4313      	orrs	r3, r2
 8005460:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	89fa      	ldrh	r2, [r7, #14]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	e051      	b.n	8005510 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	76bb      	strb	r3, [r7, #26]
 8005470:	e04e      	b.n	8005510 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005472:	7efb      	ldrb	r3, [r7, #27]
 8005474:	3b01      	subs	r3, #1
 8005476:	2b07      	cmp	r3, #7
 8005478:	d821      	bhi.n	80054be <UART_SetConfig+0x38a>
 800547a:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <UART_SetConfig+0x34c>)
 800547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005480:	080054a1 	.word	0x080054a1
 8005484:	080054a9 	.word	0x080054a9
 8005488:	080054bf 	.word	0x080054bf
 800548c:	080054af 	.word	0x080054af
 8005490:	080054bf 	.word	0x080054bf
 8005494:	080054bf 	.word	0x080054bf
 8005498:	080054bf 	.word	0x080054bf
 800549c:	080054b7 	.word	0x080054b7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a0:	f7fe fe54 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 80054a4:	6178      	str	r0, [r7, #20]
        break;
 80054a6:	e00f      	b.n	80054c8 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a8:	4b24      	ldr	r3, [pc, #144]	; (800553c <UART_SetConfig+0x408>)
 80054aa:	617b      	str	r3, [r7, #20]
        break;
 80054ac:	e00c      	b.n	80054c8 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ae:	f7fe fdb7 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 80054b2:	6178      	str	r0, [r7, #20]
        break;
 80054b4:	e008      	b.n	80054c8 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ba:	617b      	str	r3, [r7, #20]
        break;
 80054bc:	e004      	b.n	80054c8 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	76bb      	strb	r3, [r7, #26]
        break;
 80054c6:	bf00      	nop
    }

    if (pclk != 0U)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d020      	beq.n	8005510 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	4a19      	ldr	r2, [pc, #100]	; (8005538 <UART_SetConfig+0x404>)
 80054d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054d8:	461a      	mov	r2, r3
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	085b      	lsrs	r3, r3, #1
 80054e6:	441a      	add	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b0f      	cmp	r3, #15
 80054f8:	d908      	bls.n	800550c <UART_SetConfig+0x3d8>
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005500:	d204      	bcs.n	800550c <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	e001      	b.n	8005510 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800552c:	7ebb      	ldrb	r3, [r7, #26]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bdb0      	pop	{r4, r5, r7, pc}
 8005536:	bf00      	nop
 8005538:	08006b24 	.word	0x08006b24
 800553c:	00f42400 	.word	0x00f42400

08005540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01a      	beq.n	8005656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800563e:	d10a      	bne.n	8005656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	605a      	str	r2, [r3, #4]
  }
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af02      	add	r7, sp, #8
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005694:	f7fc fa48 	bl	8001b28 <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d10e      	bne.n	80056c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f82f 	bl	800571a <UART_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e025      	b.n	8005712 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d10e      	bne.n	80056f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f819 	bl	800571a <UART_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e00f      	b.n	8005712 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	603b      	str	r3, [r7, #0]
 8005726:	4613      	mov	r3, r2
 8005728:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572a:	e062      	b.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d05e      	beq.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005734:	f7fc f9f8 	bl	8001b28 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	429a      	cmp	r2, r3
 8005742:	d302      	bcc.n	800574a <UART_WaitOnFlagUntilTimeout+0x30>
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d11d      	bne.n	8005786 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005758:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0201 	bic.w	r2, r2, #1
 8005768:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e045      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d02e      	beq.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800579e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a2:	d126      	bne.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0201 	bic.w	r2, r2, #1
 80057cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e00f      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4013      	ands	r3, r2
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	bf0c      	ite	eq
 8005802:	2301      	moveq	r3, #1
 8005804:	2300      	movne	r3, #0
 8005806:	b2db      	uxtb	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	429a      	cmp	r2, r3
 800580e:	d08d      	beq.n	800572c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_UARTEx_DisableFifoMode+0x16>
 800582c:	2302      	movs	r3, #2
 800582e:	e027      	b.n	8005880 <HAL_UARTEx_DisableFifoMode+0x66>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2224      	movs	r2, #36	; 0x24
 800583c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800585e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e02d      	b.n	8005900 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2224      	movs	r2, #36	; 0x24
 80058b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f84f 	bl	8005984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800591c:	2302      	movs	r3, #2
 800591e:	e02d      	b.n	800597c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f811 	bl	8005984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005990:	2b00      	cmp	r3, #0
 8005992:	d108      	bne.n	80059a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059a4:	e031      	b.n	8005a0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059a6:	2308      	movs	r3, #8
 80059a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059aa:	2308      	movs	r3, #8
 80059ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	0e5b      	lsrs	r3, r3, #25
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	0f5b      	lsrs	r3, r3, #29
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	7b3a      	ldrb	r2, [r7, #12]
 80059d2:	4911      	ldr	r1, [pc, #68]	; (8005a18 <UARTEx_SetNbDataToProcess+0x94>)
 80059d4:	5c8a      	ldrb	r2, [r1, r2]
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059da:	7b3a      	ldrb	r2, [r7, #12]
 80059dc:	490f      	ldr	r1, [pc, #60]	; (8005a1c <UARTEx_SetNbDataToProcess+0x98>)
 80059de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	7b7a      	ldrb	r2, [r7, #13]
 80059f0:	4909      	ldr	r1, [pc, #36]	; (8005a18 <UARTEx_SetNbDataToProcess+0x94>)
 80059f2:	5c8a      	ldrb	r2, [r1, r2]
 80059f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059f8:	7b7a      	ldrb	r2, [r7, #13]
 80059fa:	4908      	ldr	r1, [pc, #32]	; (8005a1c <UARTEx_SetNbDataToProcess+0x98>)
 80059fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a0a:	bf00      	nop
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	08006b3c 	.word	0x08006b3c
 8005a1c:	08006b44 	.word	0x08006b44

08005a20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a28:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	4013      	ands	r3, r2
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a56:	b084      	sub	sp, #16
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	f107 0014 	add.w	r0, r7, #20
 8005a64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	b004      	add	sp, #16
 8005a96:	4770      	bx	lr

08005a98 <__errno>:
 8005a98:	4b01      	ldr	r3, [pc, #4]	; (8005aa0 <__errno+0x8>)
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	2000001c 	.word	0x2000001c

08005aa4 <__libc_init_array>:
 8005aa4:	b570      	push	{r4, r5, r6, lr}
 8005aa6:	4d0d      	ldr	r5, [pc, #52]	; (8005adc <__libc_init_array+0x38>)
 8005aa8:	4c0d      	ldr	r4, [pc, #52]	; (8005ae0 <__libc_init_array+0x3c>)
 8005aaa:	1b64      	subs	r4, r4, r5
 8005aac:	10a4      	asrs	r4, r4, #2
 8005aae:	2600      	movs	r6, #0
 8005ab0:	42a6      	cmp	r6, r4
 8005ab2:	d109      	bne.n	8005ac8 <__libc_init_array+0x24>
 8005ab4:	4d0b      	ldr	r5, [pc, #44]	; (8005ae4 <__libc_init_array+0x40>)
 8005ab6:	4c0c      	ldr	r4, [pc, #48]	; (8005ae8 <__libc_init_array+0x44>)
 8005ab8:	f000 fc4e 	bl	8006358 <_init>
 8005abc:	1b64      	subs	r4, r4, r5
 8005abe:	10a4      	asrs	r4, r4, #2
 8005ac0:	2600      	movs	r6, #0
 8005ac2:	42a6      	cmp	r6, r4
 8005ac4:	d105      	bne.n	8005ad2 <__libc_init_array+0x2e>
 8005ac6:	bd70      	pop	{r4, r5, r6, pc}
 8005ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005acc:	4798      	blx	r3
 8005ace:	3601      	adds	r6, #1
 8005ad0:	e7ee      	b.n	8005ab0 <__libc_init_array+0xc>
 8005ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad6:	4798      	blx	r3
 8005ad8:	3601      	adds	r6, #1
 8005ada:	e7f2      	b.n	8005ac2 <__libc_init_array+0x1e>
 8005adc:	08006b88 	.word	0x08006b88
 8005ae0:	08006b88 	.word	0x08006b88
 8005ae4:	08006b88 	.word	0x08006b88
 8005ae8:	08006b8c 	.word	0x08006b8c

08005aec <memcpy>:
 8005aec:	440a      	add	r2, r1
 8005aee:	4291      	cmp	r1, r2
 8005af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005af4:	d100      	bne.n	8005af8 <memcpy+0xc>
 8005af6:	4770      	bx	lr
 8005af8:	b510      	push	{r4, lr}
 8005afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b02:	4291      	cmp	r1, r2
 8005b04:	d1f9      	bne.n	8005afa <memcpy+0xe>
 8005b06:	bd10      	pop	{r4, pc}

08005b08 <memmove>:
 8005b08:	4288      	cmp	r0, r1
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	eb01 0402 	add.w	r4, r1, r2
 8005b10:	d902      	bls.n	8005b18 <memmove+0x10>
 8005b12:	4284      	cmp	r4, r0
 8005b14:	4623      	mov	r3, r4
 8005b16:	d807      	bhi.n	8005b28 <memmove+0x20>
 8005b18:	1e43      	subs	r3, r0, #1
 8005b1a:	42a1      	cmp	r1, r4
 8005b1c:	d008      	beq.n	8005b30 <memmove+0x28>
 8005b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b26:	e7f8      	b.n	8005b1a <memmove+0x12>
 8005b28:	4402      	add	r2, r0
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	428a      	cmp	r2, r1
 8005b2e:	d100      	bne.n	8005b32 <memmove+0x2a>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b3a:	e7f7      	b.n	8005b2c <memmove+0x24>

08005b3c <memset>:
 8005b3c:	4402      	add	r2, r0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d100      	bne.n	8005b46 <memset+0xa>
 8005b44:	4770      	bx	lr
 8005b46:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4a:	e7f9      	b.n	8005b40 <memset+0x4>

08005b4c <siprintf>:
 8005b4c:	b40e      	push	{r1, r2, r3}
 8005b4e:	b500      	push	{lr}
 8005b50:	b09c      	sub	sp, #112	; 0x70
 8005b52:	ab1d      	add	r3, sp, #116	; 0x74
 8005b54:	9002      	str	r0, [sp, #8]
 8005b56:	9006      	str	r0, [sp, #24]
 8005b58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b5c:	4809      	ldr	r0, [pc, #36]	; (8005b84 <siprintf+0x38>)
 8005b5e:	9107      	str	r1, [sp, #28]
 8005b60:	9104      	str	r1, [sp, #16]
 8005b62:	4909      	ldr	r1, [pc, #36]	; (8005b88 <siprintf+0x3c>)
 8005b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b68:	9105      	str	r1, [sp, #20]
 8005b6a:	6800      	ldr	r0, [r0, #0]
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	a902      	add	r1, sp, #8
 8005b70:	f000 f868 	bl	8005c44 <_svfiprintf_r>
 8005b74:	9b02      	ldr	r3, [sp, #8]
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	b01c      	add	sp, #112	; 0x70
 8005b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b80:	b003      	add	sp, #12
 8005b82:	4770      	bx	lr
 8005b84:	2000001c 	.word	0x2000001c
 8005b88:	ffff0208 	.word	0xffff0208

08005b8c <__ssputs_r>:
 8005b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	688e      	ldr	r6, [r1, #8]
 8005b92:	429e      	cmp	r6, r3
 8005b94:	4682      	mov	sl, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	4690      	mov	r8, r2
 8005b9a:	461f      	mov	r7, r3
 8005b9c:	d838      	bhi.n	8005c10 <__ssputs_r+0x84>
 8005b9e:	898a      	ldrh	r2, [r1, #12]
 8005ba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ba4:	d032      	beq.n	8005c0c <__ssputs_r+0x80>
 8005ba6:	6825      	ldr	r5, [r4, #0]
 8005ba8:	6909      	ldr	r1, [r1, #16]
 8005baa:	eba5 0901 	sub.w	r9, r5, r1
 8005bae:	6965      	ldr	r5, [r4, #20]
 8005bb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bb8:	3301      	adds	r3, #1
 8005bba:	444b      	add	r3, r9
 8005bbc:	106d      	asrs	r5, r5, #1
 8005bbe:	429d      	cmp	r5, r3
 8005bc0:	bf38      	it	cc
 8005bc2:	461d      	movcc	r5, r3
 8005bc4:	0553      	lsls	r3, r2, #21
 8005bc6:	d531      	bpl.n	8005c2c <__ssputs_r+0xa0>
 8005bc8:	4629      	mov	r1, r5
 8005bca:	f000 fb1f 	bl	800620c <_malloc_r>
 8005bce:	4606      	mov	r6, r0
 8005bd0:	b950      	cbnz	r0, 8005be8 <__ssputs_r+0x5c>
 8005bd2:	230c      	movs	r3, #12
 8005bd4:	f8ca 3000 	str.w	r3, [sl]
 8005bd8:	89a3      	ldrh	r3, [r4, #12]
 8005bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bde:	81a3      	strh	r3, [r4, #12]
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295
 8005be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be8:	6921      	ldr	r1, [r4, #16]
 8005bea:	464a      	mov	r2, r9
 8005bec:	f7ff ff7e 	bl	8005aec <memcpy>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfa:	81a3      	strh	r3, [r4, #12]
 8005bfc:	6126      	str	r6, [r4, #16]
 8005bfe:	6165      	str	r5, [r4, #20]
 8005c00:	444e      	add	r6, r9
 8005c02:	eba5 0509 	sub.w	r5, r5, r9
 8005c06:	6026      	str	r6, [r4, #0]
 8005c08:	60a5      	str	r5, [r4, #8]
 8005c0a:	463e      	mov	r6, r7
 8005c0c:	42be      	cmp	r6, r7
 8005c0e:	d900      	bls.n	8005c12 <__ssputs_r+0x86>
 8005c10:	463e      	mov	r6, r7
 8005c12:	4632      	mov	r2, r6
 8005c14:	6820      	ldr	r0, [r4, #0]
 8005c16:	4641      	mov	r1, r8
 8005c18:	f7ff ff76 	bl	8005b08 <memmove>
 8005c1c:	68a3      	ldr	r3, [r4, #8]
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	1b9b      	subs	r3, r3, r6
 8005c22:	4432      	add	r2, r6
 8005c24:	60a3      	str	r3, [r4, #8]
 8005c26:	6022      	str	r2, [r4, #0]
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e7db      	b.n	8005be4 <__ssputs_r+0x58>
 8005c2c:	462a      	mov	r2, r5
 8005c2e:	f000 fb47 	bl	80062c0 <_realloc_r>
 8005c32:	4606      	mov	r6, r0
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d1e1      	bne.n	8005bfc <__ssputs_r+0x70>
 8005c38:	6921      	ldr	r1, [r4, #16]
 8005c3a:	4650      	mov	r0, sl
 8005c3c:	f000 fa96 	bl	800616c <_free_r>
 8005c40:	e7c7      	b.n	8005bd2 <__ssputs_r+0x46>
	...

08005c44 <_svfiprintf_r>:
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	4698      	mov	r8, r3
 8005c4a:	898b      	ldrh	r3, [r1, #12]
 8005c4c:	061b      	lsls	r3, r3, #24
 8005c4e:	b09d      	sub	sp, #116	; 0x74
 8005c50:	4607      	mov	r7, r0
 8005c52:	460d      	mov	r5, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	d50e      	bpl.n	8005c76 <_svfiprintf_r+0x32>
 8005c58:	690b      	ldr	r3, [r1, #16]
 8005c5a:	b963      	cbnz	r3, 8005c76 <_svfiprintf_r+0x32>
 8005c5c:	2140      	movs	r1, #64	; 0x40
 8005c5e:	f000 fad5 	bl	800620c <_malloc_r>
 8005c62:	6028      	str	r0, [r5, #0]
 8005c64:	6128      	str	r0, [r5, #16]
 8005c66:	b920      	cbnz	r0, 8005c72 <_svfiprintf_r+0x2e>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c70:	e0d1      	b.n	8005e16 <_svfiprintf_r+0x1d2>
 8005c72:	2340      	movs	r3, #64	; 0x40
 8005c74:	616b      	str	r3, [r5, #20]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7a:	2320      	movs	r3, #32
 8005c7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c84:	2330      	movs	r3, #48	; 0x30
 8005c86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e30 <_svfiprintf_r+0x1ec>
 8005c8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c8e:	f04f 0901 	mov.w	r9, #1
 8005c92:	4623      	mov	r3, r4
 8005c94:	469a      	mov	sl, r3
 8005c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c9a:	b10a      	cbz	r2, 8005ca0 <_svfiprintf_r+0x5c>
 8005c9c:	2a25      	cmp	r2, #37	; 0x25
 8005c9e:	d1f9      	bne.n	8005c94 <_svfiprintf_r+0x50>
 8005ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ca4:	d00b      	beq.n	8005cbe <_svfiprintf_r+0x7a>
 8005ca6:	465b      	mov	r3, fp
 8005ca8:	4622      	mov	r2, r4
 8005caa:	4629      	mov	r1, r5
 8005cac:	4638      	mov	r0, r7
 8005cae:	f7ff ff6d 	bl	8005b8c <__ssputs_r>
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f000 80aa 	beq.w	8005e0c <_svfiprintf_r+0x1c8>
 8005cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cba:	445a      	add	r2, fp
 8005cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8005cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80a2 	beq.w	8005e0c <_svfiprintf_r+0x1c8>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f04f 32ff 	mov.w	r2, #4294967295
 8005cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cd2:	f10a 0a01 	add.w	sl, sl, #1
 8005cd6:	9304      	str	r3, [sp, #16]
 8005cd8:	9307      	str	r3, [sp, #28]
 8005cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cde:	931a      	str	r3, [sp, #104]	; 0x68
 8005ce0:	4654      	mov	r4, sl
 8005ce2:	2205      	movs	r2, #5
 8005ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ce8:	4851      	ldr	r0, [pc, #324]	; (8005e30 <_svfiprintf_r+0x1ec>)
 8005cea:	f7fa fa49 	bl	8000180 <memchr>
 8005cee:	9a04      	ldr	r2, [sp, #16]
 8005cf0:	b9d8      	cbnz	r0, 8005d2a <_svfiprintf_r+0xe6>
 8005cf2:	06d0      	lsls	r0, r2, #27
 8005cf4:	bf44      	itt	mi
 8005cf6:	2320      	movmi	r3, #32
 8005cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cfc:	0711      	lsls	r1, r2, #28
 8005cfe:	bf44      	itt	mi
 8005d00:	232b      	movmi	r3, #43	; 0x2b
 8005d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d06:	f89a 3000 	ldrb.w	r3, [sl]
 8005d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d0c:	d015      	beq.n	8005d3a <_svfiprintf_r+0xf6>
 8005d0e:	9a07      	ldr	r2, [sp, #28]
 8005d10:	4654      	mov	r4, sl
 8005d12:	2000      	movs	r0, #0
 8005d14:	f04f 0c0a 	mov.w	ip, #10
 8005d18:	4621      	mov	r1, r4
 8005d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d1e:	3b30      	subs	r3, #48	; 0x30
 8005d20:	2b09      	cmp	r3, #9
 8005d22:	d94e      	bls.n	8005dc2 <_svfiprintf_r+0x17e>
 8005d24:	b1b0      	cbz	r0, 8005d54 <_svfiprintf_r+0x110>
 8005d26:	9207      	str	r2, [sp, #28]
 8005d28:	e014      	b.n	8005d54 <_svfiprintf_r+0x110>
 8005d2a:	eba0 0308 	sub.w	r3, r0, r8
 8005d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005d32:	4313      	orrs	r3, r2
 8005d34:	9304      	str	r3, [sp, #16]
 8005d36:	46a2      	mov	sl, r4
 8005d38:	e7d2      	b.n	8005ce0 <_svfiprintf_r+0x9c>
 8005d3a:	9b03      	ldr	r3, [sp, #12]
 8005d3c:	1d19      	adds	r1, r3, #4
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	9103      	str	r1, [sp, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bfbb      	ittet	lt
 8005d46:	425b      	neglt	r3, r3
 8005d48:	f042 0202 	orrlt.w	r2, r2, #2
 8005d4c:	9307      	strge	r3, [sp, #28]
 8005d4e:	9307      	strlt	r3, [sp, #28]
 8005d50:	bfb8      	it	lt
 8005d52:	9204      	strlt	r2, [sp, #16]
 8005d54:	7823      	ldrb	r3, [r4, #0]
 8005d56:	2b2e      	cmp	r3, #46	; 0x2e
 8005d58:	d10c      	bne.n	8005d74 <_svfiprintf_r+0x130>
 8005d5a:	7863      	ldrb	r3, [r4, #1]
 8005d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d5e:	d135      	bne.n	8005dcc <_svfiprintf_r+0x188>
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	9203      	str	r2, [sp, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bfb8      	it	lt
 8005d6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d70:	3402      	adds	r4, #2
 8005d72:	9305      	str	r3, [sp, #20]
 8005d74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e40 <_svfiprintf_r+0x1fc>
 8005d78:	7821      	ldrb	r1, [r4, #0]
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	f7fa f9ff 	bl	8000180 <memchr>
 8005d82:	b140      	cbz	r0, 8005d96 <_svfiprintf_r+0x152>
 8005d84:	2340      	movs	r3, #64	; 0x40
 8005d86:	eba0 000a 	sub.w	r0, r0, sl
 8005d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	4303      	orrs	r3, r0
 8005d92:	3401      	adds	r4, #1
 8005d94:	9304      	str	r3, [sp, #16]
 8005d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9a:	4826      	ldr	r0, [pc, #152]	; (8005e34 <_svfiprintf_r+0x1f0>)
 8005d9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005da0:	2206      	movs	r2, #6
 8005da2:	f7fa f9ed 	bl	8000180 <memchr>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d038      	beq.n	8005e1c <_svfiprintf_r+0x1d8>
 8005daa:	4b23      	ldr	r3, [pc, #140]	; (8005e38 <_svfiprintf_r+0x1f4>)
 8005dac:	bb1b      	cbnz	r3, 8005df6 <_svfiprintf_r+0x1b2>
 8005dae:	9b03      	ldr	r3, [sp, #12]
 8005db0:	3307      	adds	r3, #7
 8005db2:	f023 0307 	bic.w	r3, r3, #7
 8005db6:	3308      	adds	r3, #8
 8005db8:	9303      	str	r3, [sp, #12]
 8005dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dbc:	4433      	add	r3, r6
 8005dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc0:	e767      	b.n	8005c92 <_svfiprintf_r+0x4e>
 8005dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	2001      	movs	r0, #1
 8005dca:	e7a5      	b.n	8005d18 <_svfiprintf_r+0xd4>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	3401      	adds	r4, #1
 8005dd0:	9305      	str	r3, [sp, #20]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	f04f 0c0a 	mov.w	ip, #10
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dde:	3a30      	subs	r2, #48	; 0x30
 8005de0:	2a09      	cmp	r2, #9
 8005de2:	d903      	bls.n	8005dec <_svfiprintf_r+0x1a8>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0c5      	beq.n	8005d74 <_svfiprintf_r+0x130>
 8005de8:	9105      	str	r1, [sp, #20]
 8005dea:	e7c3      	b.n	8005d74 <_svfiprintf_r+0x130>
 8005dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8005df0:	4604      	mov	r4, r0
 8005df2:	2301      	movs	r3, #1
 8005df4:	e7f0      	b.n	8005dd8 <_svfiprintf_r+0x194>
 8005df6:	ab03      	add	r3, sp, #12
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <_svfiprintf_r+0x1f8>)
 8005dfe:	a904      	add	r1, sp, #16
 8005e00:	4638      	mov	r0, r7
 8005e02:	f3af 8000 	nop.w
 8005e06:	1c42      	adds	r2, r0, #1
 8005e08:	4606      	mov	r6, r0
 8005e0a:	d1d6      	bne.n	8005dba <_svfiprintf_r+0x176>
 8005e0c:	89ab      	ldrh	r3, [r5, #12]
 8005e0e:	065b      	lsls	r3, r3, #25
 8005e10:	f53f af2c 	bmi.w	8005c6c <_svfiprintf_r+0x28>
 8005e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e16:	b01d      	add	sp, #116	; 0x74
 8005e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1c:	ab03      	add	r3, sp, #12
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	462a      	mov	r2, r5
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <_svfiprintf_r+0x1f8>)
 8005e24:	a904      	add	r1, sp, #16
 8005e26:	4638      	mov	r0, r7
 8005e28:	f000 f87a 	bl	8005f20 <_printf_i>
 8005e2c:	e7eb      	b.n	8005e06 <_svfiprintf_r+0x1c2>
 8005e2e:	bf00      	nop
 8005e30:	08006b4c 	.word	0x08006b4c
 8005e34:	08006b56 	.word	0x08006b56
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	08005b8d 	.word	0x08005b8d
 8005e40:	08006b52 	.word	0x08006b52

08005e44 <_printf_common>:
 8005e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	4616      	mov	r6, r2
 8005e4a:	4699      	mov	r9, r3
 8005e4c:	688a      	ldr	r2, [r1, #8]
 8005e4e:	690b      	ldr	r3, [r1, #16]
 8005e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e54:	4293      	cmp	r3, r2
 8005e56:	bfb8      	it	lt
 8005e58:	4613      	movlt	r3, r2
 8005e5a:	6033      	str	r3, [r6, #0]
 8005e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e60:	4607      	mov	r7, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	b10a      	cbz	r2, 8005e6a <_printf_common+0x26>
 8005e66:	3301      	adds	r3, #1
 8005e68:	6033      	str	r3, [r6, #0]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	0699      	lsls	r1, r3, #26
 8005e6e:	bf42      	ittt	mi
 8005e70:	6833      	ldrmi	r3, [r6, #0]
 8005e72:	3302      	addmi	r3, #2
 8005e74:	6033      	strmi	r3, [r6, #0]
 8005e76:	6825      	ldr	r5, [r4, #0]
 8005e78:	f015 0506 	ands.w	r5, r5, #6
 8005e7c:	d106      	bne.n	8005e8c <_printf_common+0x48>
 8005e7e:	f104 0a19 	add.w	sl, r4, #25
 8005e82:	68e3      	ldr	r3, [r4, #12]
 8005e84:	6832      	ldr	r2, [r6, #0]
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	42ab      	cmp	r3, r5
 8005e8a:	dc26      	bgt.n	8005eda <_printf_common+0x96>
 8005e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e90:	1e13      	subs	r3, r2, #0
 8005e92:	6822      	ldr	r2, [r4, #0]
 8005e94:	bf18      	it	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	0692      	lsls	r2, r2, #26
 8005e9a:	d42b      	bmi.n	8005ef4 <_printf_common+0xb0>
 8005e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	47c0      	blx	r8
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d01e      	beq.n	8005ee8 <_printf_common+0xa4>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	68e5      	ldr	r5, [r4, #12]
 8005eae:	6832      	ldr	r2, [r6, #0]
 8005eb0:	f003 0306 	and.w	r3, r3, #6
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	bf08      	it	eq
 8005eb8:	1aad      	subeq	r5, r5, r2
 8005eba:	68a3      	ldr	r3, [r4, #8]
 8005ebc:	6922      	ldr	r2, [r4, #16]
 8005ebe:	bf0c      	ite	eq
 8005ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ec4:	2500      	movne	r5, #0
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	bfc4      	itt	gt
 8005eca:	1a9b      	subgt	r3, r3, r2
 8005ecc:	18ed      	addgt	r5, r5, r3
 8005ece:	2600      	movs	r6, #0
 8005ed0:	341a      	adds	r4, #26
 8005ed2:	42b5      	cmp	r5, r6
 8005ed4:	d11a      	bne.n	8005f0c <_printf_common+0xc8>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	e008      	b.n	8005eec <_printf_common+0xa8>
 8005eda:	2301      	movs	r3, #1
 8005edc:	4652      	mov	r2, sl
 8005ede:	4649      	mov	r1, r9
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	47c0      	blx	r8
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d103      	bne.n	8005ef0 <_printf_common+0xac>
 8005ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	e7c6      	b.n	8005e82 <_printf_common+0x3e>
 8005ef4:	18e1      	adds	r1, r4, r3
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	2030      	movs	r0, #48	; 0x30
 8005efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005efe:	4422      	add	r2, r4
 8005f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f08:	3302      	adds	r3, #2
 8005f0a:	e7c7      	b.n	8005e9c <_printf_common+0x58>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4622      	mov	r2, r4
 8005f10:	4649      	mov	r1, r9
 8005f12:	4638      	mov	r0, r7
 8005f14:	47c0      	blx	r8
 8005f16:	3001      	adds	r0, #1
 8005f18:	d0e6      	beq.n	8005ee8 <_printf_common+0xa4>
 8005f1a:	3601      	adds	r6, #1
 8005f1c:	e7d9      	b.n	8005ed2 <_printf_common+0x8e>
	...

08005f20 <_printf_i>:
 8005f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f24:	460c      	mov	r4, r1
 8005f26:	4691      	mov	r9, r2
 8005f28:	7e27      	ldrb	r7, [r4, #24]
 8005f2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f2c:	2f78      	cmp	r7, #120	; 0x78
 8005f2e:	4680      	mov	r8, r0
 8005f30:	469a      	mov	sl, r3
 8005f32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f36:	d807      	bhi.n	8005f48 <_printf_i+0x28>
 8005f38:	2f62      	cmp	r7, #98	; 0x62
 8005f3a:	d80a      	bhi.n	8005f52 <_printf_i+0x32>
 8005f3c:	2f00      	cmp	r7, #0
 8005f3e:	f000 80d8 	beq.w	80060f2 <_printf_i+0x1d2>
 8005f42:	2f58      	cmp	r7, #88	; 0x58
 8005f44:	f000 80a3 	beq.w	800608e <_printf_i+0x16e>
 8005f48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f50:	e03a      	b.n	8005fc8 <_printf_i+0xa8>
 8005f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f56:	2b15      	cmp	r3, #21
 8005f58:	d8f6      	bhi.n	8005f48 <_printf_i+0x28>
 8005f5a:	a001      	add	r0, pc, #4	; (adr r0, 8005f60 <_printf_i+0x40>)
 8005f5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f60:	08005fb9 	.word	0x08005fb9
 8005f64:	08005fcd 	.word	0x08005fcd
 8005f68:	08005f49 	.word	0x08005f49
 8005f6c:	08005f49 	.word	0x08005f49
 8005f70:	08005f49 	.word	0x08005f49
 8005f74:	08005f49 	.word	0x08005f49
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005f49 	.word	0x08005f49
 8005f80:	08005f49 	.word	0x08005f49
 8005f84:	08005f49 	.word	0x08005f49
 8005f88:	08005f49 	.word	0x08005f49
 8005f8c:	080060d9 	.word	0x080060d9
 8005f90:	08005ffd 	.word	0x08005ffd
 8005f94:	080060bb 	.word	0x080060bb
 8005f98:	08005f49 	.word	0x08005f49
 8005f9c:	08005f49 	.word	0x08005f49
 8005fa0:	080060fb 	.word	0x080060fb
 8005fa4:	08005f49 	.word	0x08005f49
 8005fa8:	08005ffd 	.word	0x08005ffd
 8005fac:	08005f49 	.word	0x08005f49
 8005fb0:	08005f49 	.word	0x08005f49
 8005fb4:	080060c3 	.word	0x080060c3
 8005fb8:	680b      	ldr	r3, [r1, #0]
 8005fba:	1d1a      	adds	r2, r3, #4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	600a      	str	r2, [r1, #0]
 8005fc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0a3      	b.n	8006114 <_printf_i+0x1f4>
 8005fcc:	6825      	ldr	r5, [r4, #0]
 8005fce:	6808      	ldr	r0, [r1, #0]
 8005fd0:	062e      	lsls	r6, r5, #24
 8005fd2:	f100 0304 	add.w	r3, r0, #4
 8005fd6:	d50a      	bpl.n	8005fee <_printf_i+0xce>
 8005fd8:	6805      	ldr	r5, [r0, #0]
 8005fda:	600b      	str	r3, [r1, #0]
 8005fdc:	2d00      	cmp	r5, #0
 8005fde:	da03      	bge.n	8005fe8 <_printf_i+0xc8>
 8005fe0:	232d      	movs	r3, #45	; 0x2d
 8005fe2:	426d      	negs	r5, r5
 8005fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe8:	485e      	ldr	r0, [pc, #376]	; (8006164 <_printf_i+0x244>)
 8005fea:	230a      	movs	r3, #10
 8005fec:	e019      	b.n	8006022 <_printf_i+0x102>
 8005fee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ff2:	6805      	ldr	r5, [r0, #0]
 8005ff4:	600b      	str	r3, [r1, #0]
 8005ff6:	bf18      	it	ne
 8005ff8:	b22d      	sxthne	r5, r5
 8005ffa:	e7ef      	b.n	8005fdc <_printf_i+0xbc>
 8005ffc:	680b      	ldr	r3, [r1, #0]
 8005ffe:	6825      	ldr	r5, [r4, #0]
 8006000:	1d18      	adds	r0, r3, #4
 8006002:	6008      	str	r0, [r1, #0]
 8006004:	0628      	lsls	r0, r5, #24
 8006006:	d501      	bpl.n	800600c <_printf_i+0xec>
 8006008:	681d      	ldr	r5, [r3, #0]
 800600a:	e002      	b.n	8006012 <_printf_i+0xf2>
 800600c:	0669      	lsls	r1, r5, #25
 800600e:	d5fb      	bpl.n	8006008 <_printf_i+0xe8>
 8006010:	881d      	ldrh	r5, [r3, #0]
 8006012:	4854      	ldr	r0, [pc, #336]	; (8006164 <_printf_i+0x244>)
 8006014:	2f6f      	cmp	r7, #111	; 0x6f
 8006016:	bf0c      	ite	eq
 8006018:	2308      	moveq	r3, #8
 800601a:	230a      	movne	r3, #10
 800601c:	2100      	movs	r1, #0
 800601e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006022:	6866      	ldr	r6, [r4, #4]
 8006024:	60a6      	str	r6, [r4, #8]
 8006026:	2e00      	cmp	r6, #0
 8006028:	bfa2      	ittt	ge
 800602a:	6821      	ldrge	r1, [r4, #0]
 800602c:	f021 0104 	bicge.w	r1, r1, #4
 8006030:	6021      	strge	r1, [r4, #0]
 8006032:	b90d      	cbnz	r5, 8006038 <_printf_i+0x118>
 8006034:	2e00      	cmp	r6, #0
 8006036:	d04d      	beq.n	80060d4 <_printf_i+0x1b4>
 8006038:	4616      	mov	r6, r2
 800603a:	fbb5 f1f3 	udiv	r1, r5, r3
 800603e:	fb03 5711 	mls	r7, r3, r1, r5
 8006042:	5dc7      	ldrb	r7, [r0, r7]
 8006044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006048:	462f      	mov	r7, r5
 800604a:	42bb      	cmp	r3, r7
 800604c:	460d      	mov	r5, r1
 800604e:	d9f4      	bls.n	800603a <_printf_i+0x11a>
 8006050:	2b08      	cmp	r3, #8
 8006052:	d10b      	bne.n	800606c <_printf_i+0x14c>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	07df      	lsls	r7, r3, #31
 8006058:	d508      	bpl.n	800606c <_printf_i+0x14c>
 800605a:	6923      	ldr	r3, [r4, #16]
 800605c:	6861      	ldr	r1, [r4, #4]
 800605e:	4299      	cmp	r1, r3
 8006060:	bfde      	ittt	le
 8006062:	2330      	movle	r3, #48	; 0x30
 8006064:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800606c:	1b92      	subs	r2, r2, r6
 800606e:	6122      	str	r2, [r4, #16]
 8006070:	f8cd a000 	str.w	sl, [sp]
 8006074:	464b      	mov	r3, r9
 8006076:	aa03      	add	r2, sp, #12
 8006078:	4621      	mov	r1, r4
 800607a:	4640      	mov	r0, r8
 800607c:	f7ff fee2 	bl	8005e44 <_printf_common>
 8006080:	3001      	adds	r0, #1
 8006082:	d14c      	bne.n	800611e <_printf_i+0x1fe>
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	b004      	add	sp, #16
 800608a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608e:	4835      	ldr	r0, [pc, #212]	; (8006164 <_printf_i+0x244>)
 8006090:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	680e      	ldr	r6, [r1, #0]
 8006098:	061f      	lsls	r7, r3, #24
 800609a:	f856 5b04 	ldr.w	r5, [r6], #4
 800609e:	600e      	str	r6, [r1, #0]
 80060a0:	d514      	bpl.n	80060cc <_printf_i+0x1ac>
 80060a2:	07d9      	lsls	r1, r3, #31
 80060a4:	bf44      	itt	mi
 80060a6:	f043 0320 	orrmi.w	r3, r3, #32
 80060aa:	6023      	strmi	r3, [r4, #0]
 80060ac:	b91d      	cbnz	r5, 80060b6 <_printf_i+0x196>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	f023 0320 	bic.w	r3, r3, #32
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	2310      	movs	r3, #16
 80060b8:	e7b0      	b.n	800601c <_printf_i+0xfc>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	f043 0320 	orr.w	r3, r3, #32
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	2378      	movs	r3, #120	; 0x78
 80060c4:	4828      	ldr	r0, [pc, #160]	; (8006168 <_printf_i+0x248>)
 80060c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060ca:	e7e3      	b.n	8006094 <_printf_i+0x174>
 80060cc:	065e      	lsls	r6, r3, #25
 80060ce:	bf48      	it	mi
 80060d0:	b2ad      	uxthmi	r5, r5
 80060d2:	e7e6      	b.n	80060a2 <_printf_i+0x182>
 80060d4:	4616      	mov	r6, r2
 80060d6:	e7bb      	b.n	8006050 <_printf_i+0x130>
 80060d8:	680b      	ldr	r3, [r1, #0]
 80060da:	6826      	ldr	r6, [r4, #0]
 80060dc:	6960      	ldr	r0, [r4, #20]
 80060de:	1d1d      	adds	r5, r3, #4
 80060e0:	600d      	str	r5, [r1, #0]
 80060e2:	0635      	lsls	r5, r6, #24
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	d501      	bpl.n	80060ec <_printf_i+0x1cc>
 80060e8:	6018      	str	r0, [r3, #0]
 80060ea:	e002      	b.n	80060f2 <_printf_i+0x1d2>
 80060ec:	0671      	lsls	r1, r6, #25
 80060ee:	d5fb      	bpl.n	80060e8 <_printf_i+0x1c8>
 80060f0:	8018      	strh	r0, [r3, #0]
 80060f2:	2300      	movs	r3, #0
 80060f4:	6123      	str	r3, [r4, #16]
 80060f6:	4616      	mov	r6, r2
 80060f8:	e7ba      	b.n	8006070 <_printf_i+0x150>
 80060fa:	680b      	ldr	r3, [r1, #0]
 80060fc:	1d1a      	adds	r2, r3, #4
 80060fe:	600a      	str	r2, [r1, #0]
 8006100:	681e      	ldr	r6, [r3, #0]
 8006102:	6862      	ldr	r2, [r4, #4]
 8006104:	2100      	movs	r1, #0
 8006106:	4630      	mov	r0, r6
 8006108:	f7fa f83a 	bl	8000180 <memchr>
 800610c:	b108      	cbz	r0, 8006112 <_printf_i+0x1f2>
 800610e:	1b80      	subs	r0, r0, r6
 8006110:	6060      	str	r0, [r4, #4]
 8006112:	6863      	ldr	r3, [r4, #4]
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	2300      	movs	r3, #0
 8006118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800611c:	e7a8      	b.n	8006070 <_printf_i+0x150>
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	4632      	mov	r2, r6
 8006122:	4649      	mov	r1, r9
 8006124:	4640      	mov	r0, r8
 8006126:	47d0      	blx	sl
 8006128:	3001      	adds	r0, #1
 800612a:	d0ab      	beq.n	8006084 <_printf_i+0x164>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	079b      	lsls	r3, r3, #30
 8006130:	d413      	bmi.n	800615a <_printf_i+0x23a>
 8006132:	68e0      	ldr	r0, [r4, #12]
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	4298      	cmp	r0, r3
 8006138:	bfb8      	it	lt
 800613a:	4618      	movlt	r0, r3
 800613c:	e7a4      	b.n	8006088 <_printf_i+0x168>
 800613e:	2301      	movs	r3, #1
 8006140:	4632      	mov	r2, r6
 8006142:	4649      	mov	r1, r9
 8006144:	4640      	mov	r0, r8
 8006146:	47d0      	blx	sl
 8006148:	3001      	adds	r0, #1
 800614a:	d09b      	beq.n	8006084 <_printf_i+0x164>
 800614c:	3501      	adds	r5, #1
 800614e:	68e3      	ldr	r3, [r4, #12]
 8006150:	9903      	ldr	r1, [sp, #12]
 8006152:	1a5b      	subs	r3, r3, r1
 8006154:	42ab      	cmp	r3, r5
 8006156:	dcf2      	bgt.n	800613e <_printf_i+0x21e>
 8006158:	e7eb      	b.n	8006132 <_printf_i+0x212>
 800615a:	2500      	movs	r5, #0
 800615c:	f104 0619 	add.w	r6, r4, #25
 8006160:	e7f5      	b.n	800614e <_printf_i+0x22e>
 8006162:	bf00      	nop
 8006164:	08006b5d 	.word	0x08006b5d
 8006168:	08006b6e 	.word	0x08006b6e

0800616c <_free_r>:
 800616c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800616e:	2900      	cmp	r1, #0
 8006170:	d048      	beq.n	8006204 <_free_r+0x98>
 8006172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006176:	9001      	str	r0, [sp, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f1a1 0404 	sub.w	r4, r1, #4
 800617e:	bfb8      	it	lt
 8006180:	18e4      	addlt	r4, r4, r3
 8006182:	f000 f8d3 	bl	800632c <__malloc_lock>
 8006186:	4a20      	ldr	r2, [pc, #128]	; (8006208 <_free_r+0x9c>)
 8006188:	9801      	ldr	r0, [sp, #4]
 800618a:	6813      	ldr	r3, [r2, #0]
 800618c:	4615      	mov	r5, r2
 800618e:	b933      	cbnz	r3, 800619e <_free_r+0x32>
 8006190:	6063      	str	r3, [r4, #4]
 8006192:	6014      	str	r4, [r2, #0]
 8006194:	b003      	add	sp, #12
 8006196:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800619a:	f000 b8cd 	b.w	8006338 <__malloc_unlock>
 800619e:	42a3      	cmp	r3, r4
 80061a0:	d90b      	bls.n	80061ba <_free_r+0x4e>
 80061a2:	6821      	ldr	r1, [r4, #0]
 80061a4:	1862      	adds	r2, r4, r1
 80061a6:	4293      	cmp	r3, r2
 80061a8:	bf04      	itt	eq
 80061aa:	681a      	ldreq	r2, [r3, #0]
 80061ac:	685b      	ldreq	r3, [r3, #4]
 80061ae:	6063      	str	r3, [r4, #4]
 80061b0:	bf04      	itt	eq
 80061b2:	1852      	addeq	r2, r2, r1
 80061b4:	6022      	streq	r2, [r4, #0]
 80061b6:	602c      	str	r4, [r5, #0]
 80061b8:	e7ec      	b.n	8006194 <_free_r+0x28>
 80061ba:	461a      	mov	r2, r3
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	b10b      	cbz	r3, 80061c4 <_free_r+0x58>
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	d9fa      	bls.n	80061ba <_free_r+0x4e>
 80061c4:	6811      	ldr	r1, [r2, #0]
 80061c6:	1855      	adds	r5, r2, r1
 80061c8:	42a5      	cmp	r5, r4
 80061ca:	d10b      	bne.n	80061e4 <_free_r+0x78>
 80061cc:	6824      	ldr	r4, [r4, #0]
 80061ce:	4421      	add	r1, r4
 80061d0:	1854      	adds	r4, r2, r1
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	6011      	str	r1, [r2, #0]
 80061d6:	d1dd      	bne.n	8006194 <_free_r+0x28>
 80061d8:	681c      	ldr	r4, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	6053      	str	r3, [r2, #4]
 80061de:	4421      	add	r1, r4
 80061e0:	6011      	str	r1, [r2, #0]
 80061e2:	e7d7      	b.n	8006194 <_free_r+0x28>
 80061e4:	d902      	bls.n	80061ec <_free_r+0x80>
 80061e6:	230c      	movs	r3, #12
 80061e8:	6003      	str	r3, [r0, #0]
 80061ea:	e7d3      	b.n	8006194 <_free_r+0x28>
 80061ec:	6825      	ldr	r5, [r4, #0]
 80061ee:	1961      	adds	r1, r4, r5
 80061f0:	428b      	cmp	r3, r1
 80061f2:	bf04      	itt	eq
 80061f4:	6819      	ldreq	r1, [r3, #0]
 80061f6:	685b      	ldreq	r3, [r3, #4]
 80061f8:	6063      	str	r3, [r4, #4]
 80061fa:	bf04      	itt	eq
 80061fc:	1949      	addeq	r1, r1, r5
 80061fe:	6021      	streq	r1, [r4, #0]
 8006200:	6054      	str	r4, [r2, #4]
 8006202:	e7c7      	b.n	8006194 <_free_r+0x28>
 8006204:	b003      	add	sp, #12
 8006206:	bd30      	pop	{r4, r5, pc}
 8006208:	200004a8 	.word	0x200004a8

0800620c <_malloc_r>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	1ccd      	adds	r5, r1, #3
 8006210:	f025 0503 	bic.w	r5, r5, #3
 8006214:	3508      	adds	r5, #8
 8006216:	2d0c      	cmp	r5, #12
 8006218:	bf38      	it	cc
 800621a:	250c      	movcc	r5, #12
 800621c:	2d00      	cmp	r5, #0
 800621e:	4606      	mov	r6, r0
 8006220:	db01      	blt.n	8006226 <_malloc_r+0x1a>
 8006222:	42a9      	cmp	r1, r5
 8006224:	d903      	bls.n	800622e <_malloc_r+0x22>
 8006226:	230c      	movs	r3, #12
 8006228:	6033      	str	r3, [r6, #0]
 800622a:	2000      	movs	r0, #0
 800622c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800622e:	f000 f87d 	bl	800632c <__malloc_lock>
 8006232:	4921      	ldr	r1, [pc, #132]	; (80062b8 <_malloc_r+0xac>)
 8006234:	680a      	ldr	r2, [r1, #0]
 8006236:	4614      	mov	r4, r2
 8006238:	b99c      	cbnz	r4, 8006262 <_malloc_r+0x56>
 800623a:	4f20      	ldr	r7, [pc, #128]	; (80062bc <_malloc_r+0xb0>)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	b923      	cbnz	r3, 800624a <_malloc_r+0x3e>
 8006240:	4621      	mov	r1, r4
 8006242:	4630      	mov	r0, r6
 8006244:	f000 f862 	bl	800630c <_sbrk_r>
 8006248:	6038      	str	r0, [r7, #0]
 800624a:	4629      	mov	r1, r5
 800624c:	4630      	mov	r0, r6
 800624e:	f000 f85d 	bl	800630c <_sbrk_r>
 8006252:	1c43      	adds	r3, r0, #1
 8006254:	d123      	bne.n	800629e <_malloc_r+0x92>
 8006256:	230c      	movs	r3, #12
 8006258:	6033      	str	r3, [r6, #0]
 800625a:	4630      	mov	r0, r6
 800625c:	f000 f86c 	bl	8006338 <__malloc_unlock>
 8006260:	e7e3      	b.n	800622a <_malloc_r+0x1e>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	1b5b      	subs	r3, r3, r5
 8006266:	d417      	bmi.n	8006298 <_malloc_r+0x8c>
 8006268:	2b0b      	cmp	r3, #11
 800626a:	d903      	bls.n	8006274 <_malloc_r+0x68>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	441c      	add	r4, r3
 8006270:	6025      	str	r5, [r4, #0]
 8006272:	e004      	b.n	800627e <_malloc_r+0x72>
 8006274:	6863      	ldr	r3, [r4, #4]
 8006276:	42a2      	cmp	r2, r4
 8006278:	bf0c      	ite	eq
 800627a:	600b      	streq	r3, [r1, #0]
 800627c:	6053      	strne	r3, [r2, #4]
 800627e:	4630      	mov	r0, r6
 8006280:	f000 f85a 	bl	8006338 <__malloc_unlock>
 8006284:	f104 000b 	add.w	r0, r4, #11
 8006288:	1d23      	adds	r3, r4, #4
 800628a:	f020 0007 	bic.w	r0, r0, #7
 800628e:	1ac2      	subs	r2, r0, r3
 8006290:	d0cc      	beq.n	800622c <_malloc_r+0x20>
 8006292:	1a1b      	subs	r3, r3, r0
 8006294:	50a3      	str	r3, [r4, r2]
 8006296:	e7c9      	b.n	800622c <_malloc_r+0x20>
 8006298:	4622      	mov	r2, r4
 800629a:	6864      	ldr	r4, [r4, #4]
 800629c:	e7cc      	b.n	8006238 <_malloc_r+0x2c>
 800629e:	1cc4      	adds	r4, r0, #3
 80062a0:	f024 0403 	bic.w	r4, r4, #3
 80062a4:	42a0      	cmp	r0, r4
 80062a6:	d0e3      	beq.n	8006270 <_malloc_r+0x64>
 80062a8:	1a21      	subs	r1, r4, r0
 80062aa:	4630      	mov	r0, r6
 80062ac:	f000 f82e 	bl	800630c <_sbrk_r>
 80062b0:	3001      	adds	r0, #1
 80062b2:	d1dd      	bne.n	8006270 <_malloc_r+0x64>
 80062b4:	e7cf      	b.n	8006256 <_malloc_r+0x4a>
 80062b6:	bf00      	nop
 80062b8:	200004a8 	.word	0x200004a8
 80062bc:	200004ac 	.word	0x200004ac

080062c0 <_realloc_r>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	4607      	mov	r7, r0
 80062c4:	4614      	mov	r4, r2
 80062c6:	460e      	mov	r6, r1
 80062c8:	b921      	cbnz	r1, 80062d4 <_realloc_r+0x14>
 80062ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062ce:	4611      	mov	r1, r2
 80062d0:	f7ff bf9c 	b.w	800620c <_malloc_r>
 80062d4:	b922      	cbnz	r2, 80062e0 <_realloc_r+0x20>
 80062d6:	f7ff ff49 	bl	800616c <_free_r>
 80062da:	4625      	mov	r5, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e0:	f000 f830 	bl	8006344 <_malloc_usable_size_r>
 80062e4:	42a0      	cmp	r0, r4
 80062e6:	d20f      	bcs.n	8006308 <_realloc_r+0x48>
 80062e8:	4621      	mov	r1, r4
 80062ea:	4638      	mov	r0, r7
 80062ec:	f7ff ff8e 	bl	800620c <_malloc_r>
 80062f0:	4605      	mov	r5, r0
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d0f2      	beq.n	80062dc <_realloc_r+0x1c>
 80062f6:	4631      	mov	r1, r6
 80062f8:	4622      	mov	r2, r4
 80062fa:	f7ff fbf7 	bl	8005aec <memcpy>
 80062fe:	4631      	mov	r1, r6
 8006300:	4638      	mov	r0, r7
 8006302:	f7ff ff33 	bl	800616c <_free_r>
 8006306:	e7e9      	b.n	80062dc <_realloc_r+0x1c>
 8006308:	4635      	mov	r5, r6
 800630a:	e7e7      	b.n	80062dc <_realloc_r+0x1c>

0800630c <_sbrk_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4d06      	ldr	r5, [pc, #24]	; (8006328 <_sbrk_r+0x1c>)
 8006310:	2300      	movs	r3, #0
 8006312:	4604      	mov	r4, r0
 8006314:	4608      	mov	r0, r1
 8006316:	602b      	str	r3, [r5, #0]
 8006318:	f7fb fad8 	bl	80018cc <_sbrk>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d102      	bne.n	8006326 <_sbrk_r+0x1a>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	b103      	cbz	r3, 8006326 <_sbrk_r+0x1a>
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	20000908 	.word	0x20000908

0800632c <__malloc_lock>:
 800632c:	4801      	ldr	r0, [pc, #4]	; (8006334 <__malloc_lock+0x8>)
 800632e:	f000 b811 	b.w	8006354 <__retarget_lock_acquire_recursive>
 8006332:	bf00      	nop
 8006334:	20000910 	.word	0x20000910

08006338 <__malloc_unlock>:
 8006338:	4801      	ldr	r0, [pc, #4]	; (8006340 <__malloc_unlock+0x8>)
 800633a:	f000 b80c 	b.w	8006356 <__retarget_lock_release_recursive>
 800633e:	bf00      	nop
 8006340:	20000910 	.word	0x20000910

08006344 <_malloc_usable_size_r>:
 8006344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006348:	1f18      	subs	r0, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	bfbc      	itt	lt
 800634e:	580b      	ldrlt	r3, [r1, r0]
 8006350:	18c0      	addlt	r0, r0, r3
 8006352:	4770      	bx	lr

08006354 <__retarget_lock_acquire_recursive>:
 8006354:	4770      	bx	lr

08006356 <__retarget_lock_release_recursive>:
 8006356:	4770      	bx	lr

08006358 <_init>:
 8006358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635a:	bf00      	nop
 800635c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635e:	bc08      	pop	{r3}
 8006360:	469e      	mov	lr, r3
 8006362:	4770      	bx	lr

08006364 <_fini>:
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006366:	bf00      	nop
 8006368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636a:	bc08      	pop	{r3}
 800636c:	469e      	mov	lr, r3
 800636e:	4770      	bx	lr
