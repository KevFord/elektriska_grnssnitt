
el_grns_lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e88  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005134  08005134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  0800513c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000464  20000010  08005148  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000474  08005148  00020474  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d12c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033b7  00000000  00000000  0003d16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d40  00000000  00000000  00040528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c08  00000000  00000000  00042268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023d18  00000000  00000000  00043e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001abb2  00000000  00000000  00067b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e5914  00000000  00000000  0008273a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0016804e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d38  00000000  00000000  001680a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08004fac 	.word	0x08004fac

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08004fac 	.word	0x08004fac

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <TextLCD_Strobe>:
  {
  }
}

void TextLCD_Strobe(TextLCDType *lcd) // anropas för att kunnna sktriva till LCD
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af02      	add	r7, sp, #8
 800047a:	6078      	str	r0, [r7, #4]
	// Set bit 2 which corresponds to E (strobe) and send data
	lcd->data |= 0x04;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	b2da      	uxtb	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6818      	ldr	r0, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	b299      	uxth	r1, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	1d5a      	adds	r2, r3, #5
 8000498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	2301      	movs	r3, #1
 80004a0:	f001 fa40 	bl	8001924 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 ff1d 	bl	80012e4 <HAL_Delay>
	// Clear bit 2 which corresponds to E (strobe) and send data
	lcd->data &= 0xFB;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	795b      	ldrb	r3, [r3, #5]
 80004ae:	f023 0304 	bic.w	r3, r3, #4
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	b299      	uxth	r1, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	1d5a      	adds	r2, r3, #5
 80004c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2301      	movs	r3, #1
 80004ce:	f001 fa29 	bl	8001924 <HAL_I2C_Master_Transmit>
//	min_Delay(40);
	HAL_Delay(1);
 80004d2:	2001      	movs	r0, #1
 80004d4:	f000 ff06 	bl	80012e4 <HAL_Delay>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <TextLCD_Cmd>:

void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd) // skickar cmd till LCD, anrop: TextLCD_Cmd(&lcd, 0x02); där 02 är kommandot
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]
	// for command RS is set to 0
	lcd->data = (lcd->data & 0x0C) | (cmd & 0xF0);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	f003 030c 	and.w	r3, r3, #12
 80004f6:	b25a      	sxtb	r2, r3
 80004f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80004fc:	f023 030f 	bic.w	r3, r3, #15
 8000500:	b25b      	sxtb	r3, r3
 8000502:	4313      	orrs	r3, r2
 8000504:	b25b      	sxtb	r3, r3
 8000506:	b2da      	uxtb	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6818      	ldr	r0, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	b299      	uxth	r1, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	1d5a      	adds	r2, r3, #5
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2301      	movs	r3, #1
 8000522:	f001 f9ff 	bl	8001924 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ffa4 	bl	8000474 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0C) | (cmd << 4);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	795b      	ldrb	r3, [r3, #5]
 8000530:	b25b      	sxtb	r3, r3
 8000532:	f003 030c 	and.w	r3, r3, #12
 8000536:	b25a      	sxtb	r2, r3
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	b25b      	sxtb	r3, r3
 800053e:	4313      	orrs	r3, r2
 8000540:	b25b      	sxtb	r3, r3
 8000542:	b2da      	uxtb	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6818      	ldr	r0, [r3, #0]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	b299      	uxth	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	1d5a      	adds	r2, r3, #5
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2301      	movs	r3, #1
 800055e:	f001 f9e1 	bl	8001924 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f7ff ff86 	bl	8000474 <TextLCD_Strobe>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <TextLCD_Data>:

void TextLCD_Data(TextLCDType *lcd, uint8_t data) // anrop: TextLCD_Data(&lcd, 0x55); skickar komando 55 till LCD
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
	// for data RS is set to 1
	lcd->data = (lcd->data & 0x0D) | (data & 0xF0) | 0x01;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	b25b      	sxtb	r3, r3
 8000582:	f003 030d 	and.w	r3, r3, #13
 8000586:	b25a      	sxtb	r2, r3
 8000588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800058c:	f023 030f 	bic.w	r3, r3, #15
 8000590:	b25b      	sxtb	r3, r3
 8000592:	4313      	orrs	r3, r2
 8000594:	b25b      	sxtb	r3, r3
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	b25b      	sxtb	r3, r3
 800059c:	b2da      	uxtb	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6818      	ldr	r0, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	b299      	uxth	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	1d5a      	adds	r2, r3, #5
 80005b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	f001 f9b4 	bl	8001924 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ff59 	bl	8000474 <TextLCD_Strobe>
	lcd->data = (lcd->data & 0x0D) | (data << 4) | 0x01;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	795b      	ldrb	r3, [r3, #5]
 80005c6:	b25b      	sxtb	r3, r3
 80005c8:	f003 030d 	and.w	r3, r3, #13
 80005cc:	b25a      	sxtb	r2, r3
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	b299      	uxth	r1, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	1d5a      	adds	r2, r3, #5
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	f001 f993 	bl	8001924 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff ff38 	bl	8000474 <TextLCD_Strobe>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <TextLCD_Init>:

void TextLCD_Init(TextLCDType *lcd, I2C_HandleTypeDef *hi2c, uint8_t DevAddress)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af02      	add	r7, sp, #8
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	4613      	mov	r3, r2
 8000618:	71fb      	strb	r3, [r7, #7]
	lcd->hi2c = hi2c;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	68ba      	ldr	r2, [r7, #8]
 800061e:	601a      	str	r2, [r3, #0]
	lcd->DevAddress = DevAddress;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	711a      	strb	r2, [r3, #4]
	lcd->data = 0x38;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2238      	movs	r2, #56	; 0x38
 800062a:	715a      	strb	r2, [r3, #5]

	// Do init setting LCD controller into 4-bit mode

	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	b299      	uxth	r1, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	1d5a      	adds	r2, r3, #5
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2301      	movs	r3, #1
 8000642:	f001 f96f 	bl	8001924 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff ff14 	bl	8000474 <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	b299      	uxth	r1, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	1d5a      	adds	r2, r3, #5
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	f001 f95f 	bl	8001924 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f7ff ff04 	bl	8000474 <TextLCD_Strobe>
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	b299      	uxth	r1, r3
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	1d5a      	adds	r2, r3, #5
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2301      	movs	r3, #1
 8000682:	f001 f94f 	bl	8001924 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f7ff fef4 	bl	8000474 <TextLCD_Strobe>
	lcd->data = 0x28;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2228      	movs	r2, #40	; 0x28
 8000690:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->DevAddress, &lcd->data, 1, 1000);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	b299      	uxth	r1, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	1d5a      	adds	r2, r3, #5
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	f001 f93c 	bl	8001924 <HAL_I2C_Master_Transmit>
	TextLCD_Strobe(lcd);
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f7ff fee1 	bl	8000474 <TextLCD_Strobe>

	// Finished setting up 4-bit mode. Let's configure display

	TextLCD_Cmd(lcd, 0x28); //N=1 (2 line), F=0 (5x8)
 80006b2:	2128      	movs	r1, #40	; 0x28
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff ff13 	bl	80004e0 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x08); //Display off, Cursor Off, Blink off
 80006ba:	2108      	movs	r1, #8
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f7ff ff0f 	bl	80004e0 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x01); //Clear
 80006c2:	2101      	movs	r1, #1
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f7ff ff0b 	bl	80004e0 <TextLCD_Cmd>
	HAL_Delay(5);
 80006ca:	2005      	movs	r0, #5
 80006cc:	f000 fe0a 	bl	80012e4 <HAL_Delay>
	TextLCD_Cmd(lcd, 0x06); //ID=1(increment), S=0 (no shift)
 80006d0:	2106      	movs	r1, #6
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f7ff ff04 	bl	80004e0 <TextLCD_Cmd>
	TextLCD_Cmd(lcd, 0x0C); //Display on, Cursor Off, Blink off
 80006d8:	210c      	movs	r1, #12
 80006da:	68f8      	ldr	r0, [r7, #12]
 80006dc:	f7ff ff00 	bl	80004e0 <TextLCD_Cmd>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <TextLCD_Home>:

void TextLCD_Home(TextLCDType *lcd){ // skall flytta cursor till första positionen
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

	TextLCD_Cmd(lcd, 0x02); // 02 = home
 80006f0:	2102      	movs	r1, #2
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff fef4 	bl	80004e0 <TextLCD_Cmd>
//	TextLCD_Strobe(lcd); // läs in-pin
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <TextLCD_Position>:
	TextLCD_Cmd(lcd, 0x01); // skickar 01 till LCD, 01 = clear. Rensar en pixel?
//	TextLCD_Strobe(lcd); // anropar för att LCD skall uppdateras och läsa in-pinnen.
}

void TextLCD_Position(TextLCDType *lcd, int x, int y) // Stulen.
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
	uint8_t cmd_bit = 0x80;
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	75fb      	strb	r3, [r7, #23]
	uint8_t adr     = x + (0x40 * y);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	019b      	lsls	r3, r3, #6
 8000716:	b2da      	uxtb	r2, r3
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4413      	add	r3, r2
 800071e:	75bb      	strb	r3, [r7, #22]
	uint8_t cmd     = cmd_bit | adr;
 8000720:	7dfa      	ldrb	r2, [r7, #23]
 8000722:	7dbb      	ldrb	r3, [r7, #22]
 8000724:	4313      	orrs	r3, r2
 8000726:	757b      	strb	r3, [r7, #21]
	TextLCD_Cmd(lcd, cmd);
 8000728:	7d7b      	ldrb	r3, [r7, #21]
 800072a:	4619      	mov	r1, r3
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff fed7 	bl	80004e0 <TextLCD_Cmd>
}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <TextLCD_Putchar>:

void TextLCD_Putchar(TextLCDType *lcd, uint8_t data){ // anrop: TextLCD_Putchar(&lcd, 'K'); ref till lcd och vilken char.
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	460b      	mov	r3, r1
 8000744:	70fb      	strb	r3, [r7, #3]

	TextLCD_Data(lcd, data);// + data);
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	4619      	mov	r1, r3
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff10 	bl	8000570 <TextLCD_Data>
//	TextLCD_Strobe(lcd);
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <TextLCD_Puts>:

	TextLCD_Data(lcd, 0x30 + data);// + data);
//	TextLCD_Strobe(lcd);
}

void TextLCD_Puts(TextLCDType *lcd, char *string){ // anrop: liknande putchar, men en string "texttext" som andra argument.
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]

	for(int i = 0; string[i] != 0; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e00a      	b.n	800077e <TextLCD_Puts+0x26>
		TextLCD_Putchar(lcd, string[i]);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffe1 	bl	800073a <TextLCD_Putchar>
	for(int i = 0; string[i] != 0; i++)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1ee      	bne.n	8000768 <TextLCD_Puts+0x10>
//	TextLCD_Strobe(lcd);
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800079c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007a4:	f023 0218 	bic.w	r2, r3, #24
 80007a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e4:	68fb      	ldr	r3, [r7, #12]
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <checkLevel>:
	HAL_Delay(200); // 5 Hz

	TextLCD_Clear(&lcd); // Remove indicator.
}

void checkLevel(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

	MPU6050_WriteRegister(&mpu, SMPLRT_DIV, 1, 1);
 80007f8:	2301      	movs	r3, #1
 80007fa:	2201      	movs	r2, #1
 80007fc:	2119      	movs	r1, #25
 80007fe:	4826      	ldr	r0, [pc, #152]	; (8000898 <checkLevel+0xa4>)
 8000800:	f000 face 	bl	8000da0 <MPU6050_WriteRegister>

	MPU6050_ReadRegisters(&mpu, ACCEL_XOUT_H, 6);
 8000804:	2206      	movs	r2, #6
 8000806:	213b      	movs	r1, #59	; 0x3b
 8000808:	4823      	ldr	r0, [pc, #140]	; (8000898 <checkLevel+0xa4>)
 800080a:	f000 fb09 	bl	8000e20 <MPU6050_ReadRegisters>

	accelXValue = (0x0F & mpu.data[0] << 8) | mpu.data[1]; // Combine both registers into one value.
 800080e:	4b22      	ldr	r3, [pc, #136]	; (8000898 <checkLevel+0xa4>)
 8000810:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000814:	b21a      	sxth	r2, r3
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <checkLevel+0xa8>)
 8000818:	801a      	strh	r2, [r3, #0]
	accelYValue = (0x0F & mpu.data[2] << 8) | mpu.data[3]; // Combine both registers into one value.
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <checkLevel+0xa4>)
 800081c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000820:	b21a      	sxth	r2, r3
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <checkLevel+0xac>)
 8000824:	801a      	strh	r2, [r3, #0]
	accelZValue = (0x0F & mpu.data[4] << 8) | mpu.data[5]; // Combine both registers into one value.
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <checkLevel+0xa4>)
 8000828:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800082c:	b21a      	sxth	r2, r3
 800082e:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <checkLevel+0xb0>)
 8000830:	801a      	strh	r2, [r3, #0]


	if(accelXValue > 0x7FF){ // 2's complement.
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <checkLevel+0xa8>)
 8000834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800083c:	db09      	blt.n	8000852 <checkLevel+0x5e>
		accelXValue |= 0xF000;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <checkLevel+0xa8>)
 8000840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000844:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000848:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800084c:	b21a      	sxth	r2, r3
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <checkLevel+0xa8>)
 8000850:	801a      	strh	r2, [r3, #0]
	}
	if(accelYValue > 0x7FF){ // 2's complement.
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <checkLevel+0xac>)
 8000854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800085c:	db09      	blt.n	8000872 <checkLevel+0x7e>
		accelYValue |= 0xF000;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <checkLevel+0xac>)
 8000860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000864:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000868:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800086c:	b21a      	sxth	r2, r3
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <checkLevel+0xac>)
 8000870:	801a      	strh	r2, [r3, #0]
	}
	if(accelZValue > 0x7FF){ // 2's complement.
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <checkLevel+0xb0>)
 8000874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800087c:	db09      	blt.n	8000892 <checkLevel+0x9e>
		accelZValue |= 0xF000;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <checkLevel+0xb0>)
 8000880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000884:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000888:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800088c:	b21a      	sxth	r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <checkLevel+0xb0>)
 8000890:	801a      	strh	r2, [r3, #0]
	}
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000114 	.word	0x20000114
 800089c:	20000170 	.word	0x20000170
 80008a0:	2000016c 	.word	0x2000016c
 80008a4:	2000016e 	.word	0x2000016e

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 fc94 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f82c 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f000 f9de 	bl	8000c74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008b8:	f000 f966 	bl	8000b88 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80008bc:	f000 f9b2 	bl	8000c24 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80008c0:	f000 f8ce 	bl	8000a60 <MX_I2C1_Init>
  MX_TIM1_Init();
 80008c4:	f000 f90c 	bl	8000ae0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TextLCD_Init(&lcd, &hi2c1, 0x4E); // "startar" LCD
 80008c8:	224e      	movs	r2, #78	; 0x4e
 80008ca:	490b      	ldr	r1, [pc, #44]	; (80008f8 <main+0x50>)
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <main+0x54>)
 80008ce:	f7ff fe9d 	bl	800060c <TextLCD_Init>
  MPU6050_Init(&mpu, &hi2c1); // Setup the mpu sensor.
 80008d2:	4909      	ldr	r1, [pc, #36]	; (80008f8 <main+0x50>)
 80008d4:	480a      	ldr	r0, [pc, #40]	; (8000900 <main+0x58>)
 80008d6:	f000 fa37 	bl	8000d48 <MPU6050_Init>

  */

  while (1)
  {
	  checkLevel();
 80008da:	f7ff ff8b 	bl	80007f4 <checkLevel>
	  if(ret == HAL_OK)
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <main+0x5c>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d103      	bne.n	80008ee <main+0x46>
		  LCD_Debug("Loop is working!", "Loop is working!");
 80008e6:	4908      	ldr	r1, [pc, #32]	; (8000908 <main+0x60>)
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <main+0x60>)
 80008ea:	f000 fa11 	bl	8000d10 <LCD_Debug>
	  HAL_Delay(250);
 80008ee:	20fa      	movs	r0, #250	; 0xfa
 80008f0:	f000 fcf8 	bl	80012e4 <HAL_Delay>
	  checkLevel();
 80008f4:	e7f1      	b.n	80008da <main+0x32>
 80008f6:	bf00      	nop
 80008f8:	20000034 	.word	0x20000034
 80008fc:	2000002c 	.word	0x2000002c
 8000900:	20000114 	.word	0x20000114
 8000904:	20000468 	.word	0x20000468
 8000908:	08004fc4 	.word	0x08004fc4

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0ae      	sub	sp, #184	; 0xb8
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000916:	2248      	movs	r2, #72	; 0x48
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f004 fb3e 	bl	8004f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2250      	movs	r2, #80	; 0x50
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f004 fb2e 	bl	8004f9c <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800094a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800094e:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	f023 0303 	bic.w	r3, r3, #3
 800095a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000964:	f001 fd5a 	bl	800241c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff ff13 	bl	8000794 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096e:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <SystemClock_Config+0x150>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000976:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <SystemClock_Config+0x150>)
 8000978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <SystemClock_Config+0x150>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800098a:	2327      	movs	r3, #39	; 0x27
 800098c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000992:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800099c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800099e:	2301      	movs	r3, #1
 80009a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a4:	2340      	movs	r3, #64	; 0x40
 80009a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009b0:	2360      	movs	r3, #96	; 0x60
 80009b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 f8bf 	bl	8002b44 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009cc:	f000 f99a 	bl	8000d04 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80009d0:	236f      	movs	r3, #111	; 0x6f
 80009d2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009d4:	2302      	movs	r3, #2
 80009d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009f0:	2101      	movs	r1, #1
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fc32 	bl	800325c <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80009fe:	f000 f981 	bl	8000d04 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000a02:	f242 1305 	movw	r3, #8453	; 0x2105
 8000a06:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000a08:	2318      	movs	r3, #24
 8000a0a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a10:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a16:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000a18:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a1c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000a1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a22:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a28:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000a2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000a34:	2300      	movs	r3, #0
 8000a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 f85c 	bl	8003afc <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x142>
  {
    Error_Handler();
 8000a4a:	f000 f95b 	bl	8000d04 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a4e:	f003 f9cb 	bl	8003de8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a52:	bf00      	nop
 8000a54:	37b8      	adds	r7, #184	; 0xb8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	58000400 	.word	0x58000400

08000a60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_I2C1_Init+0x78>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <MX_I2C1_Init+0x7c>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a9c:	f000 feb2 	bl	8001804 <HAL_I2C_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aa6:	f000 f92d 	bl	8000d04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000aae:	f001 fb0f 	bl	80020d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ab8:	f000 f924 	bl	8000d04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000ac0:	f001 fb51 	bl	8002166 <HAL_I2CEx_ConfigDigitalFilter>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 f91b 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000034 	.word	0x20000034
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	00707cbb 	.word	0x00707cbb

08000ae0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b00:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <MX_TIM1_Init+0xa4>)
 8000b02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b2a:	4815      	ldr	r0, [pc, #84]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b2c:	f003 fa73 	bl	8004016 <HAL_TIM_Base_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b36:	f000 f8e5 	bl	8000d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4619      	mov	r1, r3
 8000b46:	480e      	ldr	r0, [pc, #56]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b48:	f003 fabc 	bl	80040c4 <HAL_TIM_ConfigClockSource>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b52:	f000 f8d7 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b68:	f003 fc72 	bl	8004450 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b72:	f000 f8c7 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000120 	.word	0x20000120
 8000b84:	40012c00 	.word	0x40012c00

08000b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000b8e:	4a24      	ldr	r2, [pc, #144]	; (8000c20 <MX_USART1_UART_Init+0x98>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ba0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000bb0:	220c      	movs	r2, #12
 8000bb2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000bd4:	f003 fcbc 	bl	8004550 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000bde:	f000 f891 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000be6:	f004 f8af 	bl	8004d48 <HAL_UARTEx_SetTxFifoThreshold>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000bf0:	f000 f888 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4809      	ldr	r0, [pc, #36]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000bf8:	f004 f8e4 	bl	8004dc4 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000c02:	f000 f87f 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000c08:	f004 f865 	bl	8004cd6 <HAL_UARTEx_DisableFifoMode>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000c12:	f000 f877 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000084 	.word	0x20000084
 8000c20:	40013800 	.word	0x40013800

08000c24 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_USB_PCD_Init+0x48>)
 8000c2a:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <MX_USB_PCD_Init+0x4c>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_USB_PCD_Init+0x48>)
 8000c30:	2208      	movs	r2, #8
 8000c32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <MX_USB_PCD_Init+0x48>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USB_PCD_Init+0x48>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_USB_PCD_Init+0x48>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USB_PCD_Init+0x48>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_USB_PCD_Init+0x48>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USB_PCD_Init+0x48>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_USB_PCD_Init+0x48>)
 8000c5a:	f001 fad0 	bl	80021fe <HAL_PCD_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000c64:	f000 f84e 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000174 	.word	0x20000174
 8000c70:	40006800 	.word	0x40006800

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c88:	2004      	movs	r0, #4
 8000c8a:	f7ff fd99 	bl	80007c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f7ff fd96 	bl	80007c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff fd93 	bl	80007c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	2008      	movs	r0, #8
 8000c9c:	f7ff fd90 	bl	80007c0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2123      	movs	r1, #35	; 0x23
 8000ca4:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <MX_GPIO_Init+0x84>)
 8000ca6:	f000 fd95 	bl	80017d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000caa:	2310      	movs	r3, #16
 8000cac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4810      	ldr	r0, [pc, #64]	; (8000cfc <MX_GPIO_Init+0x88>)
 8000cbc:	f000 fc1a 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000cc0:	2323      	movs	r3, #35	; 0x23
 8000cc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <MX_GPIO_Init+0x84>)
 8000cd6:	f000 fc0d 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_GPIO_Init+0x8c>)
 8000cec:	f000 fc02 	bl	80014f4 <HAL_GPIO_Init>

}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000800 	.word	0x48000800
 8000d00:	48000c00 	.word	0x48000c00

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <LCD_Debug>:

	MPU6050 slave address: Binary: 1101001 / 1101000. Hex: 69 / 68. Pin AD0 hi / lo.

*/

void LCD_Debug(const char* first_row, const char* second_row){ // Used for debug purposes.
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]

	TextLCD_Puts(&lcd, first_row);
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <LCD_Debug+0x34>)
 8000d1e:	f7ff fd1b 	bl	8000758 <TextLCD_Puts>
	TextLCD_Position(&lcd, 0, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2100      	movs	r1, #0
 8000d26:	4807      	ldr	r0, [pc, #28]	; (8000d44 <LCD_Debug+0x34>)
 8000d28:	f7ff fcea 	bl	8000700 <TextLCD_Position>
	TextLCD_Puts(&lcd, second_row);
 8000d2c:	6839      	ldr	r1, [r7, #0]
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <LCD_Debug+0x34>)
 8000d30:	f7ff fd12 	bl	8000758 <TextLCD_Puts>
	TextLCD_Home(&lcd);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <LCD_Debug+0x34>)
 8000d36:	f7ff fcd7 	bl	80006e8 <TextLCD_Home>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000002c 	.word	0x2000002c

08000d48 <MPU6050_Init>:

void MPU6050_Init(MPU6050_Type *sensor, I2C_HandleTypeDef *hi2c) { // Setup. OK
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af02      	add	r7, sp, #8
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret; // Used for storing return value of the i2c functions.

	sensor->hi2c = hi2c; // Set which i2c to use.
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	601a      	str	r2, [r3, #0]
	sensor->DevAddress = 0x68 << 1; // Device address
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	22d0      	movs	r2, #208	; 0xd0
 8000d5c:	711a      	strb	r2, [r3, #4]

	sensor->data[0] = PWR_MGMT_1; // Address to the power management register, need to wake it up first.
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	226b      	movs	r2, #107	; 0x6b
 8000d62:	715a      	strb	r2, [r3, #5]

	ret = HAL_I2C_Master_Transmit(sensor->hi2c, sensor->DevAddress, &sensor->data, 1, HAL_MAX_DELAY); // Get return value.
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	791b      	ldrb	r3, [r3, #4]
 8000d6c:	b299      	uxth	r1, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	1d5a      	adds	r2, r3, #5
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f000 fdd3 	bl	8001924 <HAL_I2C_Master_Transmit>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK) // Check return value.
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <MPU6050_Init+0x48>
		LCD_Debug("MPU INIT PWR", "MGMT FAILED"); // Display an error if not ok.
 8000d88:	4903      	ldr	r1, [pc, #12]	; (8000d98 <MPU6050_Init+0x50>)
 8000d8a:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MPU6050_Init+0x54>)
 8000d8c:	f7ff ffc0 	bl	8000d10 <LCD_Debug>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08004fd8 	.word	0x08004fd8
 8000d9c:	08004fe4 	.word	0x08004fe4

08000da0 <MPU6050_WriteRegister>:

void MPU6050_WriteRegister(MPU6050_Type *sensor, uint8_t reg, uint8_t *data, int8_t bytes){ // Write to the registers.
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	461a      	mov	r2, r3
 8000dac:	460b      	mov	r3, r1
 8000dae:	72fb      	strb	r3, [r7, #11]
 8000db0:	4613      	mov	r3, r2
 8000db2:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(sensor->hi2c, sensor->DevAddress, &reg, 1, HAL_MAX_DELAY); // Which register.
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	791b      	ldrb	r3, [r3, #4]
 8000dbc:	b299      	uxth	r1, r3
 8000dbe:	f107 020b 	add.w	r2, r7, #11
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f000 fdab 	bl	8001924 <HAL_I2C_Master_Transmit>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK)
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <MPU6050_WriteRegister+0x40>
		LCD_Debug("MPU WRITE", "REGISTER FAILED");
 8000dd8:	490f      	ldr	r1, [pc, #60]	; (8000e18 <MPU6050_WriteRegister+0x78>)
 8000dda:	4810      	ldr	r0, [pc, #64]	; (8000e1c <MPU6050_WriteRegister+0x7c>)
 8000ddc:	f7ff ff98 	bl	8000d10 <LCD_Debug>

	ret = HAL_I2C_Master_Transmit(sensor->hi2c, sensor->DevAddress, &data, bytes, HAL_MAX_DELAY); // Write the data.
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	791b      	ldrb	r3, [r3, #4]
 8000de8:	b299      	uxth	r1, r3
 8000dea:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	1d3a      	adds	r2, r7, #4
 8000df2:	f04f 34ff 	mov.w	r4, #4294967295
 8000df6:	9400      	str	r4, [sp, #0]
 8000df8:	f000 fd94 	bl	8001924 <HAL_I2C_Master_Transmit>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK)
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <MPU6050_WriteRegister+0x6e>
		LCD_Debug("MPU WRITE", "REGISTER FAILED");
 8000e06:	4904      	ldr	r1, [pc, #16]	; (8000e18 <MPU6050_WriteRegister+0x78>)
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MPU6050_WriteRegister+0x7c>)
 8000e0a:	f7ff ff81 	bl	8000d10 <LCD_Debug>
}
 8000e0e:	bf00      	nop
 8000e10:	371c      	adds	r7, #28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd90      	pop	{r4, r7, pc}
 8000e16:	bf00      	nop
 8000e18:	08004ff4 	.word	0x08004ff4
 8000e1c:	08005004 	.word	0x08005004

08000e20 <MPU6050_ReadRegisters>:

	if(ret != HAL_OK)
		LCD_Debug("MPU MEM READ", "REG FAILED");
}

void MPU6050_ReadRegisters(MPU6050_Type *sensor, uint8_t address, uint8_t size){	// Read a specific register. OK
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af04      	add	r7, sp, #16
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef ret;


	ret = HAL_I2C_Mem_Read(sensor->hi2c, sensor->DevAddress, address << 1, I2C_MEMADD_SIZE_16BIT, sensor->data, size, HAL_MAX_DELAY);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	791b      	ldrb	r3, [r3, #4]
 8000e38:	b299      	uxth	r1, r3
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	b29c      	uxth	r4, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3305      	adds	r3, #5
 8000e46:	78ba      	ldrb	r2, [r7, #2]
 8000e48:	b292      	uxth	r2, r2
 8000e4a:	f04f 35ff 	mov.w	r5, #4294967295
 8000e4e:	9502      	str	r5, [sp, #8]
 8000e50:	9201      	str	r2, [sp, #4]
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2302      	movs	r3, #2
 8000e56:	4622      	mov	r2, r4
 8000e58:	f000 fe58 	bl	8001b0c <HAL_I2C_Mem_Read>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <MPU6050_ReadRegisters+0x4e>
		LCD_Debug("MPU MEM READ", "REGS FAILED");
 8000e66:	4904      	ldr	r1, [pc, #16]	; (8000e78 <MPU6050_ReadRegisters+0x58>)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MPU6050_ReadRegisters+0x5c>)
 8000e6a:	f7ff ff51 	bl	8000d10 <LCD_Debug>
} // Read the selected register, and any following registers.
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bdb0      	pop	{r4, r5, r7, pc}
 8000e76:	bf00      	nop
 8000e78:	0800502c 	.word	0x0800502c
 8000e7c:	0800501c 	.word	0x0800501c

08000e80 <LL_AHB2_GRP1_EnableClock>:
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b085      	sub	sp, #20
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ebe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ece:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f08:	68fb      	ldr	r3, [r7, #12]
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <HAL_I2C_MspInit+0x5c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d117      	bne.n	8000f76 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2002      	movs	r0, #2
 8000f48:	f7ff ff9a 	bl	8000e80 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f52:	2312      	movs	r3, #18
 8000f54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	4619      	mov	r1, r3
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <HAL_I2C_MspInit+0x60>)
 8000f6a:	f000 fac3 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f6e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000f72:	f7ff ff9e 	bl	8000eb2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40005400 	.word	0x40005400
 8000f84:	48000400 	.word	0x48000400

08000f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a05      	ldr	r2, [pc, #20]	; (8000fac <HAL_TIM_Base_MspInit+0x24>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d103      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f9a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f9e:	f7ff ffa1 	bl	8000ee4 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40012c00 	.word	0x40012c00

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_UART_MspInit+0x58>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d116      	bne.n	8001000 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000fd6:	f7ff ff85 	bl	8000ee4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f7ff ff50 	bl	8000e80 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fe0:	23c0      	movs	r3, #192	; 0xc0
 8000fe2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <HAL_UART_MspInit+0x5c>)
 8000ffc:	f000 fa7a 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40013800 	.word	0x40013800
 800100c:	48000400 	.word	0x48000400

08001010 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0f      	ldr	r2, [pc, #60]	; (800106c <HAL_PCD_MspInit+0x5c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d118      	bne.n	8001064 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2001      	movs	r0, #1
 8001034:	f7ff ff24 	bl	8000e80 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001038:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800103c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800104a:	230a      	movs	r3, #10
 800104c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f000 fa4c 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800105c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001060:	f7ff ff27 	bl	8000eb2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40006800 	.word	0x40006800

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 f8e6 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <SystemInit+0x98>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ce:	4a23      	ldr	r2, [pc, #140]	; (800115c <SystemInit+0x98>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ec:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80010f0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80010f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <SystemInit+0x9c>)
 80010fe:	4013      	ands	r3, r2
 8001100:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800110e:	f023 0305 	bic.w	r3, r3, #5
 8001112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800111e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001122:	f023 0301 	bic.w	r3, r3, #1
 8001126:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800112a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112e:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <SystemInit+0xa0>)
 8001130:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <SystemInit+0xa0>)
 8001138:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800113a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001148:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00
 8001160:	faf6fefb 	.word	0xfaf6fefb
 8001164:	22041000 	.word	0x22041000

08001168 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001168:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116c:	3304      	adds	r3, #4

0800116e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001170:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001172:	d3f9      	bcc.n	8001168 <CopyDataInit>
  bx lr
 8001174:	4770      	bx	lr

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001176:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001178:	3004      	adds	r0, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800117a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>
  bx lr
 800117e:	4770      	bx	lr

08001180 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001182:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001184:	f7ff ff9e 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <LoopForever+0x8>)
 800118a:	490c      	ldr	r1, [pc, #48]	; (80011bc <LoopForever+0xc>)
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <LoopForever+0x10>)
 800118e:	2300      	movs	r3, #0
 8001190:	f7ff ffed 	bl	800116e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LoopForever+0x14>)
 8001196:	490c      	ldr	r1, [pc, #48]	; (80011c8 <LoopForever+0x18>)
 8001198:	2300      	movs	r3, #0
 800119a:	f7ff ffee 	bl	800117a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800119e:	480b      	ldr	r0, [pc, #44]	; (80011cc <LoopForever+0x1c>)
 80011a0:	490b      	ldr	r1, [pc, #44]	; (80011d0 <LoopForever+0x20>)
 80011a2:	2300      	movs	r3, #0
 80011a4:	f7ff ffe9 	bl	800117a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011a8:	f003 fed4 	bl	8004f54 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80011ac:	f7ff fb7c 	bl	80008a8 <main>

080011b0 <LoopForever>:

LoopForever:
  b LoopForever
 80011b0:	e7fe      	b.n	80011b0 <LoopForever>
 80011b2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80011b4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80011b8:	20000004 	.word	0x20000004
 80011bc:	20000010 	.word	0x20000010
 80011c0:	0800513c 	.word	0x0800513c
  INIT_BSS _sbss, _ebss
 80011c4:	20000010 	.word	0x20000010
 80011c8:	20000474 	.word	0x20000474
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80011cc:	20030000 	.word	0x20030000
 80011d0:	20030000 	.word	0x20030000

080011d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_Init+0x3c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_Init+0x3c>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ee:	2003      	movs	r0, #3
 80011f0:	f000 f94e 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 f80f 	bl	8001218 <HAL_InitTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	e001      	b.n	800120a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001206:	f7ff fe86 	bl	8000f16 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800120a:	79fb      	ldrb	r3, [r7, #7]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58004000 	.word	0x58004000

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_InitTick+0x6c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d024      	beq.n	8001276 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800122c:	f002 f9c2 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8001230:	4602      	mov	r2, r0
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_InitTick+0x6c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4619      	mov	r1, r3
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f948 	bl	80014da <HAL_SYSTICK_Config>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10f      	bne.n	8001270 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	d809      	bhi.n	800126a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001256:	2200      	movs	r2, #0
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	f04f 30ff 	mov.w	r0, #4294967295
 800125e:	f000 f922 	bl	80014a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_InitTick+0x70>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	e007      	b.n	800127a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e004      	b.n	800127a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e001      	b.n	800127a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000000c 	.word	0x2000000c
 8001288:	20000008 	.word	0x20000008

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	20000470 	.word	0x20000470

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000470 	.word	0x20000470

080012cc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTickPrio+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008

080012e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff ffe2 	bl	80012b4 <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d005      	beq.n	800130a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_Delay+0x44>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800130a:	bf00      	nop
 800130c:	f7ff ffd2 	bl	80012b4 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f7      	bhi.n	800130c <HAL_Delay+0x28>
    {
    }
  }
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000000c 	.word	0x2000000c

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff47 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff5e 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff90 	bl	80013e4 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5f 	bl	8001390 <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffb2 	bl	800144c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	e14c      	b.n	800179e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 813e 	beq.w	8001798 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d00b      	beq.n	800153c <HAL_GPIO_Init+0x48>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d007      	beq.n	800153c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001530:	2b11      	cmp	r3, #17
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b12      	cmp	r3, #18
 800153a:	d130      	bne.n	800159e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001572:	2201      	movs	r2, #1
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 0201 	and.w	r2, r3, #1
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0xea>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b12      	cmp	r3, #18
 80015dc:	d123      	bne.n	8001626 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3208      	adds	r2, #8
 8001620:	6939      	ldr	r1, [r7, #16]
 8001622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0203 	and.w	r2, r3, #3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8098 	beq.w	8001798 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001668:	4a54      	ldr	r2, [pc, #336]	; (80017bc <HAL_GPIO_Init+0x2c8>)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001692:	d019      	beq.n	80016c8 <HAL_GPIO_Init+0x1d4>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a4a      	ldr	r2, [pc, #296]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d013      	beq.n	80016c4 <HAL_GPIO_Init+0x1d0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a49      	ldr	r2, [pc, #292]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d00d      	beq.n	80016c0 <HAL_GPIO_Init+0x1cc>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a48      	ldr	r2, [pc, #288]	; (80017c8 <HAL_GPIO_Init+0x2d4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d007      	beq.n	80016bc <HAL_GPIO_Init+0x1c8>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a47      	ldr	r2, [pc, #284]	; (80017cc <HAL_GPIO_Init+0x2d8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_GPIO_Init+0x1c4>
 80016b4:	2304      	movs	r3, #4
 80016b6:	e008      	b.n	80016ca <HAL_GPIO_Init+0x1d6>
 80016b8:	2307      	movs	r3, #7
 80016ba:	e006      	b.n	80016ca <HAL_GPIO_Init+0x1d6>
 80016bc:	2303      	movs	r3, #3
 80016be:	e004      	b.n	80016ca <HAL_GPIO_Init+0x1d6>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x1d6>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_GPIO_Init+0x1d6>
 80016c8:	2300      	movs	r3, #0
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016da:	4938      	ldr	r1, [pc, #224]	; (80017bc <HAL_GPIO_Init+0x2c8>)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016e8:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 80016ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170e:	4a30      	ldr	r2, [pc, #192]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001716:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 8001718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800173c:	4a24      	ldr	r2, [pc, #144]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f47f aeab 	bne.w	8001504 <HAL_GPIO_Init+0x10>
  }
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40010000 	.word	0x40010000
 80017c0:	48000400 	.word	0x48000400
 80017c4:	48000800 	.word	0x48000800
 80017c8:	48000c00 	.word	0x48000c00
 80017cc:	48001000 	.word	0x48001000
 80017d0:	58000800 	.word	0x58000800

080017d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e4:	787b      	ldrb	r3, [r7, #1]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e081      	b.n	800191a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fb7a 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2224      	movs	r2, #36	; 0x24
 8001834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001854:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001864:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d107      	bne.n	800187e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	e006      	b.n	800188c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800188a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d104      	bne.n	800189e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800189c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	ea42 0103 	orr.w	r1, r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	021a      	lsls	r2, r3, #8
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69d9      	ldr	r1, [r3, #28]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1a      	ldr	r2, [r3, #32]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2220      	movs	r2, #32
 8001906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	461a      	mov	r2, r3
 8001930:	460b      	mov	r3, r1
 8001932:	817b      	strh	r3, [r7, #10]
 8001934:	4613      	mov	r3, r2
 8001936:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b20      	cmp	r3, #32
 8001942:	f040 80da 	bne.w	8001afa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_I2C_Master_Transmit+0x30>
 8001950:	2302      	movs	r3, #2
 8001952:	e0d3      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800195c:	f7ff fcaa 	bl	80012b4 <HAL_GetTick>
 8001960:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2319      	movs	r3, #25
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 fa5e 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0be      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2221      	movs	r2, #33	; 0x21
 8001982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2210      	movs	r2, #16
 800198a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	893a      	ldrh	r2, [r7, #8]
 800199e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2bff      	cmp	r3, #255	; 0xff
 80019ae:	d90e      	bls.n	80019ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	22ff      	movs	r2, #255	; 0xff
 80019b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	8979      	ldrh	r1, [r7, #10]
 80019be:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <HAL_I2C_Master_Transmit+0x1e0>)
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 fb54 	bl	8002074 <I2C_TransferConfig>
 80019cc:	e06c      	b.n	8001aa8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	8979      	ldrh	r1, [r7, #10]
 80019e0:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <HAL_I2C_Master_Transmit+0x1e0>)
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 fb43 	bl	8002074 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80019ee:	e05b      	b.n	8001aa8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	6a39      	ldr	r1, [r7, #32]
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 fa5b 	bl	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e07b      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3b01      	subs	r3, #1
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d034      	beq.n	8001aa8 <HAL_I2C_Master_Transmit+0x184>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d130      	bne.n	8001aa8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f9ed 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e04d      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2bff      	cmp	r3, #255	; 0xff
 8001a68:	d90e      	bls.n	8001a88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	22ff      	movs	r2, #255	; 0xff
 8001a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	8979      	ldrh	r1, [r7, #10]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 faf7 	bl	8002074 <I2C_TransferConfig>
 8001a86:	e00f      	b.n	8001aa8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	8979      	ldrh	r1, [r7, #10]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fae6 	bl	8002074 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d19e      	bne.n	80019f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	6a39      	ldr	r1, [r7, #32]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 fa3a 	bl	8001f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e01a      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2220      	movs	r2, #32
 8001acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_I2C_Master_Transmit+0x1e4>)
 8001ada:	400b      	ands	r3, r1
 8001adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001afa:	2302      	movs	r3, #2
  }
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	80002000 	.word	0x80002000
 8001b08:	fe00e800 	.word	0xfe00e800

08001b0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	4608      	mov	r0, r1
 8001b16:	4611      	mov	r1, r2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	817b      	strh	r3, [r7, #10]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	813b      	strh	r3, [r7, #8]
 8001b22:	4613      	mov	r3, r2
 8001b24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	f040 80fd 	bne.w	8001d2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <HAL_I2C_Mem_Read+0x34>
 8001b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d105      	bne.n	8001b4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0f1      	b.n	8001d30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_I2C_Mem_Read+0x4e>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e0ea      	b.n	8001d30 <HAL_I2C_Mem_Read+0x224>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b62:	f7ff fba7 	bl	80012b4 <HAL_GetTick>
 8001b66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2319      	movs	r3, #25
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 f95b 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0d5      	b.n	8001d30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2222      	movs	r2, #34	; 0x22
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a3a      	ldr	r2, [r7, #32]
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bac:	88f8      	ldrh	r0, [r7, #6]
 8001bae:	893a      	ldrh	r2, [r7, #8]
 8001bb0:	8979      	ldrh	r1, [r7, #10]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	4603      	mov	r3, r0
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f8bf 	bl	8001d40 <I2C_RequestMemoryRead>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0ad      	b.n	8001d30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2bff      	cmp	r3, #255	; 0xff
 8001bdc:	d90e      	bls.n	8001bfc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	22ff      	movs	r2, #255	; 0xff
 8001be2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	8979      	ldrh	r1, [r7, #10]
 8001bec:	4b52      	ldr	r3, [pc, #328]	; (8001d38 <HAL_I2C_Mem_Read+0x22c>)
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fa3d 	bl	8002074 <I2C_TransferConfig>
 8001bfa:	e00f      	b.n	8001c1c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	8979      	ldrh	r1, [r7, #10]
 8001c0e:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <HAL_I2C_Mem_Read+0x22c>)
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 fa2c 	bl	8002074 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c22:	2200      	movs	r2, #0
 8001c24:	2104      	movs	r1, #4
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f902 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e07c      	b.n	8001d30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d034      	beq.n	8001cdc <HAL_I2C_Mem_Read+0x1d0>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d130      	bne.n	8001cdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	2200      	movs	r2, #0
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 f8d3 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e04d      	b.n	8001d30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2bff      	cmp	r3, #255	; 0xff
 8001c9c:	d90e      	bls.n	8001cbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	22ff      	movs	r2, #255	; 0xff
 8001ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	8979      	ldrh	r1, [r7, #10]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f9dd 	bl	8002074 <I2C_TransferConfig>
 8001cba:	e00f      	b.n	8001cdc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	8979      	ldrh	r1, [r7, #10]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f9cc 	bl	8002074 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d19a      	bne.n	8001c1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f920 	bl	8001f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e01a      	b.n	8001d30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_I2C_Mem_Read+0x230>)
 8001d0e:	400b      	ands	r3, r1
 8001d10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d2e:	2302      	movs	r3, #2
  }
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	80002400 	.word	0x80002400
 8001d3c:	fe00e800 	.word	0xfe00e800

08001d40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	4608      	mov	r0, r1
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4603      	mov	r3, r0
 8001d50:	817b      	strh	r3, [r7, #10]
 8001d52:	460b      	mov	r3, r1
 8001d54:	813b      	strh	r3, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	8979      	ldrh	r1, [r7, #10]
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <I2C_RequestMemoryRead+0xa4>)
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2300      	movs	r3, #0
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f984 	bl	8002074 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f89d 	bl	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e02c      	b.n	8001dda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d86:	893b      	ldrh	r3, [r7, #8]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d90:	e015      	b.n	8001dbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d92:	893b      	ldrh	r3, [r7, #8]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f883 	bl	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e012      	b.n	8001dda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001db4:	893b      	ldrh	r3, [r7, #8]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2140      	movs	r1, #64	; 0x40
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f831 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	80002000 	.word	0x80002000

08001de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d103      	bne.n	8001e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d007      	beq.n	8001e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	619a      	str	r2, [r3, #24]
  }
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e40:	e022      	b.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d01e      	beq.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e4a:	f7ff fa33 	bl	80012b4 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d302      	bcc.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d113      	bne.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	f043 0220 	orr.w	r2, r3, #32
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e00f      	b.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4013      	ands	r3, r2
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d0cd      	beq.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ebc:	e02c      	b.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f870 	bl	8001fa8 <I2C_IsAcknowledgeFailed>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e02a      	b.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d01e      	beq.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eda:	f7ff f9eb 	bl	80012b4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d302      	bcc.n	8001ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d113      	bne.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	f043 0220 	orr.w	r2, r3, #32
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e007      	b.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d1cb      	bne.n	8001ebe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f3c:	e028      	b.n	8001f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f830 	bl	8001fa8 <I2C_IsAcknowledgeFailed>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e026      	b.n	8001fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f9af 	bl	80012b4 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d113      	bne.n	8001f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e007      	b.n	8001fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d1cf      	bne.n	8001f3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d151      	bne.n	8002066 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fc2:	e022      	b.n	800200a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fca:	d01e      	beq.n	800200a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fcc:	f7ff f972 	bl	80012b4 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d302      	bcc.n	8001fe2 <I2C_IsAcknowledgeFailed+0x3a>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d113      	bne.n	800200a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f043 0220 	orr.w	r2, r3, #32
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e02e      	b.n	8002068 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b20      	cmp	r3, #32
 8002016:	d1d5      	bne.n	8001fc4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2210      	movs	r2, #16
 800201e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2220      	movs	r2, #32
 8002026:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f7ff fedd 	bl	8001de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <I2C_IsAcknowledgeFailed+0xc8>)
 800203a:	400b      	ands	r3, r1
 800203c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f043 0204 	orr.w	r2, r3, #4
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	fe00e800 	.word	0xfe00e800

08002074 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	817b      	strh	r3, [r7, #10]
 8002082:	4613      	mov	r3, r2
 8002084:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	0d5b      	lsrs	r3, r3, #21
 8002090:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <I2C_TransferConfig+0x58>)
 8002096:	430b      	orrs	r3, r1
 8002098:	43db      	mvns	r3, r3
 800209a:	ea02 0103 	and.w	r1, r2, r3
 800209e:	897b      	ldrh	r3, [r7, #10]
 80020a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020a4:	7a7b      	ldrb	r3, [r7, #9]
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	03ff63ff 	.word	0x03ff63ff

080020d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d138      	bne.n	8002158 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e032      	b.n	800215a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2224      	movs	r2, #36	; 0x24
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002122:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	e000      	b.n	800215a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002158:	2302      	movs	r3, #2
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b20      	cmp	r3, #32
 800217a:	d139      	bne.n	80021f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002186:	2302      	movs	r3, #2
 8002188:	e033      	b.n	80021f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2224      	movs	r2, #36	; 0x24
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e000      	b.n	80021f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002200:	b08b      	sub	sp, #44	; 0x2c
 8002202:	af06      	add	r7, sp, #24
 8002204:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0d7      	b.n	80023c0 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7fe fef3 	bl	8001010 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2203      	movs	r2, #3
 800222e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f002 fe50 	bl	8004edc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e04c      	b.n	80022dc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	3301      	adds	r3, #1
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	b298      	uxth	r0, r3
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	3336      	adds	r3, #54	; 0x36
 8002280:	4602      	mov	r2, r0
 8002282:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	3303      	adds	r3, #3
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	3338      	adds	r3, #56	; 0x38
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	333c      	adds	r3, #60	; 0x3c
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	3340      	adds	r3, #64	; 0x40
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	3301      	adds	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d3ad      	bcc.n	8002242 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	e044      	b.n	8002376 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	3301      	adds	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d3b5      	bcc.n	80022ec <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	687e      	ldr	r6, [r7, #4]
 8002388:	466d      	mov	r5, sp
 800238a:	f106 0410 	add.w	r4, r6, #16
 800238e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	602b      	str	r3, [r5, #0]
 8002396:	1d33      	adds	r3, r6, #4
 8002398:	cb0e      	ldmia	r3, {r1, r2, r3}
 800239a:	6838      	ldr	r0, [r7, #0]
 800239c:	f002 fdb9 	bl	8004f12 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f805 	bl	80023c8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002400:	b29b      	uxth	r3, r3
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6013      	str	r3, [r2, #0]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	58000400 	.word	0x58000400

0800243c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_PWREx_GetVoltageRange+0x18>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	58000400 	.word	0x58000400

08002458 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800246a:	d101      	bne.n	8002470 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_RCC_HSE_Enable>:
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800248a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_RCC_HSE_Disable>:
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800249e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_RCC_HSE_IsReady>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024ca:	d101      	bne.n	80024d0 <LL_RCC_HSE_IsReady+0x18>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_RCC_HSE_IsReady+0x1a>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_RCC_HSI_Enable>:
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80024e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_RCC_HSI_Disable>:
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_RCC_HSI_IsReady>:
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800251c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252a:	d101      	bne.n	8002530 <LL_RCC_HSI_IsReady+0x18>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <LL_RCC_HSI_IsReady+0x1a>
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_RCC_HSI_SetCalibTrimming>:
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_RCC_HSI48_Enable>:
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_RCC_HSI48_Disable>:
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_RCC_HSI48_IsReady>:
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d101      	bne.n	80025c2 <LL_RCC_HSI48_IsReady+0x18>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <LL_RCC_HSI48_IsReady+0x1a>
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <LL_RCC_LSE_Enable>:
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_RCC_LSE_Disable>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_RCC_LSE_EnableBypass>:
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <LL_RCC_LSE_DisableBypass>:
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800265a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d101      	bne.n	800266e <LL_RCC_LSE_IsReady+0x18>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <LL_RCC_LSE_IsReady+0x1a>
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d101      	bne.n	80026d6 <LL_RCC_LSI1_IsReady+0x18>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <LL_RCC_LSI1_IsReady+0x1a>
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80026e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800272a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d101      	bne.n	800273e <LL_RCC_LSI2_IsReady+0x18>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <LL_RCC_LSI2_IsReady+0x1a>
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800277c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800279a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6013      	str	r3, [r2, #0]
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d101      	bne.n	80027ca <LL_RCC_MSI_IsReady+0x16>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LL_RCC_MSI_IsReady+0x18>
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800280e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2bb0      	cmp	r3, #176	; 0xb0
 8002814:	d901      	bls.n	800281a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002816:	23b0      	movs	r3, #176	; 0xb0
 8002818:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800281a:	687b      	ldr	r3, [r7, #4]
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 0203 	bic.w	r2, r3, #3
 8002864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800289a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028f6:	f023 020f 	bic.w	r2, r3, #15
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4313      	orrs	r3, r2
 800292e:	608b      	str	r3, [r1, #8]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800294e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002984:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f8:	6013      	str	r3, [r2, #0]
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a16:	d101      	bne.n	8002a1c <LL_RCC_PLL_IsReady+0x18>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <LL_RCC_PLL_IsReady+0x1a>
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	0a1b      	lsrs	r3, r3, #8
 8002a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d101      	bne.n	8002aa2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ac2:	d101      	bne.n	8002ac8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae8:	d101      	bne.n	8002aee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b0c:	d101      	bne.n	8002b12 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b30:	d101      	bne.n	8002b36 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b08d      	sub	sp, #52	; 0x34
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e37e      	b.n	8003254 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8092 	beq.w	8002c88 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b64:	f7ff fe89 	bl	800287a <LL_RCC_GetSysClkSource>
 8002b68:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b6a:	f7ff ff82 	bl	8002a72 <LL_RCC_PLL_GetMainSource>
 8002b6e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_RCC_OscConfig+0x3e>
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	2b0c      	cmp	r3, #12
 8002b7a:	d14c      	bne.n	8002c16 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d149      	bne.n	8002c16 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b82:	f7ff fe17 	bl	80027b4 <LL_RCC_MSI_IsReady>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_OscConfig+0x54>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e35d      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002b9c:	f7ff fe2f 	bl	80027fe <LL_RCC_MSI_GetRange>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	429c      	cmp	r4, r3
 8002ba4:	d914      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fd42 	bl	8003634 <RCC_SetFlashLatencyFromMSIRange>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e34c      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fe09 	bl	80027d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fe2d 	bl	8002828 <LL_RCC_MSI_SetCalibTrimming>
 8002bce:	e013      	b.n	8002bf8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fdfe 	bl	80027d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fe22 	bl	8002828 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fd23 	bl	8003634 <RCC_SetFlashLatencyFromMSIRange>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e32d      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bf8:	f000 fcdc 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4ab3      	ldr	r2, [pc, #716]	; (8002ecc <HAL_RCC_OscConfig+0x388>)
 8002c00:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c02:	4bb3      	ldr	r3, [pc, #716]	; (8002ed0 <HAL_RCC_OscConfig+0x38c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fb06 	bl	8001218 <HAL_InitTick>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d039      	beq.n	8002c86 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e31e      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01e      	beq.n	8002c5c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c1e:	f7ff fdab 	bl	8002778 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c22:	f7fe fb47 	bl	80012b4 <HAL_GetTick>
 8002c26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c2a:	f7fe fb43 	bl	80012b4 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e30b      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c3c:	f7ff fdba 	bl	80027b4 <LL_RCC_MSI_IsReady>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f1      	beq.n	8002c2a <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fdc3 	bl	80027d6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fde7 	bl	8002828 <LL_RCC_MSI_SetCalibTrimming>
 8002c5a:	e015      	b.n	8002c88 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c5c:	f7ff fd9b 	bl	8002796 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fb28 	bl	80012b4 <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c68:	f7fe fb24 	bl	80012b4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e2ec      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c7a:	f7ff fd9b 	bl	80027b4 <LL_RCC_MSI_IsReady>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f1      	bne.n	8002c68 <HAL_RCC_OscConfig+0x124>
 8002c84:	e000      	b.n	8002c88 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d04e      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c94:	f7ff fdf1 	bl	800287a <LL_RCC_GetSysClkSource>
 8002c98:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c9a:	f7ff feea 	bl	8002a72 <LL_RCC_PLL_GetMainSource>
 8002c9e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x16e>
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	d10d      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb2:	f7ff fc01 	bl	80024b8 <LL_RCC_HSE_IsReady>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d039      	beq.n	8002d30 <HAL_RCC_OscConfig+0x1ec>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d135      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e2c5      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x194>
 8002cd2:	f7ff fbd3 	bl	800247c <LL_RCC_HSE_Enable>
 8002cd6:	e001      	b.n	8002cdc <HAL_RCC_OscConfig+0x198>
 8002cd8:	f7ff fbdf 	bl	800249a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d012      	beq.n	8002d0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fae6 	bl	80012b4 <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fae2 	bl	80012b4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e2aa      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002cfe:	f7ff fbdb 	bl	80024b8 <LL_RCC_HSE_IsReady>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f1      	beq.n	8002cec <HAL_RCC_OscConfig+0x1a8>
 8002d08:	e013      	b.n	8002d32 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fad3 	bl	80012b4 <HAL_GetTick>
 8002d0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d12:	f7fe facf 	bl	80012b4 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b64      	cmp	r3, #100	; 0x64
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e297      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d24:	f7ff fbc8 	bl	80024b8 <LL_RCC_HSE_IsReady>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f1      	bne.n	8002d12 <HAL_RCC_OscConfig+0x1ce>
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d051      	beq.n	8002de2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d3e:	f7ff fd9c 	bl	800287a <LL_RCC_GetSysClkSource>
 8002d42:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d44:	f7ff fe95 	bl	8002a72 <LL_RCC_PLL_GetMainSource>
 8002d48:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_OscConfig+0x218>
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d113      	bne.n	8002d7e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d110      	bne.n	8002d7e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d5c:	f7ff fbdc 	bl	8002518 <LL_RCC_HSI_IsReady>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_RCC_OscConfig+0x22e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e270      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fbe0 	bl	800253c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7c:	e031      	b.n	8002de2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d019      	beq.n	8002dba <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d86:	f7ff fba9 	bl	80024dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fa93 	bl	80012b4 <HAL_GetTick>
 8002d8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fe fa8f 	bl	80012b4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e257      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002da4:	f7ff fbb8 	bl	8002518 <LL_RCC_HSI_IsReady>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f1      	beq.n	8002d92 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fbc2 	bl	800253c <LL_RCC_HSI_SetCalibTrimming>
 8002db8:	e013      	b.n	8002de2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	f7ff fb9e 	bl	80024fa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fe fa79 	bl	80012b4 <HAL_GetTick>
 8002dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc6:	f7fe fa75 	bl	80012b4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e23d      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dd8:	f7ff fb9e 	bl	8002518 <LL_RCC_HSI_IsReady>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f1      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80a3 	beq.w	8002f42 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d076      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d046      	beq.n	8002e9e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002e10:	f7ff fc55 	bl	80026be <LL_RCC_LSI1_IsReady>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d113      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002e1a:	f7ff fc2e 	bl	800267a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e1e:	f7fe fa49 	bl	80012b4 <HAL_GetTick>
 8002e22:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e26:	f7fe fa45 	bl	80012b4 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e20d      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002e38:	f7ff fc41 	bl	80026be <LL_RCC_LSI1_IsReady>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f1      	beq.n	8002e26 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002e42:	f7ff fc4e 	bl	80026e2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe fa35 	bl	80012b4 <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002e4e:	f7fe fa31 	bl	80012b4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e1f9      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002e60:	f7ff fc61 	bl	8002726 <LL_RCC_LSI2_IsReady>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f1      	beq.n	8002e4e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fc6b 	bl	800274a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002e74:	f7ff fc12 	bl	800269c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe fa1c 	bl	80012b4 <HAL_GetTick>
 8002e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e80:	f7fe fa18 	bl	80012b4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1e0      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002e92:	f7ff fc14 	bl	80026be <LL_RCC_LSI1_IsReady>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f1      	bne.n	8002e80 <HAL_RCC_OscConfig+0x33c>
 8002e9c:	e051      	b.n	8002f42 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002e9e:	f7ff fbec 	bl	800267a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fa07 	bl	80012b4 <HAL_GetTick>
 8002ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002eaa:	f7fe fa03 	bl	80012b4 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e1cb      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002ebc:	f7ff fbff 	bl	80026be <LL_RCC_LSI1_IsReady>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f1      	beq.n	8002eaa <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002ec6:	f7ff fc1d 	bl	8002704 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x3a2>
 8002ecc:	20000004 	.word	0x20000004
 8002ed0:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ed4:	f7fe f9ee 	bl	80012b4 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1b6      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ee6:	f7ff fc1e 	bl	8002726 <LL_RCC_LSI2_IsReady>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f1      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x390>
 8002ef0:	e027      	b.n	8002f42 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002ef2:	f7ff fc07 	bl	8002704 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7fe f9dd 	bl	80012b4 <HAL_GetTick>
 8002efa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002efe:	f7fe f9d9 	bl	80012b4 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e1a1      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002f10:	f7ff fc09 	bl	8002726 <LL_RCC_LSI2_IsReady>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f1      	bne.n	8002efe <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002f1a:	f7ff fbbf 	bl	800269c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f9c9 	bl	80012b4 <HAL_GetTick>
 8002f22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f26:	f7fe f9c5 	bl	80012b4 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e18d      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002f38:	f7ff fbc1 	bl	80026be <LL_RCC_LSI1_IsReady>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f1      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d05b      	beq.n	8003006 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4e:	4bb5      	ldr	r3, [pc, #724]	; (8003224 <HAL_RCC_OscConfig+0x6e0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d114      	bne.n	8002f84 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f5a:	f7ff fa5f 	bl	800241c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe f9a9 	bl	80012b4 <HAL_GetTick>
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fe f9a5 	bl	80012b4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e16d      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f78:	4baa      	ldr	r3, [pc, #680]	; (8003224 <HAL_RCC_OscConfig+0x6e0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <HAL_RCC_OscConfig+0x44e>
 8002f8c:	f7ff fb1f 	bl	80025ce <LL_RCC_LSE_Enable>
 8002f90:	e00c      	b.n	8002fac <HAL_RCC_OscConfig+0x468>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d104      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x460>
 8002f9a:	f7ff fb3a 	bl	8002612 <LL_RCC_LSE_EnableBypass>
 8002f9e:	f7ff fb16 	bl	80025ce <LL_RCC_LSE_Enable>
 8002fa2:	e003      	b.n	8002fac <HAL_RCC_OscConfig+0x468>
 8002fa4:	f7ff fb24 	bl	80025f0 <LL_RCC_LSE_Disable>
 8002fa8:	f7ff fb44 	bl	8002634 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d014      	beq.n	8002fde <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe f97e 	bl	80012b4 <HAL_GetTick>
 8002fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fe f97a 	bl	80012b4 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e140      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002fd2:	f7ff fb40 	bl	8002656 <LL_RCC_LSE_IsReady>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ef      	beq.n	8002fbc <HAL_RCC_OscConfig+0x478>
 8002fdc:	e013      	b.n	8003006 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fe f969 	bl	80012b4 <HAL_GetTick>
 8002fe2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fe f965 	bl	80012b4 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e12b      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ffc:	f7ff fb2b 	bl	8002656 <LL_RCC_LSE_IsReady>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ef      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02c      	beq.n	800306c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	2b00      	cmp	r3, #0
 8003018:	d014      	beq.n	8003044 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800301a:	f7ff faa4 	bl	8002566 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7fe f949 	bl	80012b4 <HAL_GetTick>
 8003022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003026:	f7fe f945 	bl	80012b4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e10d      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003038:	f7ff fab7 	bl	80025aa <LL_RCC_HSI48_IsReady>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f1      	beq.n	8003026 <HAL_RCC_OscConfig+0x4e2>
 8003042:	e013      	b.n	800306c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003044:	f7ff faa0 	bl	8002588 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fe f934 	bl	80012b4 <HAL_GetTick>
 800304c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003050:	f7fe f930 	bl	80012b4 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0f8      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003062:	f7ff faa2 	bl	80025aa <LL_RCC_HSI48_IsReady>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f1      	bne.n	8003050 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80ee 	beq.w	8003252 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003076:	f7ff fc00 	bl	800287a <LL_RCC_GetSysClkSource>
 800307a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	2b02      	cmp	r3, #2
 800308a:	f040 80af 	bne.w	80031ec <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	429a      	cmp	r2, r3
 800309a:	d123      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d11c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d114      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d10d      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d106      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d05d      	beq.n	80031a0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d058      	beq.n	800319c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0ab      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030fc:	f7ff fc73 	bl	80029e6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003100:	f7fe f8d8 	bl	80012b4 <HAL_GetTick>
 8003104:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe f8d4 	bl	80012b4 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e09c      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ef      	bne.n	8003108 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <HAL_RCC_OscConfig+0x6e4>)
 8003130:	4013      	ands	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800313a:	4311      	orrs	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003140:	0212      	lsls	r2, r2, #8
 8003142:	4311      	orrs	r1, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003148:	4311      	orrs	r1, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800314e:	4311      	orrs	r1, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003154:	430a      	orrs	r2, r1
 8003156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800315a:	4313      	orrs	r3, r2
 800315c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800315e:	f7ff fc33 	bl	80029c8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800316c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003170:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003172:	f7fe f89f 	bl	80012b4 <HAL_GetTick>
 8003176:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317a:	f7fe f89b 	bl	80012b4 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e063      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0ef      	beq.n	800317a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800319a:	e05a      	b.n	8003252 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e059      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d151      	bne.n	8003252 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031ae:	f7ff fc0b 	bl	80029c8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031c2:	f7fe f877 	bl	80012b4 <HAL_GetTick>
 80031c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fe f873 	bl	80012b4 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e03b      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0ef      	beq.n	80031ca <HAL_RCC_OscConfig+0x686>
 80031ea:	e032      	b.n	8003252 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b0c      	cmp	r3, #12
 80031f0:	d02d      	beq.n	800324e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	f7ff fbf8 	bl	80029e6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80031f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003200:	f023 0303 	bic.w	r3, r3, #3
 8003204:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003210:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003218:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fe f84b 	bl	80012b4 <HAL_GetTick>
 800321e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003220:	e00d      	b.n	800323e <HAL_RCC_OscConfig+0x6fa>
 8003222:	bf00      	nop
 8003224:	58000400 	.word	0x58000400
 8003228:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322c:	f7fe f842 	bl	80012b4 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ef      	bne.n	800322c <HAL_RCC_OscConfig+0x6e8>
 800324c:	e001      	b.n	8003252 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3734      	adds	r7, #52	; 0x34
 8003258:	46bd      	mov	sp, r7
 800325a:	bd90      	pop	{r4, r7, pc}

0800325c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e12d      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b98      	ldr	r3, [pc, #608]	; (80034d4 <HAL_RCC_ClockConfig+0x278>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d91b      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b95      	ldr	r3, [pc, #596]	; (80034d4 <HAL_RCC_ClockConfig+0x278>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 0207 	bic.w	r2, r3, #7
 8003286:	4993      	ldr	r1, [pc, #588]	; (80034d4 <HAL_RCC_ClockConfig+0x278>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328e:	f7fe f811 	bl	80012b4 <HAL_GetTick>
 8003292:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003296:	f7fe f80d 	bl	80012b4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e111      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a8:	4b8a      	ldr	r3, [pc, #552]	; (80034d4 <HAL_RCC_ClockConfig+0x278>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d1ef      	bne.n	8003296 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fae3 	bl	8002892 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032cc:	f7fd fff2 	bl	80012b4 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032d4:	f7fd ffee 	bl	80012b4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0f2      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80032e6:	f7ff fbd0 	bl	8002a8a <LL_RCC_IsActiveFlag_HPRE>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f1      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d016      	beq.n	800332a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fada 	bl	80028ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003306:	f7fd ffd5 	bl	80012b4 <HAL_GetTick>
 800330a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800330e:	f7fd ffd1 	bl	80012b4 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0d5      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003320:	f7ff fbc5 	bl	8002aae <LL_RCC_IsActiveFlag_C2HPRE>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f1      	beq.n	800330e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fad3 	bl	80028e6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003340:	f7fd ffb8 	bl	80012b4 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003348:	f7fd ffb4 	bl	80012b4 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e0b8      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800335a:	f7ff fbbb 	bl	8002ad4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f1      	beq.n	8003348 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d016      	beq.n	800339e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff facd 	bl	8002914 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800337a:	f7fd ff9b 	bl	80012b4 <HAL_GetTick>
 800337e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003382:	f7fd ff97 	bl	80012b4 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e09b      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003394:	f7ff fbb1 	bl	8002afa <LL_RCC_IsActiveFlag_PPRE1>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f1      	beq.n	8003382 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d017      	beq.n	80033da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fac3 	bl	800293c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033b6:	f7fd ff7d 	bl	80012b4 <HAL_GetTick>
 80033ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033be:	f7fd ff79 	bl	80012b4 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e07d      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80033d0:	f7ff fba5 	bl	8002b1e <LL_RCC_IsActiveFlag_PPRE2>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f1      	beq.n	80033be <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d043      	beq.n	800346e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d106      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80033ee:	f7ff f863 	bl	80024b8 <LL_RCC_HSE_IsReady>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11e      	bne.n	8003436 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e067      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b03      	cmp	r3, #3
 8003402:	d106      	bne.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003404:	f7ff fafe 	bl	8002a04 <LL_RCC_PLL_IsReady>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d113      	bne.n	8003436 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e05c      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800341a:	f7ff f9cb 	bl	80027b4 <LL_RCC_MSI_IsReady>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d108      	bne.n	8003436 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e051      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003428:	f7ff f876 	bl	8002518 <LL_RCC_HSI_IsReady>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e04a      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fa09 	bl	8002852 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003440:	f7fd ff38 	bl	80012b4 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	e00a      	b.n	800345e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003448:	f7fd ff34 	bl	80012b4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e036      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	f7ff fa0c 	bl	800287a <LL_RCC_GetSysClkSource>
 8003462:	4602      	mov	r2, r0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	429a      	cmp	r2, r3
 800346c:	d1ec      	bne.n	8003448 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800346e:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_RCC_ClockConfig+0x278>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d21b      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <HAL_RCC_ClockConfig+0x278>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f023 0207 	bic.w	r2, r3, #7
 8003484:	4913      	ldr	r1, [pc, #76]	; (80034d4 <HAL_RCC_ClockConfig+0x278>)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348c:	f7fd ff12 	bl	80012b4 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003494:	f7fd ff0e 	bl	80012b4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e012      	b.n	80034cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_ClockConfig+0x278>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d1ef      	bne.n	8003494 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80034b4:	f000 f87e 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <HAL_RCC_ClockConfig+0x27c>)
 80034bc:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80034be:	f7fd ff05 	bl	80012cc <HAL_GetTickPrio>
 80034c2:	4603      	mov	r3, r0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd fea7 	bl	8001218 <HAL_InitTick>
 80034ca:	4603      	mov	r3, r0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	58004000 	.word	0x58004000
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e2:	f7ff f9ca 	bl	800287a <LL_RCC_GetSysClkSource>
 80034e6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80034ee:	f7ff f986 	bl	80027fe <LL_RCC_MSI_GetRange>
 80034f2:	4603      	mov	r3, r0
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	4a2b      	ldr	r2, [pc, #172]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	e04b      	b.n	800359c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b04      	cmp	r3, #4
 8003508:	d102      	bne.n	8003510 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800350a:	4b28      	ldr	r3, [pc, #160]	; (80035ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	e045      	b.n	800359c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b08      	cmp	r3, #8
 8003514:	d10a      	bne.n	800352c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003516:	f7fe ff9f 	bl	8002458 <LL_RCC_HSE_IsEnabledDiv2>
 800351a:	4603      	mov	r3, r0
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003520:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e03a      	b.n	800359c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003526:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	e037      	b.n	800359c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800352c:	f7ff faa1 	bl	8002a72 <LL_RCC_PLL_GetMainSource>
 8003530:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d003      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x64>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d003      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0x6a>
 800353e:	e00d      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003542:	60bb      	str	r3, [r7, #8]
        break;
 8003544:	e015      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003546:	f7fe ff87 	bl	8002458 <LL_RCC_HSE_IsEnabledDiv2>
 800354a:	4603      	mov	r3, r0
 800354c:	2b01      	cmp	r3, #1
 800354e:	d102      	bne.n	8003556 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003550:	4b16      	ldr	r3, [pc, #88]	; (80035ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003552:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003554:	e00d      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003556:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003558:	60bb      	str	r3, [r7, #8]
        break;
 800355a:	e00a      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800355c:	f7ff f94f 	bl	80027fe <LL_RCC_MSI_GetRange>
 8003560:	4603      	mov	r3, r0
 8003562:	091b      	lsrs	r3, r3, #4
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	4a0f      	ldr	r2, [pc, #60]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800356a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356e:	60bb      	str	r3, [r7, #8]
        break;
 8003570:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003572:	f7ff fa59 	bl	8002a28 <LL_RCC_PLL_GetN>
 8003576:	4602      	mov	r2, r0
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	fb03 f402 	mul.w	r4, r3, r2
 800357e:	f7ff fa6c 	bl	8002a5a <LL_RCC_PLL_GetDivider>
 8003582:	4603      	mov	r3, r0
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	3301      	adds	r3, #1
 8003588:	fbb4 f4f3 	udiv	r4, r4, r3
 800358c:	f7ff fa59 	bl	8002a42 <LL_RCC_PLL_GetR>
 8003590:	4603      	mov	r3, r0
 8003592:	0f5b      	lsrs	r3, r3, #29
 8003594:	3301      	adds	r3, #1
 8003596:	fbb4 f3f3 	udiv	r3, r4, r3
 800359a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800359c:	68fb      	ldr	r3, [r7, #12]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd90      	pop	{r4, r7, pc}
 80035a6:	bf00      	nop
 80035a8:	080050c4 	.word	0x080050c4
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	01e84800 	.word	0x01e84800

080035b4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b598      	push	{r3, r4, r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80035b8:	f7ff ff90 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 80035bc:	4604      	mov	r4, r0
 80035be:	f7ff f9d1 	bl	8002964 <LL_RCC_GetAHBPrescaler>
 80035c2:	4603      	mov	r3, r0
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	4a03      	ldr	r2, [pc, #12]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x24>)
 80035cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd98      	pop	{r3, r4, r7, pc}
 80035d8:	08005064 	.word	0x08005064

080035dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035dc:	b598      	push	{r3, r4, r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80035e0:	f7ff ffe8 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035e4:	4604      	mov	r4, r0
 80035e6:	f7ff f9d7 	bl	8002998 <LL_RCC_GetAPB1Prescaler>
 80035ea:	4603      	mov	r3, r0
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	4a04      	ldr	r2, [pc, #16]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd98      	pop	{r3, r4, r7, pc}
 8003604:	080050a4 	.word	0x080050a4

08003608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003608:	b598      	push	{r3, r4, r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800360c:	f7ff ffd2 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8003610:	4604      	mov	r4, r0
 8003612:	f7ff f9cd 	bl	80029b0 <LL_RCC_GetAPB2Prescaler>
 8003616:	4603      	mov	r3, r0
 8003618:	0adb      	lsrs	r3, r3, #11
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	4a04      	ldr	r2, [pc, #16]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	fa24 f303 	lsr.w	r3, r4, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd98      	pop	{r3, r4, r7, pc}
 8003630:	080050a4 	.word	0x080050a4

08003634 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2bb0      	cmp	r3, #176	; 0xb0
 8003640:	d903      	bls.n	800364a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e007      	b.n	800365a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	4a11      	ldr	r2, [pc, #68]	; (8003698 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003658:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800365a:	f7ff f98f 	bl	800297c <LL_RCC_GetAHB4Prescaler>
 800365e:	4603      	mov	r3, r0
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	4a0d      	ldr	r2, [pc, #52]	; (800369c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	0c9c      	lsrs	r4, r3, #18
 800367e:	f7fe fedd 	bl	800243c <HAL_PWREx_GetVoltageRange>
 8003682:	4603      	mov	r3, r0
 8003684:	4619      	mov	r1, r3
 8003686:	4620      	mov	r0, r4
 8003688:	f000 f80c 	bl	80036a4 <RCC_SetFlashLatency>
 800368c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	bd90      	pop	{r4, r7, pc}
 8003696:	bf00      	nop
 8003698:	080050c4 	.word	0x080050c4
 800369c:	08005064 	.word	0x08005064
 80036a0:	431bde83 	.word	0x431bde83

080036a4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b093      	sub	sp, #76	; 0x4c
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80036ae:	4b39      	ldr	r3, [pc, #228]	; (8003794 <RCC_SetFlashLatency+0xf0>)
 80036b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80036b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80036ba:	4a37      	ldr	r2, [pc, #220]	; (8003798 <RCC_SetFlashLatency+0xf4>)
 80036bc:	f107 031c 	add.w	r3, r7, #28
 80036c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80036c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80036c6:	4b35      	ldr	r3, [pc, #212]	; (800379c <RCC_SetFlashLatency+0xf8>)
 80036c8:	f107 040c 	add.w	r4, r7, #12
 80036cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80036d2:	2300      	movs	r3, #0
 80036d4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036dc:	d11c      	bne.n	8003718 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80036de:	2300      	movs	r3, #0
 80036e0:	643b      	str	r3, [r7, #64]	; 0x40
 80036e2:	e015      	b.n	8003710 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80036e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036ec:	4413      	add	r3, r2
 80036ee:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d808      	bhi.n	800370a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80036f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003700:	4413      	add	r3, r2
 8003702:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003706:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003708:	e022      	b.n	8003750 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800370a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370c:	3301      	adds	r3, #1
 800370e:	643b      	str	r3, [r7, #64]	; 0x40
 8003710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003712:	2b03      	cmp	r3, #3
 8003714:	d9e6      	bls.n	80036e4 <RCC_SetFlashLatency+0x40>
 8003716:	e01b      	b.n	8003750 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003718:	2300      	movs	r3, #0
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371c:	e015      	b.n	800374a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800371e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003726:	4413      	add	r3, r2
 8003728:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	429a      	cmp	r2, r3
 8003730:	d808      	bhi.n	8003744 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800373a:	4413      	add	r3, r2
 800373c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003740:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003742:	e005      	b.n	8003750 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003746:	3301      	adds	r3, #1
 8003748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800374a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374c:	2b02      	cmp	r3, #2
 800374e:	d9e6      	bls.n	800371e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <RCC_SetFlashLatency+0xfc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f023 0207 	bic.w	r2, r3, #7
 8003758:	4911      	ldr	r1, [pc, #68]	; (80037a0 <RCC_SetFlashLatency+0xfc>)
 800375a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800375c:	4313      	orrs	r3, r2
 800375e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003760:	f7fd fda8 	bl	80012b4 <HAL_GetTick>
 8003764:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003766:	e008      	b.n	800377a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003768:	f7fd fda4 	bl	80012b4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e007      	b.n	800378a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <RCC_SetFlashLatency+0xfc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003784:	429a      	cmp	r2, r3
 8003786:	d1ef      	bne.n	8003768 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	374c      	adds	r7, #76	; 0x4c
 800378e:	46bd      	mov	sp, r7
 8003790:	bd90      	pop	{r4, r7, pc}
 8003792:	bf00      	nop
 8003794:	08005038 	.word	0x08005038
 8003798:	08005048 	.word	0x08005048
 800379c:	08005054 	.word	0x08005054
 80037a0:	58004000 	.word	0x58004000

080037a4 <LL_RCC_LSE_IsEnabled>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80037a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <LL_RCC_LSE_IsEnabled+0x18>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <LL_RCC_LSE_IsEnabled+0x1a>
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_RCC_LSE_IsReady>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80037cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d101      	bne.n	80037e0 <LL_RCC_LSE_IsReady+0x18>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <LL_RCC_LSE_IsReady+0x1a>
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_RCC_MSI_EnablePLLMode>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80037f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037fa:	f043 0304 	orr.w	r3, r3, #4
 80037fe:	6013      	str	r3, [r2, #0]
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_RCC_SetRFWKPClockSource>:
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800381e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <LL_RCC_SetSMPSClockSource>:
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800383e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f023 0203 	bic.w	r2, r3, #3
 8003848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4313      	orrs	r3, r2
 8003850:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <LL_RCC_SetSMPSPrescaler>:
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003870:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4313      	orrs	r3, r2
 8003878:	624b      	str	r3, [r1, #36]	; 0x24
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <LL_RCC_SetUSARTClockSource>:
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <LL_RCC_SetLPUARTClockSource>:
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_RCC_SetI2CClockSource>:
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80038f6:	43db      	mvns	r3, r3
 80038f8:	401a      	ands	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_RCC_SetLPTIMClockSource>:
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003924:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	0c1b      	lsrs	r3, r3, #16
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	43db      	mvns	r3, r3
 8003930:	401a      	ands	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	041b      	lsls	r3, r3, #16
 8003936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_RCC_SetSAIClockSource>:
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_RCC_SetRNGClockSource>:
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800398c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_RCC_SetCLK48ClockSource>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80039ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_RCC_SetUSBClockSource>:
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ffe3 	bl	80039a4 <LL_RCC_SetCLK48ClockSource>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <LL_RCC_SetADCClockSource>:
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <LL_RCC_SetRTCClockSource>:
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_RCC_GetRTCClockSource>:
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_RCC_ForceBackupDomainReset>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_RCC_ReleaseBackupDomainReset>:
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a92:	bf00      	nop
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_RCC_PLLSAI1_Enable>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aae:	6013      	str	r3, [r2, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_RCC_PLLSAI1_Disable>:
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003acc:	6013      	str	r3, [r2, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_PLLSAI1_IsReady>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aea:	d101      	bne.n	8003af0 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003b04:	2300      	movs	r3, #0
 8003b06:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b08:	2300      	movs	r3, #0
 8003b0a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d034      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b20:	d021      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003b22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b26:	d81b      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b2c:	d01d      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003b2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b32:	d815      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3c:	d110      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b4e:	e00d      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 f94d 	bl	8003df4 <RCCEx_PLLSAI1_ConfigNP>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b5e:	e005      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	77fb      	strb	r3, [r7, #31]
        break;
 8003b64:	e002      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b6c:	7ffb      	ldrb	r3, [r7, #31]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fee8 	bl	800394c <LL_RCC_SetSAIClockSource>
 8003b7c:	e001      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	7ffb      	ldrb	r3, [r7, #31]
 8003b80:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d046      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003b8e:	f7ff ff56 	bl	8003a3e <LL_RCC_GetRTCClockSource>
 8003b92:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d03c      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003b9e:	f7fe fc3d 	bl	800241c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff30 	bl	8003a12 <LL_RCC_SetRTCClockSource>
 8003bb2:	e02e      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003bbe:	f7ff ff4b 	bl	8003a58 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003bc2:	f7ff ff5a 	bl	8003a7a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003bde:	f7ff fde1 	bl	80037a4 <LL_RCC_LSE_IsEnabled>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d114      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003be8:	f7fd fb64 	bl	80012b4 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003bee:	e00b      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf0:	f7fd fb60 	bl	80012b4 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d902      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	77fb      	strb	r3, [r7, #31]
              break;
 8003c06:	e004      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003c08:	f7ff fdde 	bl	80037c8 <LL_RCC_LSE_IsReady>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d1ee      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003c12:	7ffb      	ldrb	r3, [r7, #31]
 8003c14:	77bb      	strb	r3, [r7, #30]
 8003c16:	e001      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c18:	7ffb      	ldrb	r3, [r7, #31]
 8003c1a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d004      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fe2a 	bl	8003886 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fe35 	bl	80038b2 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d004      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fe5d 	bl	8003918 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fe52 	bl	8003918 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d004      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fe2a 	bl	80038de <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fe1f 	bl	80038de <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d022      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fe8d 	bl	80039d0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cbe:	d107      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cce:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd8:	d10b      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f8e3 	bl	8003eaa <RCCEx_PLLSAI1_ConfigNQ>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003ce8:	7ffb      	ldrb	r3, [r7, #31]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003cee:	7ffb      	ldrb	r3, [r7, #31]
 8003cf0:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d02b      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d06:	d008      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d10:	d003      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d105      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fe2a 	bl	8003978 <LL_RCC_SetRNGClockSource>
 8003d24:	e00a      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	2000      	movs	r0, #0
 8003d32:	f7ff fe21 	bl	8003978 <LL_RCC_SetRNGClockSource>
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff fe34 	bl	80039a4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003d44:	d107      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d54:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d022      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fe3d 	bl	80039e6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d74:	d107      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 f8e3 	bl	8003f60 <RCCEx_PLLSAI1_ConfigNR>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003d9e:	7ffb      	ldrb	r3, [r7, #31]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8003da4:	7ffb      	ldrb	r3, [r7, #31]
 8003da6:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d004      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fd26 	bl	800380a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fd45 	bl	800385e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fd2c 	bl	8003836 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003dde:	7fbb      	ldrb	r3, [r7, #30]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003dec:	f7ff fcfe 	bl	80037ec <LL_RCC_MSI_EnablePLLMode>
}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003e00:	f7ff fe5b 	bl	8003aba <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e04:	f7fd fa56 	bl	80012b4 <HAL_GetTick>
 8003e08:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e0a:	e009      	b.n	8003e20 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e0c:	f7fd fa52 	bl	80012b4 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d902      	bls.n	8003e20 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e1e:	e004      	b.n	8003e2a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e20:	f7ff fe5a 	bl	8003ad8 <LL_RCC_PLLSAI1_IsReady>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d137      	bne.n	8003ea0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e44:	4313      	orrs	r3, r2
 8003e46:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003e5e:	f7ff fe1d 	bl	8003a9c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e62:	f7fd fa27 	bl	80012b4 <HAL_GetTick>
 8003e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e68:	e009      	b.n	8003e7e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e6a:	f7fd fa23 	bl	80012b4 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d902      	bls.n	8003e7e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e7c:	e004      	b.n	8003e88 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e7e:	f7ff fe2b 	bl	8003ad8 <LL_RCC_PLLSAI1_IsReady>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d1f0      	bne.n	8003e6a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d108      	bne.n	8003ea0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003eb6:	f7ff fe00 	bl	8003aba <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003eba:	f7fd f9fb 	bl	80012b4 <HAL_GetTick>
 8003ebe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ec0:	e009      	b.n	8003ed6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ec2:	f7fd f9f7 	bl	80012b4 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d902      	bls.n	8003ed6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed4:	e004      	b.n	8003ee0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ed6:	f7ff fdff 	bl	8003ad8 <LL_RCC_PLLSAI1_IsReady>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d137      	bne.n	8003f56 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003efa:	4313      	orrs	r3, r2
 8003efc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f10:	4313      	orrs	r3, r2
 8003f12:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003f14:	f7ff fdc2 	bl	8003a9c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f18:	f7fd f9cc 	bl	80012b4 <HAL_GetTick>
 8003f1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f1e:	e009      	b.n	8003f34 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f20:	f7fd f9c8 	bl	80012b4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d902      	bls.n	8003f34 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	73fb      	strb	r3, [r7, #15]
        break;
 8003f32:	e004      	b.n	8003f3e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f34:	f7ff fdd0 	bl	8003ad8 <LL_RCC_PLLSAI1_IsReady>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d1f0      	bne.n	8003f20 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d108      	bne.n	8003f56 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f52:	4313      	orrs	r3, r2
 8003f54:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003f6c:	f7ff fda5 	bl	8003aba <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f70:	f7fd f9a0 	bl	80012b4 <HAL_GetTick>
 8003f74:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f76:	e009      	b.n	8003f8c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f78:	f7fd f99c 	bl	80012b4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d902      	bls.n	8003f8c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8a:	e004      	b.n	8003f96 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f8c:	f7ff fda4 	bl	8003ad8 <LL_RCC_PLLSAI1_IsReady>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d137      	bne.n	800400c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003fca:	f7ff fd67 	bl	8003a9c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fce:	f7fd f971 	bl	80012b4 <HAL_GetTick>
 8003fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003fd4:	e009      	b.n	8003fea <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fd6:	f7fd f96d 	bl	80012b4 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d902      	bls.n	8003fea <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	73fb      	strb	r3, [r7, #15]
        break;
 8003fe8:	e004      	b.n	8003ff4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003fea:	f7ff fd75 	bl	8003ad8 <LL_RCC_PLLSAI1_IsReady>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d1f0      	bne.n	8003fd6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d108      	bne.n	800400c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004008:	4313      	orrs	r3, r2
 800400a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800400c:	7bfb      	ldrb	r3, [r7, #15]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e049      	b.n	80040bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7fc ffa3 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3304      	adds	r3, #4
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f000 f8fb 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_TIM_ConfigClockSource+0x18>
 80040d8:	2302      	movs	r3, #2
 80040da:	e0b5      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x184>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80040fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004106:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004118:	d03e      	beq.n	8004198 <HAL_TIM_ConfigClockSource+0xd4>
 800411a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411e:	f200 8087 	bhi.w	8004230 <HAL_TIM_ConfigClockSource+0x16c>
 8004122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004126:	f000 8085 	beq.w	8004234 <HAL_TIM_ConfigClockSource+0x170>
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412e:	d87f      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x16c>
 8004130:	2b70      	cmp	r3, #112	; 0x70
 8004132:	d01a      	beq.n	800416a <HAL_TIM_ConfigClockSource+0xa6>
 8004134:	2b70      	cmp	r3, #112	; 0x70
 8004136:	d87b      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x16c>
 8004138:	2b60      	cmp	r3, #96	; 0x60
 800413a:	d050      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x11a>
 800413c:	2b60      	cmp	r3, #96	; 0x60
 800413e:	d877      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x16c>
 8004140:	2b50      	cmp	r3, #80	; 0x50
 8004142:	d03c      	beq.n	80041be <HAL_TIM_ConfigClockSource+0xfa>
 8004144:	2b50      	cmp	r3, #80	; 0x50
 8004146:	d873      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x16c>
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d058      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x13a>
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d86f      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x16c>
 8004150:	2b30      	cmp	r3, #48	; 0x30
 8004152:	d064      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x15a>
 8004154:	2b30      	cmp	r3, #48	; 0x30
 8004156:	d86b      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b20      	cmp	r3, #32
 800415a:	d060      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x15a>
 800415c:	2b20      	cmp	r3, #32
 800415e:	d867      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d05c      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x15a>
 8004164:	2b10      	cmp	r3, #16
 8004166:	d05a      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004168:	e062      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6899      	ldr	r1, [r3, #8]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f000 f949 	bl	8004410 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800418c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	609a      	str	r2, [r3, #8]
      break;
 8004196:	e04e      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	6899      	ldr	r1, [r3, #8]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f000 f932 	bl	8004410 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ba:	609a      	str	r2, [r3, #8]
      break;
 80041bc:	e03b      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6859      	ldr	r1, [r3, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f000 f8a4 	bl	8004318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2150      	movs	r1, #80	; 0x50
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f8fd 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 80041dc:	e02b      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	6859      	ldr	r1, [r3, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f000 f8c3 	bl	8004376 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2160      	movs	r1, #96	; 0x60
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f8ed 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 80041fc:	e01b      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6859      	ldr	r1, [r3, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	461a      	mov	r2, r3
 800420c:	f000 f884 	bl	8004318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2140      	movs	r1, #64	; 0x40
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f8dd 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 800421c:	e00b      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f000 f8d4 	bl	80043d6 <TIM_ITRx_SetConfig>
        break;
 800422e:	e002      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004230:	bf00      	nop
 8004232:	e000      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004234:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a2a      	ldr	r2, [pc, #168]	; (800430c <TIM_Base_SetConfig+0xbc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0x20>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426e:	d108      	bne.n	8004282 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a21      	ldr	r2, [pc, #132]	; (800430c <TIM_Base_SetConfig+0xbc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00b      	beq.n	80042a2 <TIM_Base_SetConfig+0x52>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d007      	beq.n	80042a2 <TIM_Base_SetConfig+0x52>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1e      	ldr	r2, [pc, #120]	; (8004310 <TIM_Base_SetConfig+0xc0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_Base_SetConfig+0x52>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <TIM_Base_SetConfig+0xc4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d108      	bne.n	80042b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <TIM_Base_SetConfig+0xbc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_Base_SetConfig+0xa0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a0b      	ldr	r2, [pc, #44]	; (8004310 <TIM_Base_SetConfig+0xc0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_Base_SetConfig+0xa0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <TIM_Base_SetConfig+0xc4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	615a      	str	r2, [r3, #20]
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40014400 	.word	0x40014400
 8004314:	40014800 	.word	0x40014800

08004318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f023 0201 	bic.w	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 030a 	bic.w	r3, r3, #10
 8004354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004376:	b480      	push	{r7}
 8004378:	b087      	sub	sp, #28
 800437a:	af00      	add	r7, sp, #0
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0210 	bic.w	r2, r3, #16
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	031b      	lsls	r3, r3, #12
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80043ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f043 0307 	orr.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	609a      	str	r2, [r3, #8]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800442a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	021a      	lsls	r2, r3, #8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	431a      	orrs	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4313      	orrs	r3, r2
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004464:	2302      	movs	r3, #2
 8004466:	e04a      	b.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1f      	ldr	r2, [pc, #124]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d108      	bne.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004498:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a12      	ldr	r2, [pc, #72]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d0:	d10c      	bne.n	80044ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00

08004510 <LL_RCC_GetUSARTClockSource>:
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4013      	ands	r3, r2
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <LL_RCC_GetLPUARTClockSource>:
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4013      	ands	r3, r2
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e042      	b.n	80045e8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7fc fd1b 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2224      	movs	r2, #36	; 0x24
 800457e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f82c 	bl	80045f0 <UART_SetConfig>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e022      	b.n	80045e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fa26 	bl	80049fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 faad 	bl	8004b40 <UART_CheckIdleState>
 80045e6:	4603      	mov	r3, r0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b5b0      	push	{r4, r5, r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4313      	orrs	r3, r2
 8004612:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4ba3      	ldr	r3, [pc, #652]	; (80048a8 <UART_SetConfig+0x2b8>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	69f9      	ldr	r1, [r7, #28]
 8004624:	430b      	orrs	r3, r1
 8004626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a98      	ldr	r2, [pc, #608]	; (80048ac <UART_SetConfig+0x2bc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	4313      	orrs	r3, r2
 8004656:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004662:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	69f9      	ldr	r1, [r7, #28]
 800466c:	430b      	orrs	r3, r1
 800466e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	f023 010f 	bic.w	r1, r3, #15
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a89      	ldr	r2, [pc, #548]	; (80048b0 <UART_SetConfig+0x2c0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d120      	bne.n	80046d2 <UART_SetConfig+0xe2>
 8004690:	2003      	movs	r0, #3
 8004692:	f7ff ff3d 	bl	8004510 <LL_RCC_GetUSARTClockSource>
 8004696:	4603      	mov	r3, r0
 8004698:	2b03      	cmp	r3, #3
 800469a:	d817      	bhi.n	80046cc <UART_SetConfig+0xdc>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <UART_SetConfig+0xb4>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046c1 	.word	0x080046c1
 80046ac:	080046bb 	.word	0x080046bb
 80046b0:	080046c7 	.word	0x080046c7
 80046b4:	2301      	movs	r3, #1
 80046b6:	76fb      	strb	r3, [r7, #27]
 80046b8:	e038      	b.n	800472c <UART_SetConfig+0x13c>
 80046ba:	2302      	movs	r3, #2
 80046bc:	76fb      	strb	r3, [r7, #27]
 80046be:	e035      	b.n	800472c <UART_SetConfig+0x13c>
 80046c0:	2304      	movs	r3, #4
 80046c2:	76fb      	strb	r3, [r7, #27]
 80046c4:	e032      	b.n	800472c <UART_SetConfig+0x13c>
 80046c6:	2308      	movs	r3, #8
 80046c8:	76fb      	strb	r3, [r7, #27]
 80046ca:	e02f      	b.n	800472c <UART_SetConfig+0x13c>
 80046cc:	2310      	movs	r3, #16
 80046ce:	76fb      	strb	r3, [r7, #27]
 80046d0:	e02c      	b.n	800472c <UART_SetConfig+0x13c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a75      	ldr	r2, [pc, #468]	; (80048ac <UART_SetConfig+0x2bc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d125      	bne.n	8004728 <UART_SetConfig+0x138>
 80046dc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80046e0:	f7ff ff26 	bl	8004530 <LL_RCC_GetLPUARTClockSource>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ea:	d017      	beq.n	800471c <UART_SetConfig+0x12c>
 80046ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f0:	d817      	bhi.n	8004722 <UART_SetConfig+0x132>
 80046f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f6:	d00b      	beq.n	8004710 <UART_SetConfig+0x120>
 80046f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fc:	d811      	bhi.n	8004722 <UART_SetConfig+0x132>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <UART_SetConfig+0x11a>
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004706:	d006      	beq.n	8004716 <UART_SetConfig+0x126>
 8004708:	e00b      	b.n	8004722 <UART_SetConfig+0x132>
 800470a:	2300      	movs	r3, #0
 800470c:	76fb      	strb	r3, [r7, #27]
 800470e:	e00d      	b.n	800472c <UART_SetConfig+0x13c>
 8004710:	2302      	movs	r3, #2
 8004712:	76fb      	strb	r3, [r7, #27]
 8004714:	e00a      	b.n	800472c <UART_SetConfig+0x13c>
 8004716:	2304      	movs	r3, #4
 8004718:	76fb      	strb	r3, [r7, #27]
 800471a:	e007      	b.n	800472c <UART_SetConfig+0x13c>
 800471c:	2308      	movs	r3, #8
 800471e:	76fb      	strb	r3, [r7, #27]
 8004720:	e004      	b.n	800472c <UART_SetConfig+0x13c>
 8004722:	2310      	movs	r3, #16
 8004724:	76fb      	strb	r3, [r7, #27]
 8004726:	e001      	b.n	800472c <UART_SetConfig+0x13c>
 8004728:	2310      	movs	r3, #16
 800472a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a5e      	ldr	r2, [pc, #376]	; (80048ac <UART_SetConfig+0x2bc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	f040 808b 	bne.w	800484e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004738:	7efb      	ldrb	r3, [r7, #27]
 800473a:	2b08      	cmp	r3, #8
 800473c:	d823      	bhi.n	8004786 <UART_SetConfig+0x196>
 800473e:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <UART_SetConfig+0x154>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	08004769 	.word	0x08004769
 8004748:	08004787 	.word	0x08004787
 800474c:	08004771 	.word	0x08004771
 8004750:	08004787 	.word	0x08004787
 8004754:	08004777 	.word	0x08004777
 8004758:	08004787 	.word	0x08004787
 800475c:	08004787 	.word	0x08004787
 8004760:	08004787 	.word	0x08004787
 8004764:	0800477f 	.word	0x0800477f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004768:	f7fe ff38 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 800476c:	6178      	str	r0, [r7, #20]
        break;
 800476e:	e00f      	b.n	8004790 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004770:	4b50      	ldr	r3, [pc, #320]	; (80048b4 <UART_SetConfig+0x2c4>)
 8004772:	617b      	str	r3, [r7, #20]
        break;
 8004774:	e00c      	b.n	8004790 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004776:	f7fe feb1 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800477a:	6178      	str	r0, [r7, #20]
        break;
 800477c:	e008      	b.n	8004790 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800477e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004782:	617b      	str	r3, [r7, #20]
        break;
 8004784:	e004      	b.n	8004790 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	76bb      	strb	r3, [r7, #26]
        break;
 800478e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 811a 	beq.w	80049cc <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	4a46      	ldr	r2, [pc, #280]	; (80048b8 <UART_SetConfig+0x2c8>)
 800479e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047a2:	461a      	mov	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	4413      	add	r3, r2
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d305      	bcc.n	80047c8 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d902      	bls.n	80047ce <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	76bb      	strb	r3, [r7, #26]
 80047cc:	e0fe      	b.n	80049cc <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	4a37      	ldr	r2, [pc, #220]	; (80048b8 <UART_SetConfig+0x2c8>)
 80047dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	f7fb fcc9 	bl	800017c <__aeabi_uldivmod>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	020b      	lsls	r3, r1, #8
 80047fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004800:	0202      	lsls	r2, r0, #8
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	6849      	ldr	r1, [r1, #4]
 8004806:	0849      	lsrs	r1, r1, #1
 8004808:	4608      	mov	r0, r1
 800480a:	f04f 0100 	mov.w	r1, #0
 800480e:	1814      	adds	r4, r2, r0
 8004810:	eb43 0501 	adc.w	r5, r3, r1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	461a      	mov	r2, r3
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	4620      	mov	r0, r4
 8004820:	4629      	mov	r1, r5
 8004822:	f7fb fcab 	bl	800017c <__aeabi_uldivmod>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4613      	mov	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004834:	d308      	bcc.n	8004848 <UART_SetConfig+0x258>
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483c:	d204      	bcs.n	8004848 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	e0c1      	b.n	80049cc <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	76bb      	strb	r3, [r7, #26]
 800484c:	e0be      	b.n	80049cc <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004856:	d16a      	bne.n	800492e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004858:	7efb      	ldrb	r3, [r7, #27]
 800485a:	3b01      	subs	r3, #1
 800485c:	2b07      	cmp	r3, #7
 800485e:	d82d      	bhi.n	80048bc <UART_SetConfig+0x2cc>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x278>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	08004889 	.word	0x08004889
 800486c:	08004891 	.word	0x08004891
 8004870:	080048bd 	.word	0x080048bd
 8004874:	08004897 	.word	0x08004897
 8004878:	080048bd 	.word	0x080048bd
 800487c:	080048bd 	.word	0x080048bd
 8004880:	080048bd 	.word	0x080048bd
 8004884:	0800489f 	.word	0x0800489f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004888:	f7fe febe 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 800488c:	6178      	str	r0, [r7, #20]
        break;
 800488e:	e01a      	b.n	80048c6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004890:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <UART_SetConfig+0x2c4>)
 8004892:	617b      	str	r3, [r7, #20]
        break;
 8004894:	e017      	b.n	80048c6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004896:	f7fe fe21 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800489a:	6178      	str	r0, [r7, #20]
        break;
 800489c:	e013      	b.n	80048c6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a2:	617b      	str	r3, [r7, #20]
        break;
 80048a4:	e00f      	b.n	80048c6 <UART_SetConfig+0x2d6>
 80048a6:	bf00      	nop
 80048a8:	cfff69f3 	.word	0xcfff69f3
 80048ac:	40008000 	.word	0x40008000
 80048b0:	40013800 	.word	0x40013800
 80048b4:	00f42400 	.word	0x00f42400
 80048b8:	08005104 	.word	0x08005104
      default:
        pclk = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	76bb      	strb	r3, [r7, #26]
        break;
 80048c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d07f      	beq.n	80049cc <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	4a48      	ldr	r2, [pc, #288]	; (80049f4 <UART_SetConfig+0x404>)
 80048d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048d6:	461a      	mov	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	fbb3 f3f2 	udiv	r3, r3, r2
 80048de:	005a      	lsls	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	441a      	add	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b0f      	cmp	r3, #15
 80048f8:	d916      	bls.n	8004928 <UART_SetConfig+0x338>
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004900:	d212      	bcs.n	8004928 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f023 030f 	bic.w	r3, r3, #15
 800490a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	b29b      	uxth	r3, r3
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	b29a      	uxth	r2, r3
 8004918:	89fb      	ldrh	r3, [r7, #14]
 800491a:	4313      	orrs	r3, r2
 800491c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	89fa      	ldrh	r2, [r7, #14]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	e051      	b.n	80049cc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	76bb      	strb	r3, [r7, #26]
 800492c:	e04e      	b.n	80049cc <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800492e:	7efb      	ldrb	r3, [r7, #27]
 8004930:	3b01      	subs	r3, #1
 8004932:	2b07      	cmp	r3, #7
 8004934:	d821      	bhi.n	800497a <UART_SetConfig+0x38a>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x34c>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	0800495d 	.word	0x0800495d
 8004940:	08004965 	.word	0x08004965
 8004944:	0800497b 	.word	0x0800497b
 8004948:	0800496b 	.word	0x0800496b
 800494c:	0800497b 	.word	0x0800497b
 8004950:	0800497b 	.word	0x0800497b
 8004954:	0800497b 	.word	0x0800497b
 8004958:	08004973 	.word	0x08004973
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7fe fe54 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 8004960:	6178      	str	r0, [r7, #20]
        break;
 8004962:	e00f      	b.n	8004984 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004964:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <UART_SetConfig+0x408>)
 8004966:	617b      	str	r3, [r7, #20]
        break;
 8004968:	e00c      	b.n	8004984 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496a:	f7fe fdb7 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800496e:	6178      	str	r0, [r7, #20]
        break;
 8004970:	e008      	b.n	8004984 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004976:	617b      	str	r3, [r7, #20]
        break;
 8004978:	e004      	b.n	8004984 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	76bb      	strb	r3, [r7, #26]
        break;
 8004982:	bf00      	nop
    }

    if (pclk != 0U)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d020      	beq.n	80049cc <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	4a19      	ldr	r2, [pc, #100]	; (80049f4 <UART_SetConfig+0x404>)
 8004990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004994:	461a      	mov	r2, r3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	fbb3 f2f2 	udiv	r2, r3, r2
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	085b      	lsrs	r3, r3, #1
 80049a2:	441a      	add	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b0f      	cmp	r3, #15
 80049b4:	d908      	bls.n	80049c8 <UART_SetConfig+0x3d8>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049bc:	d204      	bcs.n	80049c8 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	e001      	b.n	80049cc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80049e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bdb0      	pop	{r4, r5, r7, pc}
 80049f2:	bf00      	nop
 80049f4:	08005104 	.word	0x08005104
 80049f8:	00f42400 	.word	0x00f42400

080049fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004afa:	d10a      	bne.n	8004b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b50:	f7fc fbb0 	bl	80012b4 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d10e      	bne.n	8004b82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f82f 	bl	8004bd6 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e025      	b.n	8004bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d10e      	bne.n	8004bae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f819 	bl	8004bd6 <UART_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e00f      	b.n	8004bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	4613      	mov	r3, r2
 8004be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be6:	e062      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d05e      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7fc fb60 	bl	80012b4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11d      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e045      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02e      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5e:	d126      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e00f      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d08d      	beq.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_UARTEx_DisableFifoMode+0x16>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e027      	b.n	8004d3c <HAL_UARTEx_DisableFifoMode+0x66>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2224      	movs	r2, #36	; 0x24
 8004cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e02d      	b.n	8004dbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2224      	movs	r2, #36	; 0x24
 8004d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f84f 	bl	8004e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e02d      	b.n	8004e38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2224      	movs	r2, #36	; 0x24
 8004de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f811 	bl	8004e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d108      	bne.n	8004e62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e60:	e031      	b.n	8004ec6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e62:	2308      	movs	r3, #8
 8004e64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e66:	2308      	movs	r3, #8
 8004e68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	0e5b      	lsrs	r3, r3, #25
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	0f5b      	lsrs	r3, r3, #29
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e8a:	7bbb      	ldrb	r3, [r7, #14]
 8004e8c:	7b3a      	ldrb	r2, [r7, #12]
 8004e8e:	4911      	ldr	r1, [pc, #68]	; (8004ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8004e90:	5c8a      	ldrb	r2, [r1, r2]
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e96:	7b3a      	ldrb	r2, [r7, #12]
 8004e98:	490f      	ldr	r1, [pc, #60]	; (8004ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8004e9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	7b7a      	ldrb	r2, [r7, #13]
 8004eac:	4909      	ldr	r1, [pc, #36]	; (8004ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8004eae:	5c8a      	ldrb	r2, [r1, r2]
 8004eb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004eb4:	7b7a      	ldrb	r2, [r7, #13]
 8004eb6:	4908      	ldr	r1, [pc, #32]	; (8004ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8004eb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	0800511c 	.word	0x0800511c
 8004ed8:	08005124 	.word	0x08005124

08004edc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ee4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004ee8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	4013      	ands	r3, r2
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f12:	b084      	sub	sp, #16
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	f107 0014 	add.w	r0, r7, #20
 8004f20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	b004      	add	sp, #16
 8004f52:	4770      	bx	lr

08004f54 <__libc_init_array>:
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	4d0d      	ldr	r5, [pc, #52]	; (8004f8c <__libc_init_array+0x38>)
 8004f58:	4c0d      	ldr	r4, [pc, #52]	; (8004f90 <__libc_init_array+0x3c>)
 8004f5a:	1b64      	subs	r4, r4, r5
 8004f5c:	10a4      	asrs	r4, r4, #2
 8004f5e:	2600      	movs	r6, #0
 8004f60:	42a6      	cmp	r6, r4
 8004f62:	d109      	bne.n	8004f78 <__libc_init_array+0x24>
 8004f64:	4d0b      	ldr	r5, [pc, #44]	; (8004f94 <__libc_init_array+0x40>)
 8004f66:	4c0c      	ldr	r4, [pc, #48]	; (8004f98 <__libc_init_array+0x44>)
 8004f68:	f000 f820 	bl	8004fac <_init>
 8004f6c:	1b64      	subs	r4, r4, r5
 8004f6e:	10a4      	asrs	r4, r4, #2
 8004f70:	2600      	movs	r6, #0
 8004f72:	42a6      	cmp	r6, r4
 8004f74:	d105      	bne.n	8004f82 <__libc_init_array+0x2e>
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7c:	4798      	blx	r3
 8004f7e:	3601      	adds	r6, #1
 8004f80:	e7ee      	b.n	8004f60 <__libc_init_array+0xc>
 8004f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f86:	4798      	blx	r3
 8004f88:	3601      	adds	r6, #1
 8004f8a:	e7f2      	b.n	8004f72 <__libc_init_array+0x1e>
 8004f8c:	08005134 	.word	0x08005134
 8004f90:	08005134 	.word	0x08005134
 8004f94:	08005134 	.word	0x08005134
 8004f98:	08005138 	.word	0x08005138

08004f9c <memset>:
 8004f9c:	4402      	add	r2, r0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d100      	bne.n	8004fa6 <memset+0xa>
 8004fa4:	4770      	bx	lr
 8004fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8004faa:	e7f9      	b.n	8004fa0 <memset+0x4>

08004fac <_init>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	bf00      	nop
 8004fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb2:	bc08      	pop	{r3}
 8004fb4:	469e      	mov	lr, r3
 8004fb6:	4770      	bx	lr

08004fb8 <_fini>:
 8004fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fba:	bf00      	nop
 8004fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fbe:	bc08      	pop	{r3}
 8004fc0:	469e      	mov	lr, r3
 8004fc2:	4770      	bx	lr
